Project moniesto {
  // database_type: 'PostgreSQL'
  Note: 'moniesto, invest wisely.'
}

Table user as U {
  id varchar [not null, pk, unique]
  name varchar [not null]
  surname varchar [not null]
  username varchar [not null, unique]
  email varchar [not null, unique]
  email_verified boolean [not null, default: false]
  password varchar [not null]
  location varchar
  login_count integer [not null, default: 1]

  deleted boolean [not null, default: false]
  
  created_at timestamp [not null, default: `now()`]
  updated_at timestamp [not null, default: `now()`]
  last_login timestamp [not null, default: `now()`]
  
  indexes {
    username [unique]
    email [unique]
  }
  
  Note: 'Stores user data'
}

Table image as I {
  id varchar [not null, pk, unique]
  user_id varchar [not null]
  link varchar [not null]
  thumbnail_link varchar [not null]
  type image_type [not null]
  
  created_at timestamp [not null, default: `now()`]
  updated_at timestamp [not null, default: `now()`]
  
  indexes {
    (user_id, type) [unique]
  }
  
  Note: 'Stores image data'
}

Table moniest as M {
  id varchar [not null, pk, unique]
  user_id varchar [not null, unique]
  bio varchar
  description text
  score float [not null, default: 0]
  
  deleted boolean [not null, default: false]
  
  created_at timestamp [not null, default: `now()`]
  updated_at timestamp [not null, default: `now()`]
  
  indexes {
    (user_id) [unique]
  }
  
  Note: 'Stores moniest data'
}

Table subscription_info as SI{
  id varchar [not null, pk, unique]
  moniest_id varchar [not null, unique]
  fee float [not null, default: 5]
  message varchar
  
  deleted boolean [not null, default: false]
  
  created_at timestamp [not null, default: `now()`]
  updated_at timestamp [not null, default: `now()`]
  
  indexes {
    moniest_id
  }
  
  Note: 'Stores subscription data of a moniest'
}

Table user_subscription as US {
  id varchar [not null, pk, unique]
  user_id varchar [not null]
  moniest_id varchar [not null]
  active boolean [not null, default: true]
  
  created_at timestamp [not null, default: `now()`]
  updated_at timestamp [not null, default: `now()`]
  
  indexes {
    (user_id, moniest_id) [unique]
  }
  
  Note: 'Stores user subscription info'
}

Table post_crypto as PC {
  id varchar [not null, pk, unique]
  moniest_id varchar [not null]
  currency varchar [not null]
  start_price float [not null]
  duration timestamp [not null]
  target1 float [not null]
  target2 float [not null]
  target3 float [not null]
  stop float [not null]
  direction entry_position [not null]
  score float [not null, default: 0]
  finished boolean [not null, default: false]
  
  deleted boolean [not null, default: false]
  
  created_at timestamp [not null, default: `now()`]
  updated_at timestamp [not null, default: `now()`]
  
  indexes {
    moniest_id
  }
  
  Note: 'Stores crypto posts data'
}

Table post_crypto_description as PCD {
  id varchar [not null, pk, unique]
  post_id varchar [not null, unique]
  description text [not null]
  
  created_at timestamp [not null, default: `now()`]
  updated_at timestamp [not null, default: `now()`]
  
  indexes {
    post_id
  }
  
  Note: 'Stores crypto post description data'
}

Table card as C {
  id varchar [not null, pk, unique]
  token varchar
  deleted boolean [not null, default: false]
  
  created_at timestamp [not null, default: `now()`]
  updated_at timestamp [not null, default: `now()`]
  
  Note: 'Stores single card data'
}

Table user_card as UC {
  user_id varchar [not null]
  card_id varchar [not null, unique]

  indexes {
    (user_id, card_id) [unique]
  }
  
  Note: 'Stores relation between user and card'
}

Table moniest_card as MC {
  moniest_id varchar [not null]
  card_id varchar [not null, unique]

  indexes {
    (moniest_id, card_id) [unique]
  }
  
  Note: 'Stores relation between moniest and card'
}

Table password_reset_token as PRT{
  id varchar [not null, pk, unique]
  user_id varchar [not null]
  token varchar [not null, unique]
  token_expiry timestamp [not null]
  
  deleted boolean [not null, default: false]
  
  created_at timestamp [not null, default: `now()`]
  
  indexes {
    (user_id, token) [unique]
  }
  
  Note: 'Stores reset token for forget password operations'
}

Table email_verification_token as EV {
  id varchar [not null, pk, unique]
  user_id varchar [not null]
  token varchar [not null, unique]
  token_expiry timestamp [not null]
  
  deleted boolean [not null, default: false]
  
  created_at timestamp [not null, default: `now()`]

  indexes {
    (user_id, token) [unique]
  }

  Note: 'Stores email verification token for verifying account'
}


// > many-to-one; < one-to-many; - one-to-one; <> many-to-many
// Refs
Ref: I.user_id > U.id
Ref: U.id - M.user_id 
Ref: UC.user_id > U.id
Ref: C.id - UC.card_id
Ref: MC.moniest_id > M.id
Ref: C.id - MC.card_id
Ref: M.id - SI.moniest_id
Ref: US.user_id > U.id
Ref: US.moniest_id > M.id
Ref: PC.moniest_id > M.id
Ref: PRT.user_id > U.id
Ref: EV.user_id > U.id
Ref: PCD.post_id > PC.id



// Enums
Enum image_type {
  profile_photo
  background_photo
}

Enum entry_position {
  long
  short
}
