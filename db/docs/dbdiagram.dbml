  Project moniesto {
    // database_type: 'PostgreSQL'
    Note: 'moniesto, invest wisely.'
  }

  Table user as U {
    id varchar [not null, pk, unique]
    fullname varchar [not null]
    username varchar [not null, unique]
    email varchar [not null, unique]
    email_verified boolean [not null, default: false]
    password varchar [not null]
    location varchar
    login_count integer [not null, default: 1]
    language user_language [not null, default: "en"]

    deleted boolean [not null, default: false]
    
    created_at timestamp [not null, default: `now()`]
    updated_at timestamp [not null, default: `now()`]
    last_login timestamp [not null, default: `now()`]
    
    indexes {
      username [unique]
      email [unique]
    }
    
    Note: 'Stores user data'
  }

  Table image as I {
    id varchar [not null, pk, unique]
    user_id varchar [not null]
    link varchar [not null]
    thumbnail_link varchar [not null]
    type image_type [not null]
    
    created_at timestamp [not null, default: `now()`]
    updated_at timestamp [not null, default: `now()`]
    
    indexes {
      (user_id, type) [unique]
    }
    
    Note: 'Stores image data'
  }

  Table moniest as M {
    id varchar [not null, pk, unique]
    user_id varchar [not null, unique]
    bio varchar
    description text

    deleted boolean [not null, default: false]
    
    created_at timestamp [not null, default: `now()`]
    updated_at timestamp [not null, default: `now()`]
    
    indexes {
      (user_id) [unique]
    }
    
    Note: 'Stores moniest data'
  }

  Table moniest_post_crypto_statistics as MPCS {
    id varchar [not null, pk, unique]
    moniest_id varchar [not null]

    pnl_7days float
    roi_7days float
    win_rate_7days float
    posts_7days varchar[]
    pnl_30days float
    roi_30days float
    win_rate_30days float
    posts_30days varchar[]
    pnl_total float
    roi_total float
    win_rate_total float
  
    created_at timestamp [not null, default: `now()`]
    updated_at timestamp [not null, default: `now()`]

    indexes {
      (moniest_id) [unique]
      pnl_7days
      roi_7days
      win_rate_7days
      posts_7days
      pnl_30days
      roi_30days
      win_rate_30days
      posts_30days
      pnl_total
      roi_total
      win_rate_total
    }

    Note: 'Stores moniest crypto statistics info'
  }

  Table moniest_payout_info as MPI {
    id varchar [not null, pk, unique]
    moniest_id varchar [not null]
    source payout_source [not null, default: "BINANCE"]
    type payout_type [not null, default: "BINANCE_ID"]
    value varchar [not null]

    created_at timestamp [not null, default: `now()`]
    updated_at timestamp [not null, default: `now()`]

    indexes {
      (moniest_id, source) [unique]
    }

    Note: 'Stores moniest payout info'
  }

  Table moniest_subscription_info as MSI{
    id varchar [not null, pk, unique]
    moniest_id varchar [not null, unique]
    fee float [not null, default: 5]
    message varchar
    
    deleted boolean [not null, default: false]
    
    created_at timestamp [not null, default: `now()`]
    updated_at timestamp [not null, default: `now()`]
    
    indexes {
      moniest_id
    }
    
    Note: 'Stores subscription data of a moniest'
  }

  Table user_subscription as US {
    id varchar [not null, pk, unique]
    user_id varchar [not null]
    moniest_id varchar [not null]
    active boolean [not null, default: true]
    latest_transaction_id varchar
    subscription_start_date timestamp [not null, default: `now()`]
    subscription_end_date timestamp [not null, default: `now()`]
    
    created_at timestamp [not null, default: `now()`]
    updated_at timestamp [not null, default: `now()`]
    
    indexes {
      (user_id, moniest_id) [unique]
    }
    
    Note: 'Stores user subscription info'
  }

  Table user_subscription_history as USH {
    id varchar [not null, pk, unique]
    user_id varchar [not null]
    moniest_id varchar [not null]
    transaction_id varchar
    subscription_start_date timestamp [not null, default: `now()`]
    subscription_end_date timestamp [not null, default: `now()`]

    created_at timestamp [not null, default: `now()`]

    indexes {
      (user_id, moniest_id, transaction_id) [unique]
    }
    
    Note: 'Stores user subscriptions history'
  }

  Table post_crypto as PC {
    id varchar [not null, pk, unique]
    moniest_id varchar [not null]

    market_type post_crypto_market_type [not null]

    currency varchar [not null]
    start_price float [not null]
    duration timestamp [not null]

    take_profit float [not null]
    stop float [not null]

    target1 float
    target2 float
    target3 float

    direction direction [not null]
    leverage int [not null]

    finished boolean [not null, default: false]
    status post_crypto_status [not null, default: "pending"]

    pnl float [not null]
    roi float [not null]

    last_operated_at bigint [not null]
    hit_price float

    deleted boolean [not null, default: false]
    
    created_at timestamp [not null, default: `now()`]
    updated_at timestamp [not null, default: `now()`]
    
    indexes {
      moniest_id
      finished
      duration
      created_at
      last_operated_at
    }
    
    Note: 'Stores crypto posts data'
  }

  Table post_crypto_description as PCD {
    id varchar [not null, pk, unique]
    post_id varchar [not null, unique]
    description text [not null]
    
    created_at timestamp [not null, default: `now()`]
    updated_at timestamp [not null, default: `now()`]
    
    indexes {
      post_id
    }
    
    Note: 'Stores crypto post description data'
  }

  Table password_reset_token as PRT{
    id varchar [not null, pk, unique]
    user_id varchar [not null]
    token varchar [not null, unique]
    token_expiry timestamp [not null]
    
    deleted boolean [not null, default: false]
    
    created_at timestamp [not null, default: `now()`]
    
    indexes {
      (user_id, token) [unique]
    }
    
    Note: 'Stores reset token for forget password operations'
  }

  Table email_verification_token as EV {
    id varchar [not null, pk, unique]
    user_id varchar [not null]
    token varchar [not null, unique]
    token_expiry timestamp [not null]
    redirect_url varchar [not null]
    
    deleted boolean [not null, default: false]
    
    created_at timestamp [not null, default: `now()`]

    indexes {
      (user_id, token) [unique]
    }

    Note: 'Stores email verification token for verifying account'
  }

  Table feedback as F {
    id varchar [not null, pk, unique]
    user_id varchar // no relation because it is optional
    type varchar
    message varchar [not null]
    solved boolean [not null, default: false]
    
    created_at timestamp [not null, default: `now()`]
    solved_at timestamp

    Note: 'Stores feedback from users'
  }

  Table binance_payment_transaction as BPT {
    id varchar [not null, pk, unique]
    qrcode_link text [not null]
    checkout_link text [not null]
    deep_link text [not null]
    universal_link text [not null]
    status binance_payment_status [not null, default: "pending"]
    user_id varchar [not null]
    moniest_id varchar [not null]
    date_type binance_payment_date_type [not null, default: "MONTH"]
    date_value integer [not null]
    moniest_fee float [not null]
    amount float [not null]
    webhook_url text [not null]
    payer_id varchar

    created_at timestamp [not null, default: `now()`]
    updated_at timestamp [not null, default: `now()`]

    Note: 'Stores binance payment transactions info and history'
  }

  Table binance_payout_history as BPH {
    id varchar [not null, pk, unique]
    transaction_id varchar [not null]
    user_id varchar [not null]
    moniest_id varchar [not null] 
    payer_id varchar [not null] 
    total_amount float [not null]
    amount float [not null]
    date_type binance_payment_date_type [not null, default: "MONTH"]
    date_value integer [not null]
    date_index integer [not null]

    payout_date timestamp [not null]
    payout_year integer [not null]
    payout_month integer [not null]
    payout_day integer [not null]
    status binance_payout_status [not null, default: "pending"]

    operation_fee_percentage float

    payout_done_at timestamp
    payout_request_id varchar
    failure_message text

    created_at timestamp [not null, default: `now()`]
    updated_at timestamp [not null, default: `now()`]

    indexes {
      (transaction_id, user_id, moniest_id, payout_year, payout_month, payout_day) [unique]
    }

    Note: 'Stores binance payout info and history'
  }


  // > many-to-one; < one-to-many; - one-to-one; <> many-to-many
  // Refs
  Ref: I.user_id > U.id
  Ref: U.id - M.user_id 
  Ref: M.id - MSI.moniest_id
  Ref: MPCS.moniest_id > M.id
  Ref: MPI.moniest_id > M.id
  Ref: BPT.user_id > U.id
  Ref: BPT.moniest_id > M.id
  Ref: BPH.user_id > U.id
  Ref: BPH.moniest_id > M.id
  Ref: US.user_id > U.id
  Ref: US.moniest_id > M.id
  Ref: USH.user_id > U.id
  Ref: USH.moniest_id > M.id
  Ref: PC.moniest_id > M.id
  Ref: PRT.user_id > U.id
  Ref: EV.user_id > U.id
  Ref: PCD.post_id > PC.id
  Ref: F.user_id > U.id

  // Enums
  Enum user_language {
    en
    tr
  }

  Enum image_type {
    profile_photo
    background_photo
  }

  Enum post_crypto_market_type {
    spot
    futures
  }

  Enum direction {
    long
    short
  }

  Enum post_crypto_status {
    pending
    fail
    success
  }

  Enum binance_payment_status {
    pending
    fail
    success
  }

  Enum binance_payout_status {
    pending
    fail
    success
    refund
    refund_fail
  }

  Enum binance_payment_date_type {
    MONTH
  }

  Enum payout_source {
    BINANCE
  }

  Enum payout_type {
    BINANCE_ID
  }