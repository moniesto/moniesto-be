// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: binance_payout_history.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createBinancePayoutHistory = `-- name: CreateBinancePayoutHistory :one
INSERT INTO "binance_payout_history" (
        id,
        transaction_id,
        user_id,
        moniest_id,
        payer_id,
        total_amount,
        amount,
        date_type,
        date_value,
        payout_date,
        payout_year,
        payout_month,
        payout_day,
        status,
        operation_fee_percentage,
        payout_done_at,
        created_at,
        updated_at
    )
VALUES (
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8,
        $9,
        $10,
        $11,
        $12,
        $13,
        $14,
        $15,
        $16,
        now(),
        now()
    )
RETURNING id, transaction_id, user_id, moniest_id, payer_id, total_amount, amount, date_type, date_value, payout_date, payout_year, payout_month, payout_day, status, operation_fee_percentage, payout_done_at, created_at, updated_at
`

type CreateBinancePayoutHistoryParams struct {
	ID                     string                 `json:"id"`
	TransactionID          string                 `json:"transaction_id"`
	UserID                 string                 `json:"user_id"`
	MoniestID              string                 `json:"moniest_id"`
	PayerID                string                 `json:"payer_id"`
	TotalAmount            float64                `json:"total_amount"`
	Amount                 float64                `json:"amount"`
	DateType               BinancePaymentDateType `json:"date_type"`
	DateValue              int32                  `json:"date_value"`
	PayoutDate             time.Time              `json:"payout_date"`
	PayoutYear             int32                  `json:"payout_year"`
	PayoutMonth            int32                  `json:"payout_month"`
	PayoutDay              int32                  `json:"payout_day"`
	Status                 BinancePayoutStatus    `json:"status"`
	OperationFeePercentage sql.NullFloat64        `json:"operation_fee_percentage"`
	PayoutDoneAt           time.Time              `json:"payout_done_at"`
}

func (q *Queries) CreateBinancePayoutHistory(ctx context.Context, arg CreateBinancePayoutHistoryParams) (BinancePayoutHistory, error) {
	row := q.db.QueryRowContext(ctx, createBinancePayoutHistory,
		arg.ID,
		arg.TransactionID,
		arg.UserID,
		arg.MoniestID,
		arg.PayerID,
		arg.TotalAmount,
		arg.Amount,
		arg.DateType,
		arg.DateValue,
		arg.PayoutDate,
		arg.PayoutYear,
		arg.PayoutMonth,
		arg.PayoutDay,
		arg.Status,
		arg.OperationFeePercentage,
		arg.PayoutDoneAt,
	)
	var i BinancePayoutHistory
	err := row.Scan(
		&i.ID,
		&i.TransactionID,
		&i.UserID,
		&i.MoniestID,
		&i.PayerID,
		&i.TotalAmount,
		&i.Amount,
		&i.DateType,
		&i.DateValue,
		&i.PayoutDate,
		&i.PayoutYear,
		&i.PayoutMonth,
		&i.PayoutDay,
		&i.Status,
		&i.OperationFeePercentage,
		&i.PayoutDoneAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
