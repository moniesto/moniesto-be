// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: content.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const getDeactivePostsByCreatedAt = `-- name: GetDeactivePostsByCreatedAt :many
SELECT "pc"."id",
    "pc"."currency",
    "pc"."start_price",
    "pc"."duration",
    "pc"."target1",
    "pc"."target2",
    "pc"."target3",
    "pc"."stop",
    "pc"."direction",
    "pc"."finished",
    "pc"."status",
    "pc"."created_at",
    "pc"."updated_at",
    "m"."id" as "moniest_id",
    "m"."bio",
    "m"."description",
    "m"."score" as "moniest_score",
    "u"."id" as "user_id",
    "u"."name",
    "u"."surname",
    "u"."username",
    "u"."email_verified",
    "u"."location",
    "pcd"."description" as "post_description",
    COALESCE (
        (
            SELECT "image"."link"
            FROM "image"
            WHERE "image"."user_id" = "u"."id"
                AND "image"."type" = 'profile_photo'
        ),
        ''
    ) AS "profile_photo_link",
    COALESCE (
        (
            SELECT "image"."thumbnail_link"
            FROM "image"
            WHERE "image"."user_id" = "u"."id"
                AND "image"."type" = 'profile_photo'
        ),
        ''
    ) AS "profile_photo_thumbnail_link",
    COALESCE (
        (
            SELECT "image"."link"
            FROM "image"
            WHERE "image"."user_id" = "u"."id"
                AND "image"."type" = 'background_photo'
        ),
        ''
    ) AS "background_photo_link",
    COALESCE (
        (
            SELECT "image"."thumbnail_link"
            FROM "image"
            WHERE "image"."user_id" = "u"."id"
                AND "image"."type" = 'background_photo'
        ),
        ''
    ) AS "background_photo_thumbnail_link"
FROM "post_crypto" AS pc
    INNER JOIN "moniest" as m ON "pc"."moniest_id" = "m"."id"
    INNER JOIN "user" as u ON "m"."user_id" = "u"."id"
    AND (
        "pc"."duration" < now()
        OR "pc"."finished" = TRUE
    )
    AND "pc"."status" = 'success'
    LEFT JOIN "post_crypto_description" as pcd ON "pcd"."post_id" = "pc"."id"
ORDER BY "pc"."created_at" DESC
LIMIT $1 OFFSET $2
`

type GetDeactivePostsByCreatedAtParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetDeactivePostsByCreatedAtRow struct {
	ID                           string           `json:"id"`
	Currency                     string           `json:"currency"`
	StartPrice                   float64          `json:"start_price"`
	Duration                     time.Time        `json:"duration"`
	Target1                      float64          `json:"target1"`
	Target2                      float64          `json:"target2"`
	Target3                      float64          `json:"target3"`
	Stop                         float64          `json:"stop"`
	Direction                    EntryPosition    `json:"direction"`
	Finished                     bool             `json:"finished"`
	Status                       PostCryptoStatus `json:"status"`
	CreatedAt                    time.Time        `json:"created_at"`
	UpdatedAt                    time.Time        `json:"updated_at"`
	MoniestID                    string           `json:"moniest_id"`
	Bio                          sql.NullString   `json:"bio"`
	Description                  sql.NullString   `json:"description"`
	MoniestScore                 float64          `json:"moniest_score"`
	UserID                       string           `json:"user_id"`
	Name                         string           `json:"name"`
	Surname                      string           `json:"surname"`
	Username                     string           `json:"username"`
	EmailVerified                bool             `json:"email_verified"`
	Location                     sql.NullString   `json:"location"`
	PostDescription              sql.NullString   `json:"post_description"`
	ProfilePhotoLink             interface{}      `json:"profile_photo_link"`
	ProfilePhotoThumbnailLink    interface{}      `json:"profile_photo_thumbnail_link"`
	BackgroundPhotoLink          interface{}      `json:"background_photo_link"`
	BackgroundPhotoThumbnailLink interface{}      `json:"background_photo_thumbnail_link"`
}

func (q *Queries) GetDeactivePostsByCreatedAt(ctx context.Context, arg GetDeactivePostsByCreatedAtParams) ([]GetDeactivePostsByCreatedAtRow, error) {
	rows, err := q.db.QueryContext(ctx, getDeactivePostsByCreatedAt, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetDeactivePostsByCreatedAtRow{}
	for rows.Next() {
		var i GetDeactivePostsByCreatedAtRow
		if err := rows.Scan(
			&i.ID,
			&i.Currency,
			&i.StartPrice,
			&i.Duration,
			&i.Target1,
			&i.Target2,
			&i.Target3,
			&i.Stop,
			&i.Direction,
			&i.Finished,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.MoniestID,
			&i.Bio,
			&i.Description,
			&i.MoniestScore,
			&i.UserID,
			&i.Name,
			&i.Surname,
			&i.Username,
			&i.EmailVerified,
			&i.Location,
			&i.PostDescription,
			&i.ProfilePhotoLink,
			&i.ProfilePhotoThumbnailLink,
			&i.BackgroundPhotoLink,
			&i.BackgroundPhotoThumbnailLink,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDeactivePostsByScore = `-- name: GetDeactivePostsByScore :many
SELECT "pc"."id",
    "pc"."currency",
    "pc"."start_price",
    "pc"."duration",
    "pc"."target1",
    "pc"."target2",
    "pc"."target3",
    "pc"."stop",
    "pc"."direction",
    "pc"."finished",
    "pc"."status",
    "pc"."created_at",
    "pc"."updated_at",
    "m"."id" as "moniest_id",
    "m"."bio",
    "m"."description",
    "m"."score" as "moniest_score",
    "u"."id" as "user_id",
    "u"."name",
    "u"."surname",
    "u"."username",
    "u"."email_verified",
    "u"."location",
    "pcd"."description" as "post_description",
    COALESCE (
        (
            SELECT "image"."link"
            FROM "image"
            WHERE "image"."user_id" = "u"."id"
                AND "image"."type" = 'profile_photo'
        ),
        ''
    ) AS "profile_photo_link",
    COALESCE (
        (
            SELECT "image"."thumbnail_link"
            FROM "image"
            WHERE "image"."user_id" = "u"."id"
                AND "image"."type" = 'profile_photo'
        ),
        ''
    ) AS "profile_photo_thumbnail_link",
    COALESCE (
        (
            SELECT "image"."link"
            FROM "image"
            WHERE "image"."user_id" = "u"."id"
                AND "image"."type" = 'background_photo'
        ),
        ''
    ) AS "background_photo_link",
    COALESCE (
        (
            SELECT "image"."thumbnail_link"
            FROM "image"
            WHERE "image"."user_id" = "u"."id"
                AND "image"."type" = 'background_photo'
        ),
        ''
    ) AS "background_photo_thumbnail_link"
FROM "post_crypto" AS pc
    INNER JOIN "moniest" as m ON "pc"."moniest_id" = "m"."id"
    INNER JOIN "user" as u ON "m"."user_id" = "u"."id"
    AND (
        "pc"."duration" < now()
        OR "pc"."finished" = TRUE
    )
    AND "pc"."status" = 'success'
    LEFT JOIN "post_crypto_description" as pcd ON "pcd"."post_id" = "pc"."id"
ORDER BY "pc"."score" DESC
LIMIT $1 OFFSET $2
`

type GetDeactivePostsByScoreParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetDeactivePostsByScoreRow struct {
	ID                           string           `json:"id"`
	Currency                     string           `json:"currency"`
	StartPrice                   float64          `json:"start_price"`
	Duration                     time.Time        `json:"duration"`
	Target1                      float64          `json:"target1"`
	Target2                      float64          `json:"target2"`
	Target3                      float64          `json:"target3"`
	Stop                         float64          `json:"stop"`
	Direction                    EntryPosition    `json:"direction"`
	Finished                     bool             `json:"finished"`
	Status                       PostCryptoStatus `json:"status"`
	CreatedAt                    time.Time        `json:"created_at"`
	UpdatedAt                    time.Time        `json:"updated_at"`
	MoniestID                    string           `json:"moniest_id"`
	Bio                          sql.NullString   `json:"bio"`
	Description                  sql.NullString   `json:"description"`
	MoniestScore                 float64          `json:"moniest_score"`
	UserID                       string           `json:"user_id"`
	Name                         string           `json:"name"`
	Surname                      string           `json:"surname"`
	Username                     string           `json:"username"`
	EmailVerified                bool             `json:"email_verified"`
	Location                     sql.NullString   `json:"location"`
	PostDescription              sql.NullString   `json:"post_description"`
	ProfilePhotoLink             interface{}      `json:"profile_photo_link"`
	ProfilePhotoThumbnailLink    interface{}      `json:"profile_photo_thumbnail_link"`
	BackgroundPhotoLink          interface{}      `json:"background_photo_link"`
	BackgroundPhotoThumbnailLink interface{}      `json:"background_photo_thumbnail_link"`
}

func (q *Queries) GetDeactivePostsByScore(ctx context.Context, arg GetDeactivePostsByScoreParams) ([]GetDeactivePostsByScoreRow, error) {
	rows, err := q.db.QueryContext(ctx, getDeactivePostsByScore, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetDeactivePostsByScoreRow{}
	for rows.Next() {
		var i GetDeactivePostsByScoreRow
		if err := rows.Scan(
			&i.ID,
			&i.Currency,
			&i.StartPrice,
			&i.Duration,
			&i.Target1,
			&i.Target2,
			&i.Target3,
			&i.Stop,
			&i.Direction,
			&i.Finished,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.MoniestID,
			&i.Bio,
			&i.Description,
			&i.MoniestScore,
			&i.UserID,
			&i.Name,
			&i.Surname,
			&i.Username,
			&i.EmailVerified,
			&i.Location,
			&i.PostDescription,
			&i.ProfilePhotoLink,
			&i.ProfilePhotoThumbnailLink,
			&i.BackgroundPhotoLink,
			&i.BackgroundPhotoThumbnailLink,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMoniests = `-- name: GetMoniests :many
SELECT "u"."id",
    "m"."id" as "moniest_id",
    "u"."name",
    "u"."surname",
    "u"."username",
    "u"."email_verified",
    "u"."location",
    "u"."created_at",
    "u"."updated_at",
    "m"."bio",
    "m"."description",
    "m"."score",
    "si"."fee",
    "si"."message",
    "si"."updated_at" as "subscription_info_updated_at",
    COALESCE (
        (
            SELECT "image"."link"
            FROM "image"
            WHERE "image"."user_id" = "u"."id"
                AND "image"."type" = 'profile_photo'
        ),
        ''
    ) AS "profile_photo_link",
    COALESCE (
        (
            SELECT "image"."thumbnail_link"
            FROM "image"
            WHERE "image"."user_id" = "u"."id"
                AND "image"."type" = 'profile_photo'
        ),
        ''
    ) AS "profile_photo_thumbnail_link",
    COALESCE (
        (
            SELECT "image"."link"
            FROM "image"
            WHERE "image"."user_id" = "u"."id"
                AND "image"."type" = 'background_photo'
        ),
        ''
    ) AS "background_photo_link",
    COALESCE (
        (
            SELECT "image"."thumbnail_link"
            FROM "image"
            WHERE "image"."user_id" = "u"."id"
                AND "image"."type" = 'background_photo'
        ),
        ''
    ) AS "background_photo_thumbnail_link"
FROM "moniest" as m
    INNER JOIN "user" as u ON "u"."id" = "m"."user_id"
    INNER JOIN "subscription_info" as si ON "si"."moniest_id" = "m"."id"
    AND "u"."deleted" = FALSE
ORDER BY "m"."score" DESC
LIMIT $1 OFFSET $2
`

type GetMoniestsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetMoniestsRow struct {
	ID                           string         `json:"id"`
	MoniestID                    string         `json:"moniest_id"`
	Name                         string         `json:"name"`
	Surname                      string         `json:"surname"`
	Username                     string         `json:"username"`
	EmailVerified                bool           `json:"email_verified"`
	Location                     sql.NullString `json:"location"`
	CreatedAt                    time.Time      `json:"created_at"`
	UpdatedAt                    time.Time      `json:"updated_at"`
	Bio                          sql.NullString `json:"bio"`
	Description                  sql.NullString `json:"description"`
	Score                        float64        `json:"score"`
	Fee                          float64        `json:"fee"`
	Message                      sql.NullString `json:"message"`
	SubscriptionInfoUpdatedAt    time.Time      `json:"subscription_info_updated_at"`
	ProfilePhotoLink             interface{}    `json:"profile_photo_link"`
	ProfilePhotoThumbnailLink    interface{}    `json:"profile_photo_thumbnail_link"`
	BackgroundPhotoLink          interface{}    `json:"background_photo_link"`
	BackgroundPhotoThumbnailLink interface{}    `json:"background_photo_thumbnail_link"`
}

func (q *Queries) GetMoniests(ctx context.Context, arg GetMoniestsParams) ([]GetMoniestsRow, error) {
	rows, err := q.db.QueryContext(ctx, getMoniests, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetMoniestsRow{}
	for rows.Next() {
		var i GetMoniestsRow
		if err := rows.Scan(
			&i.ID,
			&i.MoniestID,
			&i.Name,
			&i.Surname,
			&i.Username,
			&i.EmailVerified,
			&i.Location,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Bio,
			&i.Description,
			&i.Score,
			&i.Fee,
			&i.Message,
			&i.SubscriptionInfoUpdatedAt,
			&i.ProfilePhotoLink,
			&i.ProfilePhotoThumbnailLink,
			&i.BackgroundPhotoLink,
			&i.BackgroundPhotoThumbnailLink,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSubscribedActivePosts = `-- name: GetSubscribedActivePosts :many
SELECT "pc"."id",
    "pc"."currency",
    "pc"."start_price",
    "pc"."duration",
    "pc"."target1",
    "pc"."target2",
    "pc"."target3",
    "pc"."stop",
    "pc"."direction",
    "pc"."finished",
    "pc"."status",
    "pc"."created_at",
    "pc"."updated_at",
    "m"."id" as "moniest_id",
    "m"."bio",
    "m"."description",
    "m"."score" as "moniest_score",
    "u"."id" as "user_id",
    "u"."name",
    "u"."surname",
    "u"."username",
    "u"."email_verified",
    "u"."location",
    "pcd"."description" as "post_description",
    COALESCE (
        (
            SELECT "image"."link"
            FROM "image"
            WHERE "image"."user_id" = "u"."id"
                AND "image"."type" = 'profile_photo'
        ),
        ''
    ) AS "profile_photo_link",
    COALESCE (
        (
            SELECT "image"."thumbnail_link"
            FROM "image"
            WHERE "image"."user_id" = "u"."id"
                AND "image"."type" = 'profile_photo'
        ),
        ''
    ) AS "profile_photo_thumbnail_link",
    COALESCE (
        (
            SELECT "image"."link"
            FROM "image"
            WHERE "image"."user_id" = "u"."id"
                AND "image"."type" = 'background_photo'
        ),
        ''
    ) AS "background_photo_link",
    COALESCE (
        (
            SELECT "image"."thumbnail_link"
            FROM "image"
            WHERE "image"."user_id" = "u"."id"
                AND "image"."type" = 'background_photo'
        ),
        ''
    ) AS "background_photo_thumbnail_link"
FROM "post_crypto" AS pc
    INNER JOIN "user_subscription" AS us ON "pc"."moniest_id" = "us"."moniest_id"
    AND "us"."user_id" = $1
    AND "pc"."duration" > now()
    AND "pc"."finished" = FALSE
    INNER JOIN "moniest" as m ON "pc"."moniest_id" = "m"."id"
    INNER JOIN "user" as u ON "m"."user_id" = "u"."id"
    LEFT JOIN "post_crypto_description" as pcd ON "pcd"."post_id" = "pc"."id"
ORDER BY "pc"."created_at" DESC
LIMIT $2 OFFSET $3
`

type GetSubscribedActivePostsParams struct {
	UserID string `json:"user_id"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

type GetSubscribedActivePostsRow struct {
	ID                           string           `json:"id"`
	Currency                     string           `json:"currency"`
	StartPrice                   float64          `json:"start_price"`
	Duration                     time.Time        `json:"duration"`
	Target1                      float64          `json:"target1"`
	Target2                      float64          `json:"target2"`
	Target3                      float64          `json:"target3"`
	Stop                         float64          `json:"stop"`
	Direction                    EntryPosition    `json:"direction"`
	Finished                     bool             `json:"finished"`
	Status                       PostCryptoStatus `json:"status"`
	CreatedAt                    time.Time        `json:"created_at"`
	UpdatedAt                    time.Time        `json:"updated_at"`
	MoniestID                    string           `json:"moniest_id"`
	Bio                          sql.NullString   `json:"bio"`
	Description                  sql.NullString   `json:"description"`
	MoniestScore                 float64          `json:"moniest_score"`
	UserID                       string           `json:"user_id"`
	Name                         string           `json:"name"`
	Surname                      string           `json:"surname"`
	Username                     string           `json:"username"`
	EmailVerified                bool             `json:"email_verified"`
	Location                     sql.NullString   `json:"location"`
	PostDescription              sql.NullString   `json:"post_description"`
	ProfilePhotoLink             interface{}      `json:"profile_photo_link"`
	ProfilePhotoThumbnailLink    interface{}      `json:"profile_photo_thumbnail_link"`
	BackgroundPhotoLink          interface{}      `json:"background_photo_link"`
	BackgroundPhotoThumbnailLink interface{}      `json:"background_photo_thumbnail_link"`
}

func (q *Queries) GetSubscribedActivePosts(ctx context.Context, arg GetSubscribedActivePostsParams) ([]GetSubscribedActivePostsRow, error) {
	rows, err := q.db.QueryContext(ctx, getSubscribedActivePosts, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetSubscribedActivePostsRow{}
	for rows.Next() {
		var i GetSubscribedActivePostsRow
		if err := rows.Scan(
			&i.ID,
			&i.Currency,
			&i.StartPrice,
			&i.Duration,
			&i.Target1,
			&i.Target2,
			&i.Target3,
			&i.Stop,
			&i.Direction,
			&i.Finished,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.MoniestID,
			&i.Bio,
			&i.Description,
			&i.MoniestScore,
			&i.UserID,
			&i.Name,
			&i.Surname,
			&i.Username,
			&i.EmailVerified,
			&i.Location,
			&i.PostDescription,
			&i.ProfilePhotoLink,
			&i.ProfilePhotoThumbnailLink,
			&i.BackgroundPhotoLink,
			&i.BackgroundPhotoThumbnailLink,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSubscribedDeactivePosts = `-- name: GetSubscribedDeactivePosts :many
SELECT "pc"."id",
    "pc"."currency",
    "pc"."start_price",
    "pc"."duration",
    "pc"."target1",
    "pc"."target2",
    "pc"."target3",
    "pc"."stop",
    "pc"."direction",
    "pc"."finished",
    "pc"."status",
    "pc"."created_at",
    "pc"."updated_at",
    "m"."id" as "moniest_id",
    "m"."bio",
    "m"."description",
    "m"."score" as "moniest_score",
    "u"."id" as "user_id",
    "u"."name",
    "u"."surname",
    "u"."username",
    "u"."email_verified",
    "u"."location",
    "pcd"."description" as "post_description",
    COALESCE (
        (
            SELECT "image"."link"
            FROM "image"
            WHERE "image"."user_id" = "u"."id"
                AND "image"."type" = 'profile_photo'
        ),
        ''
    ) AS "profile_photo_link",
    COALESCE (
        (
            SELECT "image"."thumbnail_link"
            FROM "image"
            WHERE "image"."user_id" = "u"."id"
                AND "image"."type" = 'profile_photo'
        ),
        ''
    ) AS "profile_photo_thumbnail_link",
    COALESCE (
        (
            SELECT "image"."link"
            FROM "image"
            WHERE "image"."user_id" = "u"."id"
                AND "image"."type" = 'background_photo'
        ),
        ''
    ) AS "background_photo_link",
    COALESCE (
        (
            SELECT "image"."thumbnail_link"
            FROM "image"
            WHERE "image"."user_id" = "u"."id"
                AND "image"."type" = 'background_photo'
        ),
        ''
    ) AS "background_photo_thumbnail_link"
FROM "post_crypto" AS pc
    INNER JOIN "user_subscription" AS us ON "pc"."moniest_id" = "us"."moniest_id"
    AND "us"."user_id" = $1
    AND (
        "pc"."duration" < now()
        OR "pc"."finished" = TRUE
    )
    INNER JOIN "moniest" as m ON "pc"."moniest_id" = "m"."id"
    INNER JOIN "user" as u ON "m"."user_id" = "u"."id"
    LEFT JOIN "post_crypto_description" as pcd ON "pcd"."post_id" = "pc"."id"
ORDER BY "pc"."created_at" DESC
LIMIT $2 OFFSET $3
`

type GetSubscribedDeactivePostsParams struct {
	UserID string `json:"user_id"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

type GetSubscribedDeactivePostsRow struct {
	ID                           string           `json:"id"`
	Currency                     string           `json:"currency"`
	StartPrice                   float64          `json:"start_price"`
	Duration                     time.Time        `json:"duration"`
	Target1                      float64          `json:"target1"`
	Target2                      float64          `json:"target2"`
	Target3                      float64          `json:"target3"`
	Stop                         float64          `json:"stop"`
	Direction                    EntryPosition    `json:"direction"`
	Finished                     bool             `json:"finished"`
	Status                       PostCryptoStatus `json:"status"`
	CreatedAt                    time.Time        `json:"created_at"`
	UpdatedAt                    time.Time        `json:"updated_at"`
	MoniestID                    string           `json:"moniest_id"`
	Bio                          sql.NullString   `json:"bio"`
	Description                  sql.NullString   `json:"description"`
	MoniestScore                 float64          `json:"moniest_score"`
	UserID                       string           `json:"user_id"`
	Name                         string           `json:"name"`
	Surname                      string           `json:"surname"`
	Username                     string           `json:"username"`
	EmailVerified                bool             `json:"email_verified"`
	Location                     sql.NullString   `json:"location"`
	PostDescription              sql.NullString   `json:"post_description"`
	ProfilePhotoLink             interface{}      `json:"profile_photo_link"`
	ProfilePhotoThumbnailLink    interface{}      `json:"profile_photo_thumbnail_link"`
	BackgroundPhotoLink          interface{}      `json:"background_photo_link"`
	BackgroundPhotoThumbnailLink interface{}      `json:"background_photo_thumbnail_link"`
}

func (q *Queries) GetSubscribedDeactivePosts(ctx context.Context, arg GetSubscribedDeactivePostsParams) ([]GetSubscribedDeactivePostsRow, error) {
	rows, err := q.db.QueryContext(ctx, getSubscribedDeactivePosts, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetSubscribedDeactivePostsRow{}
	for rows.Next() {
		var i GetSubscribedDeactivePostsRow
		if err := rows.Scan(
			&i.ID,
			&i.Currency,
			&i.StartPrice,
			&i.Duration,
			&i.Target1,
			&i.Target2,
			&i.Target3,
			&i.Stop,
			&i.Direction,
			&i.Finished,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.MoniestID,
			&i.Bio,
			&i.Description,
			&i.MoniestScore,
			&i.UserID,
			&i.Name,
			&i.Surname,
			&i.Username,
			&i.EmailVerified,
			&i.Location,
			&i.PostDescription,
			&i.ProfilePhotoLink,
			&i.ProfilePhotoThumbnailLink,
			&i.BackgroundPhotoLink,
			&i.BackgroundPhotoThumbnailLink,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchMoniests = `-- name: SearchMoniests :many
SELECT "u"."id",
    "m"."id" as "moniest_id",
    "u"."name",
    "u"."surname",
    "u"."username",
    "u"."email_verified",
    "u"."location",
    "u"."created_at",
    "u"."updated_at",
    "m"."bio",
    "m"."description",
    "m"."score",
    "si"."fee",
    "si"."message",
    "si"."updated_at" as "subscription_info_updated_at",
    COALESCE (
        (
            SELECT "image"."link"
            FROM "image"
            WHERE "image"."user_id" = "u"."id"
                AND "image"."type" = 'profile_photo'
        ),
        ''
    ) AS "profile_photo_link",
    COALESCE (
        (
            SELECT "image"."thumbnail_link"
            FROM "image"
            WHERE "image"."user_id" = "u"."id"
                AND "image"."type" = 'profile_photo'
        ),
        ''
    ) AS "profile_photo_thumbnail_link",
    COALESCE (
        (
            SELECT "image"."link"
            FROM "image"
            WHERE "image"."user_id" = "u"."id"
                AND "image"."type" = 'background_photo'
        ),
        ''
    ) AS "background_photo_link",
    COALESCE (
        (
            SELECT "image"."thumbnail_link"
            FROM "image"
            WHERE "image"."user_id" = "u"."id"
                AND "image"."type" = 'background_photo'
        ),
        ''
    ) AS "background_photo_thumbnail_link"
FROM "user" as "u"
    INNER JOIN "moniest" as "m" ON "m"."user_id" = "u"."id"
    INNER JOIN "subscription_info" as "si" ON "si"."moniest_id" = "m"."id"
WHERE (
        "u"."name" || ' ' || "u"."surname" ILIKE $1
    )
    OR (
        "u"."surname" || ' ' || "u"."name" ILIKE $1
    )
    OR ("u"."username" ILIKE $1)
    AND "u"."deleted" = FALSE
LIMIT $2 OFFSET $3
`

type SearchMoniestsParams struct {
	Name   string `json:"name"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

type SearchMoniestsRow struct {
	ID                           string         `json:"id"`
	MoniestID                    string         `json:"moniest_id"`
	Name                         string         `json:"name"`
	Surname                      string         `json:"surname"`
	Username                     string         `json:"username"`
	EmailVerified                bool           `json:"email_verified"`
	Location                     sql.NullString `json:"location"`
	CreatedAt                    time.Time      `json:"created_at"`
	UpdatedAt                    time.Time      `json:"updated_at"`
	Bio                          sql.NullString `json:"bio"`
	Description                  sql.NullString `json:"description"`
	Score                        float64        `json:"score"`
	Fee                          float64        `json:"fee"`
	Message                      sql.NullString `json:"message"`
	SubscriptionInfoUpdatedAt    time.Time      `json:"subscription_info_updated_at"`
	ProfilePhotoLink             interface{}    `json:"profile_photo_link"`
	ProfilePhotoThumbnailLink    interface{}    `json:"profile_photo_thumbnail_link"`
	BackgroundPhotoLink          interface{}    `json:"background_photo_link"`
	BackgroundPhotoThumbnailLink interface{}    `json:"background_photo_thumbnail_link"`
}

func (q *Queries) SearchMoniests(ctx context.Context, arg SearchMoniestsParams) ([]SearchMoniestsRow, error) {
	rows, err := q.db.QueryContext(ctx, searchMoniests, arg.Name, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SearchMoniestsRow{}
	for rows.Next() {
		var i SearchMoniestsRow
		if err := rows.Scan(
			&i.ID,
			&i.MoniestID,
			&i.Name,
			&i.Surname,
			&i.Username,
			&i.EmailVerified,
			&i.Location,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Bio,
			&i.Description,
			&i.Score,
			&i.Fee,
			&i.Message,
			&i.SubscriptionInfoUpdatedAt,
			&i.ProfilePhotoLink,
			&i.ProfilePhotoThumbnailLink,
			&i.BackgroundPhotoLink,
			&i.BackgroundPhotoThumbnailLink,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
