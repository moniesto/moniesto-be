// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: content.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const getDeactivePostsByCreatedAt = `-- name: GetDeactivePostsByCreatedAt :many
SELECT "pc"."id",
    "pc"."market_type",
    "pc"."currency",
    "pc"."start_price",
    "pc"."duration",
    "pc"."take_profit",
    "pc"."stop",
    "pc"."target1",
    "pc"."target2",
    "pc"."target3",
    "pc"."direction",
    "pc"."leverage",
    "pc"."finished",
    "pc"."status",
    "pc"."pnl",
    "pc"."roi",
    "pc"."created_at",
    "pc"."updated_at",
    "m"."id" as "moniest_id",
    "m"."bio",
    "m"."description",
    "mpcs"."pnl_7days",
    "mpcs"."roi_7days",
    "mpcs"."win_rate_7days",
    "mpcs"."pnl_30days",
    "mpcs"."roi_30days",
    "mpcs"."win_rate_30days",
    "mpcs"."pnl_total",
    "mpcs"."roi_total",
    "mpcs"."win_rate_total",
    "u"."id" as "user_id",
    "u"."fullname",
    "u"."username",
    "u"."email_verified",
    "u"."location",
    "pcd"."description" as "post_description",
    COALESCE (
        (
            SELECT "image"."link"
            FROM "image"
            WHERE "image"."user_id" = "u"."id"
                AND "image"."type" = 'profile_photo'
        ),
        ''
    ) AS "profile_photo_link",
    COALESCE (
        (
            SELECT "image"."thumbnail_link"
            FROM "image"
            WHERE "image"."user_id" = "u"."id"
                AND "image"."type" = 'profile_photo'
        ),
        ''
    ) AS "profile_photo_thumbnail_link",
    COALESCE (
        (
            SELECT "image"."link"
            FROM "image"
            WHERE "image"."user_id" = "u"."id"
                AND "image"."type" = 'background_photo'
        ),
        ''
    ) AS "background_photo_link",
    COALESCE (
        (
            SELECT "image"."thumbnail_link"
            FROM "image"
            WHERE "image"."user_id" = "u"."id"
                AND "image"."type" = 'background_photo'
        ),
        ''
    ) AS "background_photo_thumbnail_link"
FROM "post_crypto" AS pc
    INNER JOIN "moniest" as m ON "pc"."moniest_id" = "m"."id"
    INNER JOIN "moniest_post_crypto_statistics" AS mpcs ON "mpcs"."moniest_id" = "m"."id"
    INNER JOIN "user" as u ON "m"."user_id" = "u"."id"
    AND (
        "pc"."duration" < now()
        OR "pc"."finished" = TRUE
    )
    AND "pc"."status" = 'success'
    LEFT JOIN "post_crypto_description" as pcd ON "pcd"."post_id" = "pc"."id"
ORDER BY "pc"."created_at" DESC
LIMIT $1 OFFSET $2
`

type GetDeactivePostsByCreatedAtParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetDeactivePostsByCreatedAtRow struct {
	ID                           string               `json:"id"`
	MarketType                   PostCryptoMarketType `json:"market_type"`
	Currency                     string               `json:"currency"`
	StartPrice                   float64              `json:"start_price"`
	Duration                     time.Time            `json:"duration"`
	TakeProfit                   float64              `json:"take_profit"`
	Stop                         float64              `json:"stop"`
	Target1                      sql.NullFloat64      `json:"target1"`
	Target2                      sql.NullFloat64      `json:"target2"`
	Target3                      sql.NullFloat64      `json:"target3"`
	Direction                    Direction            `json:"direction"`
	Leverage                     int32                `json:"leverage"`
	Finished                     bool                 `json:"finished"`
	Status                       PostCryptoStatus     `json:"status"`
	Pnl                          float64              `json:"pnl"`
	Roi                          float64              `json:"roi"`
	CreatedAt                    time.Time            `json:"created_at"`
	UpdatedAt                    time.Time            `json:"updated_at"`
	MoniestID                    string               `json:"moniest_id"`
	Bio                          sql.NullString       `json:"bio"`
	Description                  sql.NullString       `json:"description"`
	Pnl7days                     sql.NullFloat64      `json:"pnl_7days"`
	Roi7days                     sql.NullFloat64      `json:"roi_7days"`
	WinRate7days                 sql.NullFloat64      `json:"win_rate_7days"`
	Pnl30days                    sql.NullFloat64      `json:"pnl_30days"`
	Roi30days                    sql.NullFloat64      `json:"roi_30days"`
	WinRate30days                sql.NullFloat64      `json:"win_rate_30days"`
	PnlTotal                     sql.NullFloat64      `json:"pnl_total"`
	RoiTotal                     sql.NullFloat64      `json:"roi_total"`
	WinRateTotal                 sql.NullFloat64      `json:"win_rate_total"`
	UserID                       string               `json:"user_id"`
	Fullname                     string               `json:"fullname"`
	Username                     string               `json:"username"`
	EmailVerified                bool                 `json:"email_verified"`
	Location                     sql.NullString       `json:"location"`
	PostDescription              sql.NullString       `json:"post_description"`
	ProfilePhotoLink             interface{}          `json:"profile_photo_link"`
	ProfilePhotoThumbnailLink    interface{}          `json:"profile_photo_thumbnail_link"`
	BackgroundPhotoLink          interface{}          `json:"background_photo_link"`
	BackgroundPhotoThumbnailLink interface{}          `json:"background_photo_thumbnail_link"`
}

func (q *Queries) GetDeactivePostsByCreatedAt(ctx context.Context, arg GetDeactivePostsByCreatedAtParams) ([]GetDeactivePostsByCreatedAtRow, error) {
	rows, err := q.db.QueryContext(ctx, getDeactivePostsByCreatedAt, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetDeactivePostsByCreatedAtRow{}
	for rows.Next() {
		var i GetDeactivePostsByCreatedAtRow
		if err := rows.Scan(
			&i.ID,
			&i.MarketType,
			&i.Currency,
			&i.StartPrice,
			&i.Duration,
			&i.TakeProfit,
			&i.Stop,
			&i.Target1,
			&i.Target2,
			&i.Target3,
			&i.Direction,
			&i.Leverage,
			&i.Finished,
			&i.Status,
			&i.Pnl,
			&i.Roi,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.MoniestID,
			&i.Bio,
			&i.Description,
			&i.Pnl7days,
			&i.Roi7days,
			&i.WinRate7days,
			&i.Pnl30days,
			&i.Roi30days,
			&i.WinRate30days,
			&i.PnlTotal,
			&i.RoiTotal,
			&i.WinRateTotal,
			&i.UserID,
			&i.Fullname,
			&i.Username,
			&i.EmailVerified,
			&i.Location,
			&i.PostDescription,
			&i.ProfilePhotoLink,
			&i.ProfilePhotoThumbnailLink,
			&i.BackgroundPhotoLink,
			&i.BackgroundPhotoThumbnailLink,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDeactivePostsByPNL = `-- name: GetDeactivePostsByPNL :many
SELECT "pc"."id",
    "pc"."market_type",
    "pc"."currency",
    "pc"."start_price",
    "pc"."duration",
    "pc"."take_profit",
    "pc"."stop",
    "pc"."target1",
    "pc"."target2",
    "pc"."target3",
    "pc"."direction",
    "pc"."leverage",
    "pc"."finished",
    "pc"."status",
    "pc"."pnl",
    "pc"."roi",
    "pc"."created_at",
    "pc"."updated_at",
    "m"."id" as "moniest_id",
    "m"."bio",
    "m"."description",
    "mpcs"."pnl_7days",
    "mpcs"."roi_7days",
    "mpcs"."win_rate_7days",
    "mpcs"."pnl_30days",
    "mpcs"."roi_30days",
    "mpcs"."win_rate_30days",
    "mpcs"."pnl_total",
    "mpcs"."roi_total",
    "mpcs"."win_rate_total",
    "u"."id" as "user_id",
    "u"."fullname",
    "u"."username",
    "u"."email_verified",
    "u"."location",
    "pcd"."description" as "post_description",
    COALESCE (
        (
            SELECT "image"."link"
            FROM "image"
            WHERE "image"."user_id" = "u"."id"
                AND "image"."type" = 'profile_photo'
        ),
        ''
    ) AS "profile_photo_link",
    COALESCE (
        (
            SELECT "image"."thumbnail_link"
            FROM "image"
            WHERE "image"."user_id" = "u"."id"
                AND "image"."type" = 'profile_photo'
        ),
        ''
    ) AS "profile_photo_thumbnail_link",
    COALESCE (
        (
            SELECT "image"."link"
            FROM "image"
            WHERE "image"."user_id" = "u"."id"
                AND "image"."type" = 'background_photo'
        ),
        ''
    ) AS "background_photo_link",
    COALESCE (
        (
            SELECT "image"."thumbnail_link"
            FROM "image"
            WHERE "image"."user_id" = "u"."id"
                AND "image"."type" = 'background_photo'
        ),
        ''
    ) AS "background_photo_thumbnail_link"
FROM "post_crypto" AS pc
    INNER JOIN "moniest" as m ON "pc"."moniest_id" = "m"."id"
    INNER JOIN "moniest_post_crypto_statistics" AS mpcs ON "mpcs"."moniest_id" = "m"."id"
    INNER JOIN "user" as u ON "m"."user_id" = "u"."id"
    AND (
        "pc"."duration" < now()
        OR "pc"."finished" = TRUE
    )
    AND "pc"."status" = 'success'
    LEFT JOIN "post_crypto_description" as pcd ON "pcd"."post_id" = "pc"."id"
ORDER BY "pc"."pnl" DESC
LIMIT $1 OFFSET $2
`

type GetDeactivePostsByPNLParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetDeactivePostsByPNLRow struct {
	ID                           string               `json:"id"`
	MarketType                   PostCryptoMarketType `json:"market_type"`
	Currency                     string               `json:"currency"`
	StartPrice                   float64              `json:"start_price"`
	Duration                     time.Time            `json:"duration"`
	TakeProfit                   float64              `json:"take_profit"`
	Stop                         float64              `json:"stop"`
	Target1                      sql.NullFloat64      `json:"target1"`
	Target2                      sql.NullFloat64      `json:"target2"`
	Target3                      sql.NullFloat64      `json:"target3"`
	Direction                    Direction            `json:"direction"`
	Leverage                     int32                `json:"leverage"`
	Finished                     bool                 `json:"finished"`
	Status                       PostCryptoStatus     `json:"status"`
	Pnl                          float64              `json:"pnl"`
	Roi                          float64              `json:"roi"`
	CreatedAt                    time.Time            `json:"created_at"`
	UpdatedAt                    time.Time            `json:"updated_at"`
	MoniestID                    string               `json:"moniest_id"`
	Bio                          sql.NullString       `json:"bio"`
	Description                  sql.NullString       `json:"description"`
	Pnl7days                     sql.NullFloat64      `json:"pnl_7days"`
	Roi7days                     sql.NullFloat64      `json:"roi_7days"`
	WinRate7days                 sql.NullFloat64      `json:"win_rate_7days"`
	Pnl30days                    sql.NullFloat64      `json:"pnl_30days"`
	Roi30days                    sql.NullFloat64      `json:"roi_30days"`
	WinRate30days                sql.NullFloat64      `json:"win_rate_30days"`
	PnlTotal                     sql.NullFloat64      `json:"pnl_total"`
	RoiTotal                     sql.NullFloat64      `json:"roi_total"`
	WinRateTotal                 sql.NullFloat64      `json:"win_rate_total"`
	UserID                       string               `json:"user_id"`
	Fullname                     string               `json:"fullname"`
	Username                     string               `json:"username"`
	EmailVerified                bool                 `json:"email_verified"`
	Location                     sql.NullString       `json:"location"`
	PostDescription              sql.NullString       `json:"post_description"`
	ProfilePhotoLink             interface{}          `json:"profile_photo_link"`
	ProfilePhotoThumbnailLink    interface{}          `json:"profile_photo_thumbnail_link"`
	BackgroundPhotoLink          interface{}          `json:"background_photo_link"`
	BackgroundPhotoThumbnailLink interface{}          `json:"background_photo_thumbnail_link"`
}

func (q *Queries) GetDeactivePostsByPNL(ctx context.Context, arg GetDeactivePostsByPNLParams) ([]GetDeactivePostsByPNLRow, error) {
	rows, err := q.db.QueryContext(ctx, getDeactivePostsByPNL, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetDeactivePostsByPNLRow{}
	for rows.Next() {
		var i GetDeactivePostsByPNLRow
		if err := rows.Scan(
			&i.ID,
			&i.MarketType,
			&i.Currency,
			&i.StartPrice,
			&i.Duration,
			&i.TakeProfit,
			&i.Stop,
			&i.Target1,
			&i.Target2,
			&i.Target3,
			&i.Direction,
			&i.Leverage,
			&i.Finished,
			&i.Status,
			&i.Pnl,
			&i.Roi,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.MoniestID,
			&i.Bio,
			&i.Description,
			&i.Pnl7days,
			&i.Roi7days,
			&i.WinRate7days,
			&i.Pnl30days,
			&i.Roi30days,
			&i.WinRate30days,
			&i.PnlTotal,
			&i.RoiTotal,
			&i.WinRateTotal,
			&i.UserID,
			&i.Fullname,
			&i.Username,
			&i.EmailVerified,
			&i.Location,
			&i.PostDescription,
			&i.ProfilePhotoLink,
			&i.ProfilePhotoThumbnailLink,
			&i.BackgroundPhotoLink,
			&i.BackgroundPhotoThumbnailLink,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMoniests = `-- name: GetMoniests :many
SELECT "u"."id",
    "m"."id" as "moniest_id",
    "u"."fullname",
    "u"."username",
    "u"."email_verified",
    "u"."location",
    "u"."created_at",
    "u"."updated_at",
    "m"."bio",
    "m"."description",
    "mpcs"."pnl_7days",
    "mpcs"."roi_7days",
    "mpcs"."win_rate_7days",
    "mpcs"."pnl_30days",
    "mpcs"."roi_30days",
    "mpcs"."win_rate_30days",
    "mpcs"."pnl_total",
    "mpcs"."roi_total",
    "mpcs"."win_rate_total",
    "msi"."fee",
    "msi"."message",
    "msi"."updated_at" as "moniest_subscription_info_updated_at",
    COUNT("us"."id") as "user_subscription_count",
    COALESCE (
        (
            SELECT "image"."link"
            FROM "image"
            WHERE "image"."user_id" = "u"."id"
                AND "image"."type" = 'profile_photo'
        ),
        ''
    ) AS "profile_photo_link",
    COALESCE (
        (
            SELECT "image"."thumbnail_link"
            FROM "image"
            WHERE "image"."user_id" = "u"."id"
                AND "image"."type" = 'profile_photo'
        ),
        ''
    ) AS "profile_photo_thumbnail_link",
    COALESCE (
        (
            SELECT "image"."link"
            FROM "image"
            WHERE "image"."user_id" = "u"."id"
                AND "image"."type" = 'background_photo'
        ),
        ''
    ) AS "background_photo_link",
    COALESCE (
        (
            SELECT "image"."thumbnail_link"
            FROM "image"
            WHERE "image"."user_id" = "u"."id"
                AND "image"."type" = 'background_photo'
        ),
        ''
    ) AS "background_photo_thumbnail_link"
FROM "moniest" as m
    INNER JOIN "user" as u ON "u"."id" = "m"."user_id"
    INNER JOIN "moniest_subscription_info" as msi ON "msi"."moniest_id" = "m"."id"
    INNER JOIN "moniest_post_crypto_statistics" as mpcs ON "mpcs"."moniest_id" = "m"."id"
    LEFT JOIN "user_subscription" as us on "us"."moniest_id" = "m"."id"
    AND "us"."active" = TRUE
    AND "u"."deleted" = FALSE
GROUP BY "u"."id",
    "m"."id",
    "msi"."id",
    "mpcs"."id"
ORDER BY "mpcs"."pnl_7days" DESC,
    "u"."created_at"
LIMIT $1 OFFSET $2
`

type GetMoniestsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetMoniestsRow struct {
	ID                               string          `json:"id"`
	MoniestID                        string          `json:"moniest_id"`
	Fullname                         string          `json:"fullname"`
	Username                         string          `json:"username"`
	EmailVerified                    bool            `json:"email_verified"`
	Location                         sql.NullString  `json:"location"`
	CreatedAt                        time.Time       `json:"created_at"`
	UpdatedAt                        time.Time       `json:"updated_at"`
	Bio                              sql.NullString  `json:"bio"`
	Description                      sql.NullString  `json:"description"`
	Pnl7days                         sql.NullFloat64 `json:"pnl_7days"`
	Roi7days                         sql.NullFloat64 `json:"roi_7days"`
	WinRate7days                     sql.NullFloat64 `json:"win_rate_7days"`
	Pnl30days                        sql.NullFloat64 `json:"pnl_30days"`
	Roi30days                        sql.NullFloat64 `json:"roi_30days"`
	WinRate30days                    sql.NullFloat64 `json:"win_rate_30days"`
	PnlTotal                         sql.NullFloat64 `json:"pnl_total"`
	RoiTotal                         sql.NullFloat64 `json:"roi_total"`
	WinRateTotal                     sql.NullFloat64 `json:"win_rate_total"`
	Fee                              float64         `json:"fee"`
	Message                          sql.NullString  `json:"message"`
	MoniestSubscriptionInfoUpdatedAt time.Time       `json:"moniest_subscription_info_updated_at"`
	UserSubscriptionCount            int64           `json:"user_subscription_count"`
	ProfilePhotoLink                 interface{}     `json:"profile_photo_link"`
	ProfilePhotoThumbnailLink        interface{}     `json:"profile_photo_thumbnail_link"`
	BackgroundPhotoLink              interface{}     `json:"background_photo_link"`
	BackgroundPhotoThumbnailLink     interface{}     `json:"background_photo_thumbnail_link"`
}

func (q *Queries) GetMoniests(ctx context.Context, arg GetMoniestsParams) ([]GetMoniestsRow, error) {
	rows, err := q.db.QueryContext(ctx, getMoniests, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetMoniestsRow{}
	for rows.Next() {
		var i GetMoniestsRow
		if err := rows.Scan(
			&i.ID,
			&i.MoniestID,
			&i.Fullname,
			&i.Username,
			&i.EmailVerified,
			&i.Location,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Bio,
			&i.Description,
			&i.Pnl7days,
			&i.Roi7days,
			&i.WinRate7days,
			&i.Pnl30days,
			&i.Roi30days,
			&i.WinRate30days,
			&i.PnlTotal,
			&i.RoiTotal,
			&i.WinRateTotal,
			&i.Fee,
			&i.Message,
			&i.MoniestSubscriptionInfoUpdatedAt,
			&i.UserSubscriptionCount,
			&i.ProfilePhotoLink,
			&i.ProfilePhotoThumbnailLink,
			&i.BackgroundPhotoLink,
			&i.BackgroundPhotoThumbnailLink,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSubscribedActivePosts = `-- name: GetSubscribedActivePosts :many
SELECT "pc"."id",
    "pc"."market_type",
    "pc"."currency",
    "pc"."start_price",
    "pc"."duration",
    "pc"."take_profit",
    "pc"."stop",
    "pc"."target1",
    "pc"."target2",
    "pc"."target3",
    "pc"."direction",
    "pc"."leverage",
    "pc"."finished",
    "pc"."status",
    "pc"."pnl",
    "pc"."roi",
    "pc"."created_at",
    "pc"."updated_at",
    "m"."id" as "moniest_id",
    "m"."bio",
    "m"."description",
    "mpcs"."pnl_7days",
    "mpcs"."roi_7days",
    "mpcs"."win_rate_7days",
    "mpcs"."pnl_30days",
    "mpcs"."roi_30days",
    "mpcs"."win_rate_30days",
    "mpcs"."pnl_total",
    "mpcs"."roi_total",
    "mpcs"."win_rate_total",
    "u"."id" as "user_id",
    "u"."fullname",
    "u"."username",
    "u"."email_verified",
    "u"."location",
    "pcd"."description" as "post_description",
    COALESCE (
        (
            SELECT "image"."link"
            FROM "image"
            WHERE "image"."user_id" = "u"."id"
                AND "image"."type" = 'profile_photo'
        ),
        ''
    ) AS "profile_photo_link",
    COALESCE (
        (
            SELECT "image"."thumbnail_link"
            FROM "image"
            WHERE "image"."user_id" = "u"."id"
                AND "image"."type" = 'profile_photo'
        ),
        ''
    ) AS "profile_photo_thumbnail_link",
    COALESCE (
        (
            SELECT "image"."link"
            FROM "image"
            WHERE "image"."user_id" = "u"."id"
                AND "image"."type" = 'background_photo'
        ),
        ''
    ) AS "background_photo_link",
    COALESCE (
        (
            SELECT "image"."thumbnail_link"
            FROM "image"
            WHERE "image"."user_id" = "u"."id"
                AND "image"."type" = 'background_photo'
        ),
        ''
    ) AS "background_photo_thumbnail_link"
FROM "post_crypto" AS pc
    INNER JOIN "user_subscription" AS us ON "pc"."moniest_id" = "us"."moniest_id"
    AND "us"."user_id" = $1
    AND "pc"."duration" > now()
    AND "pc"."finished" = FALSE
    INNER JOIN "moniest" as m ON "pc"."moniest_id" = "m"."id"
    INNER JOIN "user" as u ON "m"."user_id" = "u"."id"
    INNER JOIN "moniest_post_crypto_statistics" AS mpcs ON "mpcs"."moniest_id" = "m"."id"
    LEFT JOIN "post_crypto_description" as pcd ON "pcd"."post_id" = "pc"."id"
ORDER BY "pc"."created_at" DESC
LIMIT $2 OFFSET $3
`

type GetSubscribedActivePostsParams struct {
	UserID string `json:"user_id"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

type GetSubscribedActivePostsRow struct {
	ID                           string               `json:"id"`
	MarketType                   PostCryptoMarketType `json:"market_type"`
	Currency                     string               `json:"currency"`
	StartPrice                   float64              `json:"start_price"`
	Duration                     time.Time            `json:"duration"`
	TakeProfit                   float64              `json:"take_profit"`
	Stop                         float64              `json:"stop"`
	Target1                      sql.NullFloat64      `json:"target1"`
	Target2                      sql.NullFloat64      `json:"target2"`
	Target3                      sql.NullFloat64      `json:"target3"`
	Direction                    Direction            `json:"direction"`
	Leverage                     int32                `json:"leverage"`
	Finished                     bool                 `json:"finished"`
	Status                       PostCryptoStatus     `json:"status"`
	Pnl                          float64              `json:"pnl"`
	Roi                          float64              `json:"roi"`
	CreatedAt                    time.Time            `json:"created_at"`
	UpdatedAt                    time.Time            `json:"updated_at"`
	MoniestID                    string               `json:"moniest_id"`
	Bio                          sql.NullString       `json:"bio"`
	Description                  sql.NullString       `json:"description"`
	Pnl7days                     sql.NullFloat64      `json:"pnl_7days"`
	Roi7days                     sql.NullFloat64      `json:"roi_7days"`
	WinRate7days                 sql.NullFloat64      `json:"win_rate_7days"`
	Pnl30days                    sql.NullFloat64      `json:"pnl_30days"`
	Roi30days                    sql.NullFloat64      `json:"roi_30days"`
	WinRate30days                sql.NullFloat64      `json:"win_rate_30days"`
	PnlTotal                     sql.NullFloat64      `json:"pnl_total"`
	RoiTotal                     sql.NullFloat64      `json:"roi_total"`
	WinRateTotal                 sql.NullFloat64      `json:"win_rate_total"`
	UserID                       string               `json:"user_id"`
	Fullname                     string               `json:"fullname"`
	Username                     string               `json:"username"`
	EmailVerified                bool                 `json:"email_verified"`
	Location                     sql.NullString       `json:"location"`
	PostDescription              sql.NullString       `json:"post_description"`
	ProfilePhotoLink             interface{}          `json:"profile_photo_link"`
	ProfilePhotoThumbnailLink    interface{}          `json:"profile_photo_thumbnail_link"`
	BackgroundPhotoLink          interface{}          `json:"background_photo_link"`
	BackgroundPhotoThumbnailLink interface{}          `json:"background_photo_thumbnail_link"`
}

func (q *Queries) GetSubscribedActivePosts(ctx context.Context, arg GetSubscribedActivePostsParams) ([]GetSubscribedActivePostsRow, error) {
	rows, err := q.db.QueryContext(ctx, getSubscribedActivePosts, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetSubscribedActivePostsRow{}
	for rows.Next() {
		var i GetSubscribedActivePostsRow
		if err := rows.Scan(
			&i.ID,
			&i.MarketType,
			&i.Currency,
			&i.StartPrice,
			&i.Duration,
			&i.TakeProfit,
			&i.Stop,
			&i.Target1,
			&i.Target2,
			&i.Target3,
			&i.Direction,
			&i.Leverage,
			&i.Finished,
			&i.Status,
			&i.Pnl,
			&i.Roi,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.MoniestID,
			&i.Bio,
			&i.Description,
			&i.Pnl7days,
			&i.Roi7days,
			&i.WinRate7days,
			&i.Pnl30days,
			&i.Roi30days,
			&i.WinRate30days,
			&i.PnlTotal,
			&i.RoiTotal,
			&i.WinRateTotal,
			&i.UserID,
			&i.Fullname,
			&i.Username,
			&i.EmailVerified,
			&i.Location,
			&i.PostDescription,
			&i.ProfilePhotoLink,
			&i.ProfilePhotoThumbnailLink,
			&i.BackgroundPhotoLink,
			&i.BackgroundPhotoThumbnailLink,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSubscribedActivePostsWithOwn = `-- name: GetSubscribedActivePostsWithOwn :many
(
    SELECT "pc"."id",
        "pc"."market_type",
        "pc"."currency",
        "pc"."start_price",
        "pc"."duration",
        "pc"."take_profit",
        "pc"."stop",
        "pc"."target1",
        "pc"."target2",
        "pc"."target3",
        "pc"."direction",
        "pc"."leverage",
        "pc"."finished",
        "pc"."status",
        "pc"."pnl",
        "pc"."roi",
        "pc"."created_at",
        "pc"."updated_at",
        "m"."id" as "moniest_id",
        "m"."bio",
        "m"."description",
        "mpcs"."pnl_7days",
        "mpcs"."roi_7days",
        "mpcs"."win_rate_7days",
        "mpcs"."pnl_30days",
        "mpcs"."roi_30days",
        "mpcs"."win_rate_30days",
        "mpcs"."pnl_total",
        "mpcs"."roi_total",
        "mpcs"."win_rate_total",
        "u"."id" as "user_id",
        "u"."fullname",
        "u"."username",
        "u"."email_verified",
        "u"."location",
        "pcd"."description" as "post_description",
        COALESCE (
            (
                SELECT "image"."link"
                FROM "image"
                WHERE "image"."user_id" = "u"."id"
                    AND "image"."type" = 'profile_photo'
            ),
            ''
        ) AS "profile_photo_link",
        COALESCE (
            (
                SELECT "image"."thumbnail_link"
                FROM "image"
                WHERE "image"."user_id" = "u"."id"
                    AND "image"."type" = 'profile_photo'
            ),
            ''
        ) AS "profile_photo_thumbnail_link",
        COALESCE (
            (
                SELECT "image"."link"
                FROM "image"
                WHERE "image"."user_id" = "u"."id"
                    AND "image"."type" = 'background_photo'
            ),
            ''
        ) AS "background_photo_link",
        COALESCE (
            (
                SELECT "image"."thumbnail_link"
                FROM "image"
                WHERE "image"."user_id" = "u"."id"
                    AND "image"."type" = 'background_photo'
            ),
            ''
        ) AS "background_photo_thumbnail_link"
    FROM "post_crypto" AS pc
        INNER JOIN "user_subscription" AS us ON "pc"."moniest_id" = "us"."moniest_id"
        AND "us"."user_id" = $1
        AND "pc"."duration" > now()
        AND "pc"."finished" = FALSE
        INNER JOIN "moniest" as m ON "pc"."moniest_id" = "m"."id"
        INNER JOIN "user" as u ON "m"."user_id" = "u"."id"
        INNER JOIN "moniest_post_crypto_statistics" AS mpcs ON "mpcs"."moniest_id" = "m"."id"
        LEFT JOIN "post_crypto_description" as pcd ON "pcd"."post_id" = "pc"."id"
)
UNION ALL
(
    SELECT "pc"."id",
        "pc"."market_type",
        "pc"."currency",
        "pc"."start_price",
        "pc"."duration",
        "pc"."take_profit",
        "pc"."stop",
        "pc"."target1",
        "pc"."target2",
        "pc"."target3",
        "pc"."direction",
        "pc"."leverage",
        "pc"."finished",
        "pc"."status",
        "pc"."pnl",
        "pc"."roi",
        "pc"."created_at",
        "pc"."updated_at",
        "m"."id" as "moniest_id",
        "m"."bio",
        "m"."description",
        "mpcs"."pnl_7days",
        "mpcs"."roi_7days",
        "mpcs"."win_rate_7days",
        "mpcs"."pnl_30days",
        "mpcs"."roi_30days",
        "mpcs"."win_rate_30days",
        "mpcs"."pnl_total",
        "mpcs"."roi_total",
        "mpcs"."win_rate_total",
        "u"."id" as "user_id",
        "u"."fullname",
        "u"."username",
        "u"."email_verified",
        "u"."location",
        "pcd"."description" as "post_description",
        COALESCE (
            (
                SELECT "image"."link"
                FROM "image"
                WHERE "image"."user_id" = "u"."id"
                    AND "image"."type" = 'profile_photo'
            ),
            ''
        ) AS "profile_photo_link",
        COALESCE (
            (
                SELECT "image"."thumbnail_link"
                FROM "image"
                WHERE "image"."user_id" = "u"."id"
                    AND "image"."type" = 'profile_photo'
            ),
            ''
        ) AS "profile_photo_thumbnail_link",
        COALESCE (
            (
                SELECT "image"."link"
                FROM "image"
                WHERE "image"."user_id" = "u"."id"
                    AND "image"."type" = 'background_photo'
            ),
            ''
        ) AS "background_photo_link",
        COALESCE (
            (
                SELECT "image"."thumbnail_link"
                FROM "image"
                WHERE "image"."user_id" = "u"."id"
                    AND "image"."type" = 'background_photo'
            ),
            ''
        ) AS "background_photo_thumbnail_link"
    FROM "post_crypto" AS pc
        INNER JOIN "moniest" as m ON "pc"."moniest_id" = "m"."id"
        AND "m"."user_id" = $1
        AND "pc"."duration" > now()
        AND "pc"."finished" = FALSE
        INNER JOIN "user" as u ON "m"."user_id" = "u"."id"
        INNER JOIN "moniest_post_crypto_statistics" AS mpcs ON "mpcs"."moniest_id" = "m"."id"
        LEFT JOIN "post_crypto_description" as pcd ON "pcd"."post_id" = "pc"."id"
)
ORDER BY "created_at" DESC
LIMIT $2 OFFSET $3
`

type GetSubscribedActivePostsWithOwnParams struct {
	UserID string `json:"user_id"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

type GetSubscribedActivePostsWithOwnRow struct {
	ID                           string               `json:"id"`
	MarketType                   PostCryptoMarketType `json:"market_type"`
	Currency                     string               `json:"currency"`
	StartPrice                   float64              `json:"start_price"`
	Duration                     time.Time            `json:"duration"`
	TakeProfit                   float64              `json:"take_profit"`
	Stop                         float64              `json:"stop"`
	Target1                      sql.NullFloat64      `json:"target1"`
	Target2                      sql.NullFloat64      `json:"target2"`
	Target3                      sql.NullFloat64      `json:"target3"`
	Direction                    Direction            `json:"direction"`
	Leverage                     int32                `json:"leverage"`
	Finished                     bool                 `json:"finished"`
	Status                       PostCryptoStatus     `json:"status"`
	Pnl                          float64              `json:"pnl"`
	Roi                          float64              `json:"roi"`
	CreatedAt                    time.Time            `json:"created_at"`
	UpdatedAt                    time.Time            `json:"updated_at"`
	MoniestID                    string               `json:"moniest_id"`
	Bio                          sql.NullString       `json:"bio"`
	Description                  sql.NullString       `json:"description"`
	Pnl7days                     sql.NullFloat64      `json:"pnl_7days"`
	Roi7days                     sql.NullFloat64      `json:"roi_7days"`
	WinRate7days                 sql.NullFloat64      `json:"win_rate_7days"`
	Pnl30days                    sql.NullFloat64      `json:"pnl_30days"`
	Roi30days                    sql.NullFloat64      `json:"roi_30days"`
	WinRate30days                sql.NullFloat64      `json:"win_rate_30days"`
	PnlTotal                     sql.NullFloat64      `json:"pnl_total"`
	RoiTotal                     sql.NullFloat64      `json:"roi_total"`
	WinRateTotal                 sql.NullFloat64      `json:"win_rate_total"`
	UserID                       string               `json:"user_id"`
	Fullname                     string               `json:"fullname"`
	Username                     string               `json:"username"`
	EmailVerified                bool                 `json:"email_verified"`
	Location                     sql.NullString       `json:"location"`
	PostDescription              sql.NullString       `json:"post_description"`
	ProfilePhotoLink             interface{}          `json:"profile_photo_link"`
	ProfilePhotoThumbnailLink    interface{}          `json:"profile_photo_thumbnail_link"`
	BackgroundPhotoLink          interface{}          `json:"background_photo_link"`
	BackgroundPhotoThumbnailLink interface{}          `json:"background_photo_thumbnail_link"`
}

func (q *Queries) GetSubscribedActivePostsWithOwn(ctx context.Context, arg GetSubscribedActivePostsWithOwnParams) ([]GetSubscribedActivePostsWithOwnRow, error) {
	rows, err := q.db.QueryContext(ctx, getSubscribedActivePostsWithOwn, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetSubscribedActivePostsWithOwnRow{}
	for rows.Next() {
		var i GetSubscribedActivePostsWithOwnRow
		if err := rows.Scan(
			&i.ID,
			&i.MarketType,
			&i.Currency,
			&i.StartPrice,
			&i.Duration,
			&i.TakeProfit,
			&i.Stop,
			&i.Target1,
			&i.Target2,
			&i.Target3,
			&i.Direction,
			&i.Leverage,
			&i.Finished,
			&i.Status,
			&i.Pnl,
			&i.Roi,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.MoniestID,
			&i.Bio,
			&i.Description,
			&i.Pnl7days,
			&i.Roi7days,
			&i.WinRate7days,
			&i.Pnl30days,
			&i.Roi30days,
			&i.WinRate30days,
			&i.PnlTotal,
			&i.RoiTotal,
			&i.WinRateTotal,
			&i.UserID,
			&i.Fullname,
			&i.Username,
			&i.EmailVerified,
			&i.Location,
			&i.PostDescription,
			&i.ProfilePhotoLink,
			&i.ProfilePhotoThumbnailLink,
			&i.BackgroundPhotoLink,
			&i.BackgroundPhotoThumbnailLink,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSubscribedDeactivePosts = `-- name: GetSubscribedDeactivePosts :many
SELECT "pc"."id",
    "pc"."market_type",
    "pc"."currency",
    "pc"."start_price",
    "pc"."duration",
    "pc"."take_profit",
    "pc"."stop",
    "pc"."target1",
    "pc"."target2",
    "pc"."target3",
    "pc"."direction",
    "pc"."leverage",
    "pc"."finished",
    "pc"."status",
    "pc"."pnl",
    "pc"."roi",
    "pc"."created_at",
    "pc"."updated_at",
    "m"."id" as "moniest_id",
    "m"."bio",
    "m"."description",
    "mpcs"."pnl_7days",
    "mpcs"."roi_7days",
    "mpcs"."win_rate_7days",
    "mpcs"."pnl_30days",
    "mpcs"."roi_30days",
    "mpcs"."win_rate_30days",
    "mpcs"."pnl_total",
    "mpcs"."roi_total",
    "mpcs"."win_rate_total",
    "u"."id" as "user_id",
    "u"."fullname",
    "u"."username",
    "u"."email_verified",
    "u"."location",
    "pcd"."description" as "post_description",
    COALESCE (
        (
            SELECT "image"."link"
            FROM "image"
            WHERE "image"."user_id" = "u"."id"
                AND "image"."type" = 'profile_photo'
        ),
        ''
    ) AS "profile_photo_link",
    COALESCE (
        (
            SELECT "image"."thumbnail_link"
            FROM "image"
            WHERE "image"."user_id" = "u"."id"
                AND "image"."type" = 'profile_photo'
        ),
        ''
    ) AS "profile_photo_thumbnail_link",
    COALESCE (
        (
            SELECT "image"."link"
            FROM "image"
            WHERE "image"."user_id" = "u"."id"
                AND "image"."type" = 'background_photo'
        ),
        ''
    ) AS "background_photo_link",
    COALESCE (
        (
            SELECT "image"."thumbnail_link"
            FROM "image"
            WHERE "image"."user_id" = "u"."id"
                AND "image"."type" = 'background_photo'
        ),
        ''
    ) AS "background_photo_thumbnail_link"
FROM "post_crypto" AS pc
    INNER JOIN "user_subscription" AS us ON "pc"."moniest_id" = "us"."moniest_id"
    AND "us"."user_id" = $1
    AND (
        "pc"."duration" < now()
        OR "pc"."finished" = TRUE
    )
    INNER JOIN "moniest" as m ON "pc"."moniest_id" = "m"."id"
    INNER JOIN "user" as u ON "m"."user_id" = "u"."id"
    INNER JOIN "moniest_post_crypto_statistics" AS mpcs ON "mpcs"."moniest_id" = "m"."id"
    LEFT JOIN "post_crypto_description" as pcd ON "pcd"."post_id" = "pc"."id"
ORDER BY "pc"."created_at" DESC
LIMIT $2 OFFSET $3
`

type GetSubscribedDeactivePostsParams struct {
	UserID string `json:"user_id"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

type GetSubscribedDeactivePostsRow struct {
	ID                           string               `json:"id"`
	MarketType                   PostCryptoMarketType `json:"market_type"`
	Currency                     string               `json:"currency"`
	StartPrice                   float64              `json:"start_price"`
	Duration                     time.Time            `json:"duration"`
	TakeProfit                   float64              `json:"take_profit"`
	Stop                         float64              `json:"stop"`
	Target1                      sql.NullFloat64      `json:"target1"`
	Target2                      sql.NullFloat64      `json:"target2"`
	Target3                      sql.NullFloat64      `json:"target3"`
	Direction                    Direction            `json:"direction"`
	Leverage                     int32                `json:"leverage"`
	Finished                     bool                 `json:"finished"`
	Status                       PostCryptoStatus     `json:"status"`
	Pnl                          float64              `json:"pnl"`
	Roi                          float64              `json:"roi"`
	CreatedAt                    time.Time            `json:"created_at"`
	UpdatedAt                    time.Time            `json:"updated_at"`
	MoniestID                    string               `json:"moniest_id"`
	Bio                          sql.NullString       `json:"bio"`
	Description                  sql.NullString       `json:"description"`
	Pnl7days                     sql.NullFloat64      `json:"pnl_7days"`
	Roi7days                     sql.NullFloat64      `json:"roi_7days"`
	WinRate7days                 sql.NullFloat64      `json:"win_rate_7days"`
	Pnl30days                    sql.NullFloat64      `json:"pnl_30days"`
	Roi30days                    sql.NullFloat64      `json:"roi_30days"`
	WinRate30days                sql.NullFloat64      `json:"win_rate_30days"`
	PnlTotal                     sql.NullFloat64      `json:"pnl_total"`
	RoiTotal                     sql.NullFloat64      `json:"roi_total"`
	WinRateTotal                 sql.NullFloat64      `json:"win_rate_total"`
	UserID                       string               `json:"user_id"`
	Fullname                     string               `json:"fullname"`
	Username                     string               `json:"username"`
	EmailVerified                bool                 `json:"email_verified"`
	Location                     sql.NullString       `json:"location"`
	PostDescription              sql.NullString       `json:"post_description"`
	ProfilePhotoLink             interface{}          `json:"profile_photo_link"`
	ProfilePhotoThumbnailLink    interface{}          `json:"profile_photo_thumbnail_link"`
	BackgroundPhotoLink          interface{}          `json:"background_photo_link"`
	BackgroundPhotoThumbnailLink interface{}          `json:"background_photo_thumbnail_link"`
}

func (q *Queries) GetSubscribedDeactivePosts(ctx context.Context, arg GetSubscribedDeactivePostsParams) ([]GetSubscribedDeactivePostsRow, error) {
	rows, err := q.db.QueryContext(ctx, getSubscribedDeactivePosts, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetSubscribedDeactivePostsRow{}
	for rows.Next() {
		var i GetSubscribedDeactivePostsRow
		if err := rows.Scan(
			&i.ID,
			&i.MarketType,
			&i.Currency,
			&i.StartPrice,
			&i.Duration,
			&i.TakeProfit,
			&i.Stop,
			&i.Target1,
			&i.Target2,
			&i.Target3,
			&i.Direction,
			&i.Leverage,
			&i.Finished,
			&i.Status,
			&i.Pnl,
			&i.Roi,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.MoniestID,
			&i.Bio,
			&i.Description,
			&i.Pnl7days,
			&i.Roi7days,
			&i.WinRate7days,
			&i.Pnl30days,
			&i.Roi30days,
			&i.WinRate30days,
			&i.PnlTotal,
			&i.RoiTotal,
			&i.WinRateTotal,
			&i.UserID,
			&i.Fullname,
			&i.Username,
			&i.EmailVerified,
			&i.Location,
			&i.PostDescription,
			&i.ProfilePhotoLink,
			&i.ProfilePhotoThumbnailLink,
			&i.BackgroundPhotoLink,
			&i.BackgroundPhotoThumbnailLink,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSubscribedDeactivePostsWithOwn = `-- name: GetSubscribedDeactivePostsWithOwn :many
(
    SELECT "pc"."id",
        "pc"."market_type",
        "pc"."currency",
        "pc"."start_price",
        "pc"."duration",
        "pc"."take_profit",
        "pc"."stop",
        "pc"."target1",
        "pc"."target2",
        "pc"."target3",
        "pc"."direction",
        "pc"."leverage",
        "pc"."finished",
        "pc"."status",
        "pc"."pnl",
        "pc"."roi",
        "pc"."created_at",
        "pc"."updated_at",
        "m"."id" as "moniest_id",
        "m"."bio",
        "m"."description",
        "mpcs"."pnl_7days",
        "mpcs"."roi_7days",
        "mpcs"."win_rate_7days",
        "mpcs"."pnl_30days",
        "mpcs"."roi_30days",
        "mpcs"."win_rate_30days",
        "mpcs"."pnl_total",
        "mpcs"."roi_total",
        "mpcs"."win_rate_total",
        "u"."id" as "user_id",
        "u"."fullname",
        "u"."username",
        "u"."email_verified",
        "u"."location",
        "pcd"."description" as "post_description",
        COALESCE (
            (
                SELECT "image"."link"
                FROM "image"
                WHERE "image"."user_id" = "u"."id"
                    AND "image"."type" = 'profile_photo'
            ),
            ''
        ) AS "profile_photo_link",
        COALESCE (
            (
                SELECT "image"."thumbnail_link"
                FROM "image"
                WHERE "image"."user_id" = "u"."id"
                    AND "image"."type" = 'profile_photo'
            ),
            ''
        ) AS "profile_photo_thumbnail_link",
        COALESCE (
            (
                SELECT "image"."link"
                FROM "image"
                WHERE "image"."user_id" = "u"."id"
                    AND "image"."type" = 'background_photo'
            ),
            ''
        ) AS "background_photo_link",
        COALESCE (
            (
                SELECT "image"."thumbnail_link"
                FROM "image"
                WHERE "image"."user_id" = "u"."id"
                    AND "image"."type" = 'background_photo'
            ),
            ''
        ) AS "background_photo_thumbnail_link"
    FROM "post_crypto" AS pc
        INNER JOIN "user_subscription" AS us ON "pc"."moniest_id" = "us"."moniest_id"
        AND "us"."user_id" = $1
        AND (
            "pc"."duration" < now()
            OR "pc"."finished" = TRUE
        )
        INNER JOIN "moniest" as m ON "pc"."moniest_id" = "m"."id"
        INNER JOIN "user" as u ON "m"."user_id" = "u"."id"
        INNER JOIN "moniest_post_crypto_statistics" AS mpcs ON "mpcs"."moniest_id" = "m"."id"
        LEFT JOIN "post_crypto_description" as pcd ON "pcd"."post_id" = "pc"."id"
)
UNION ALL
(
    SELECT "pc"."id",
        "pc"."market_type",
        "pc"."currency",
        "pc"."start_price",
        "pc"."duration",
        "pc"."take_profit",
        "pc"."stop",
        "pc"."target1",
        "pc"."target2",
        "pc"."target3",
        "pc"."direction",
        "pc"."leverage",
        "pc"."finished",
        "pc"."status",
        "pc"."pnl",
        "pc"."roi",
        "pc"."created_at",
        "pc"."updated_at",
        "m"."id" as "moniest_id",
        "m"."bio",
        "m"."description",
        "mpcs"."pnl_7days",
        "mpcs"."roi_7days",
        "mpcs"."win_rate_7days",
        "mpcs"."pnl_30days",
        "mpcs"."roi_30days",
        "mpcs"."win_rate_30days",
        "mpcs"."pnl_total",
        "mpcs"."roi_total",
        "mpcs"."win_rate_total",
        "u"."id" as "user_id",
        "u"."fullname",
        "u"."username",
        "u"."email_verified",
        "u"."location",
        "pcd"."description" as "post_description",
        COALESCE (
            (
                SELECT "image"."link"
                FROM "image"
                WHERE "image"."user_id" = "u"."id"
                    AND "image"."type" = 'profile_photo'
            ),
            ''
        ) AS "profile_photo_link",
        COALESCE (
            (
                SELECT "image"."thumbnail_link"
                FROM "image"
                WHERE "image"."user_id" = "u"."id"
                    AND "image"."type" = 'profile_photo'
            ),
            ''
        ) AS "profile_photo_thumbnail_link",
        COALESCE (
            (
                SELECT "image"."link"
                FROM "image"
                WHERE "image"."user_id" = "u"."id"
                    AND "image"."type" = 'background_photo'
            ),
            ''
        ) AS "background_photo_link",
        COALESCE (
            (
                SELECT "image"."thumbnail_link"
                FROM "image"
                WHERE "image"."user_id" = "u"."id"
                    AND "image"."type" = 'background_photo'
            ),
            ''
        ) AS "background_photo_thumbnail_link"
    FROM "post_crypto" AS pc
        INNER JOIN "moniest" as m ON "pc"."moniest_id" = "m"."id"
        AND "m"."user_id" = $1
        AND (
            "pc"."duration" < now()
            OR "pc"."finished" = TRUE
        )
        INNER JOIN "user" as u ON "m"."user_id" = "u"."id"
        INNER JOIN "moniest_post_crypto_statistics" AS mpcs ON "mpcs"."moniest_id" = "m"."id"
        LEFT JOIN "post_crypto_description" as pcd ON "pcd"."post_id" = "pc"."id"
)
ORDER BY "created_at" DESC
LIMIT $2 OFFSET $3
`

type GetSubscribedDeactivePostsWithOwnParams struct {
	UserID string `json:"user_id"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

type GetSubscribedDeactivePostsWithOwnRow struct {
	ID                           string               `json:"id"`
	MarketType                   PostCryptoMarketType `json:"market_type"`
	Currency                     string               `json:"currency"`
	StartPrice                   float64              `json:"start_price"`
	Duration                     time.Time            `json:"duration"`
	TakeProfit                   float64              `json:"take_profit"`
	Stop                         float64              `json:"stop"`
	Target1                      sql.NullFloat64      `json:"target1"`
	Target2                      sql.NullFloat64      `json:"target2"`
	Target3                      sql.NullFloat64      `json:"target3"`
	Direction                    Direction            `json:"direction"`
	Leverage                     int32                `json:"leverage"`
	Finished                     bool                 `json:"finished"`
	Status                       PostCryptoStatus     `json:"status"`
	Pnl                          float64              `json:"pnl"`
	Roi                          float64              `json:"roi"`
	CreatedAt                    time.Time            `json:"created_at"`
	UpdatedAt                    time.Time            `json:"updated_at"`
	MoniestID                    string               `json:"moniest_id"`
	Bio                          sql.NullString       `json:"bio"`
	Description                  sql.NullString       `json:"description"`
	Pnl7days                     sql.NullFloat64      `json:"pnl_7days"`
	Roi7days                     sql.NullFloat64      `json:"roi_7days"`
	WinRate7days                 sql.NullFloat64      `json:"win_rate_7days"`
	Pnl30days                    sql.NullFloat64      `json:"pnl_30days"`
	Roi30days                    sql.NullFloat64      `json:"roi_30days"`
	WinRate30days                sql.NullFloat64      `json:"win_rate_30days"`
	PnlTotal                     sql.NullFloat64      `json:"pnl_total"`
	RoiTotal                     sql.NullFloat64      `json:"roi_total"`
	WinRateTotal                 sql.NullFloat64      `json:"win_rate_total"`
	UserID                       string               `json:"user_id"`
	Fullname                     string               `json:"fullname"`
	Username                     string               `json:"username"`
	EmailVerified                bool                 `json:"email_verified"`
	Location                     sql.NullString       `json:"location"`
	PostDescription              sql.NullString       `json:"post_description"`
	ProfilePhotoLink             interface{}          `json:"profile_photo_link"`
	ProfilePhotoThumbnailLink    interface{}          `json:"profile_photo_thumbnail_link"`
	BackgroundPhotoLink          interface{}          `json:"background_photo_link"`
	BackgroundPhotoThumbnailLink interface{}          `json:"background_photo_thumbnail_link"`
}

func (q *Queries) GetSubscribedDeactivePostsWithOwn(ctx context.Context, arg GetSubscribedDeactivePostsWithOwnParams) ([]GetSubscribedDeactivePostsWithOwnRow, error) {
	rows, err := q.db.QueryContext(ctx, getSubscribedDeactivePostsWithOwn, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetSubscribedDeactivePostsWithOwnRow{}
	for rows.Next() {
		var i GetSubscribedDeactivePostsWithOwnRow
		if err := rows.Scan(
			&i.ID,
			&i.MarketType,
			&i.Currency,
			&i.StartPrice,
			&i.Duration,
			&i.TakeProfit,
			&i.Stop,
			&i.Target1,
			&i.Target2,
			&i.Target3,
			&i.Direction,
			&i.Leverage,
			&i.Finished,
			&i.Status,
			&i.Pnl,
			&i.Roi,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.MoniestID,
			&i.Bio,
			&i.Description,
			&i.Pnl7days,
			&i.Roi7days,
			&i.WinRate7days,
			&i.Pnl30days,
			&i.Roi30days,
			&i.WinRate30days,
			&i.PnlTotal,
			&i.RoiTotal,
			&i.WinRateTotal,
			&i.UserID,
			&i.Fullname,
			&i.Username,
			&i.EmailVerified,
			&i.Location,
			&i.PostDescription,
			&i.ProfilePhotoLink,
			&i.ProfilePhotoThumbnailLink,
			&i.BackgroundPhotoLink,
			&i.BackgroundPhotoThumbnailLink,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchMoniests = `-- name: SearchMoniests :many
SELECT "u"."id",
    "m"."id" as "moniest_id",
    "u"."fullname",
    "u"."username",
    "u"."email_verified",
    "u"."location",
    "u"."created_at",
    "u"."updated_at",
    "m"."bio",
    "m"."description",
    "mpcs"."pnl_7days",
    "mpcs"."roi_7days",
    "mpcs"."win_rate_7days",
    "mpcs"."pnl_30days",
    "mpcs"."roi_30days",
    "mpcs"."win_rate_30days",
    "mpcs"."pnl_total",
    "mpcs"."roi_total",
    "mpcs"."win_rate_total",
    "msi"."fee",
    "msi"."message",
    "msi"."updated_at" as "moniest_subscription_info_updated_at",
    COALESCE (
        (
            SELECT "image"."link"
            FROM "image"
            WHERE "image"."user_id" = "u"."id"
                AND "image"."type" = 'profile_photo'
        ),
        ''
    ) AS "profile_photo_link",
    COALESCE (
        (
            SELECT "image"."thumbnail_link"
            FROM "image"
            WHERE "image"."user_id" = "u"."id"
                AND "image"."type" = 'profile_photo'
        ),
        ''
    ) AS "profile_photo_thumbnail_link",
    COALESCE (
        (
            SELECT "image"."link"
            FROM "image"
            WHERE "image"."user_id" = "u"."id"
                AND "image"."type" = 'background_photo'
        ),
        ''
    ) AS "background_photo_link",
    COALESCE (
        (
            SELECT "image"."thumbnail_link"
            FROM "image"
            WHERE "image"."user_id" = "u"."id"
                AND "image"."type" = 'background_photo'
        ),
        ''
    ) AS "background_photo_thumbnail_link"
FROM "user" as "u"
    INNER JOIN "moniest" as "m" ON "m"."user_id" = "u"."id"
    INNER JOIN "moniest_subscription_info" as "msi" ON "msi"."moniest_id" = "m"."id"
    INNER JOIN "moniest_post_crypto_statistics" as mpcs ON "mpcs"."moniest_id" = "m"."id"
WHERE ("u"."fullname" ILIKE $1)
    OR ("u"."username" ILIKE $1)
    AND "u"."deleted" = FALSE
LIMIT $2 OFFSET $3
`

type SearchMoniestsParams struct {
	Fullname string `json:"fullname"`
	Limit    int32  `json:"limit"`
	Offset   int32  `json:"offset"`
}

type SearchMoniestsRow struct {
	ID                               string          `json:"id"`
	MoniestID                        string          `json:"moniest_id"`
	Fullname                         string          `json:"fullname"`
	Username                         string          `json:"username"`
	EmailVerified                    bool            `json:"email_verified"`
	Location                         sql.NullString  `json:"location"`
	CreatedAt                        time.Time       `json:"created_at"`
	UpdatedAt                        time.Time       `json:"updated_at"`
	Bio                              sql.NullString  `json:"bio"`
	Description                      sql.NullString  `json:"description"`
	Pnl7days                         sql.NullFloat64 `json:"pnl_7days"`
	Roi7days                         sql.NullFloat64 `json:"roi_7days"`
	WinRate7days                     sql.NullFloat64 `json:"win_rate_7days"`
	Pnl30days                        sql.NullFloat64 `json:"pnl_30days"`
	Roi30days                        sql.NullFloat64 `json:"roi_30days"`
	WinRate30days                    sql.NullFloat64 `json:"win_rate_30days"`
	PnlTotal                         sql.NullFloat64 `json:"pnl_total"`
	RoiTotal                         sql.NullFloat64 `json:"roi_total"`
	WinRateTotal                     sql.NullFloat64 `json:"win_rate_total"`
	Fee                              float64         `json:"fee"`
	Message                          sql.NullString  `json:"message"`
	MoniestSubscriptionInfoUpdatedAt time.Time       `json:"moniest_subscription_info_updated_at"`
	ProfilePhotoLink                 interface{}     `json:"profile_photo_link"`
	ProfilePhotoThumbnailLink        interface{}     `json:"profile_photo_thumbnail_link"`
	BackgroundPhotoLink              interface{}     `json:"background_photo_link"`
	BackgroundPhotoThumbnailLink     interface{}     `json:"background_photo_thumbnail_link"`
}

func (q *Queries) SearchMoniests(ctx context.Context, arg SearchMoniestsParams) ([]SearchMoniestsRow, error) {
	rows, err := q.db.QueryContext(ctx, searchMoniests, arg.Fullname, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SearchMoniestsRow{}
	for rows.Next() {
		var i SearchMoniestsRow
		if err := rows.Scan(
			&i.ID,
			&i.MoniestID,
			&i.Fullname,
			&i.Username,
			&i.EmailVerified,
			&i.Location,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Bio,
			&i.Description,
			&i.Pnl7days,
			&i.Roi7days,
			&i.WinRate7days,
			&i.Pnl30days,
			&i.Roi30days,
			&i.WinRate30days,
			&i.PnlTotal,
			&i.RoiTotal,
			&i.WinRateTotal,
			&i.Fee,
			&i.Message,
			&i.MoniestSubscriptionInfoUpdatedAt,
			&i.ProfilePhotoLink,
			&i.ProfilePhotoThumbnailLink,
			&i.BackgroundPhotoLink,
			&i.BackgroundPhotoThumbnailLink,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
