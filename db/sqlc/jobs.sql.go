// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: jobs.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createUserSubscriptionHistory = `-- name: CreateUserSubscriptionHistory :one
INSERT INTO "user_subscription_history" (
        id,
        user_id,
        moniest_id,
        transaction_id,
        subscription_start_date,
        subscription_end_date,
        created_at
    )
VALUES (
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        now()
    )
RETURNING id, user_id, moniest_id, transaction_id, subscription_start_date, subscription_end_date, created_at
`

type CreateUserSubscriptionHistoryParams struct {
	ID                    string         `json:"id"`
	UserID                string         `json:"user_id"`
	MoniestID             string         `json:"moniest_id"`
	TransactionID         sql.NullString `json:"transaction_id"`
	SubscriptionStartDate time.Time      `json:"subscription_start_date"`
	SubscriptionEndDate   time.Time      `json:"subscription_end_date"`
}

func (q *Queries) CreateUserSubscriptionHistory(ctx context.Context, arg CreateUserSubscriptionHistoryParams) (UserSubscriptionHistory, error) {
	row := q.db.QueryRowContext(ctx, createUserSubscriptionHistory,
		arg.ID,
		arg.UserID,
		arg.MoniestID,
		arg.TransactionID,
		arg.SubscriptionStartDate,
		arg.SubscriptionEndDate,
	)
	var i UserSubscriptionHistory
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.MoniestID,
		&i.TransactionID,
		&i.SubscriptionStartDate,
		&i.SubscriptionEndDate,
		&i.CreatedAt,
	)
	return i, err
}

const getAllActivePosts = `-- name: GetAllActivePosts :many
SELECT "pc"."id",
    "pc"."moniest_id",
    "pc"."currency",
    "pc"."start_price",
    "pc"."duration",
    "pc"."target1",
    "pc"."target2",
    "pc"."target3",
    "pc"."stop",
    "pc"."direction",
    "pc"."score",
    "pc"."finished",
    "pc"."status",
    "pc"."last_target_hit",
    "pc"."last_job_timestamp",
    "pc"."created_at",
    "pc"."updated_at"
FROM "post_crypto" AS pc
WHERE "pc"."finished" = FALSE
ORDER BY "pc"."created_at" ASC
`

type GetAllActivePostsRow struct {
	ID               string           `json:"id"`
	MoniestID        string           `json:"moniest_id"`
	Currency         string           `json:"currency"`
	StartPrice       float64          `json:"start_price"`
	Duration         time.Time        `json:"duration"`
	Target1          float64          `json:"target1"`
	Target2          float64          `json:"target2"`
	Target3          float64          `json:"target3"`
	Stop             float64          `json:"stop"`
	Direction        EntryPosition    `json:"direction"`
	Score            float64          `json:"score"`
	Finished         bool             `json:"finished"`
	Status           PostCryptoStatus `json:"status"`
	LastTargetHit    float64          `json:"last_target_hit"`
	LastJobTimestamp int64            `json:"last_job_timestamp"`
	CreatedAt        time.Time        `json:"created_at"`
	UpdatedAt        time.Time        `json:"updated_at"`
}

func (q *Queries) GetAllActivePosts(ctx context.Context) ([]GetAllActivePostsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllActivePosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllActivePostsRow{}
	for rows.Next() {
		var i GetAllActivePostsRow
		if err := rows.Scan(
			&i.ID,
			&i.MoniestID,
			&i.Currency,
			&i.StartPrice,
			&i.Duration,
			&i.Target1,
			&i.Target2,
			&i.Target3,
			&i.Stop,
			&i.Direction,
			&i.Score,
			&i.Finished,
			&i.Status,
			&i.LastTargetHit,
			&i.LastJobTimestamp,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllPendingPayouts = `-- name: GetAllPendingPayouts :many
SELECT "bph"."id",
    "bph"."transaction_id",
    "bph"."user_id",
    "bph"."moniest_id",
    "bph"."payer_id",
    "bph"."total_amount",
    "bph"."amount",
    "bph"."date_type",
    "bph"."date_value",
    "bph"."date_index",
    "bph"."payout_date",
    "bph"."payout_year",
    "bph"."payout_month",
    "bph"."payout_day",
    "bph"."status",
    "bph"."operation_fee_percentage",
    "bph"."created_at",
    "bph"."updated_at",
    "mpi"."type" as "moniest_payout_type",
    "mpi"."value" as "moniest_payout_value"
FROM "binance_payout_history" as "bph"
    INNER JOIN "moniest_payout_info" as "mpi" ON "mpi"."moniest_id" = "bph"."moniest_id"
WHERE "status" = 'pending'
    AND payout_date <= now()
`

type GetAllPendingPayoutsRow struct {
	ID                     string                 `json:"id"`
	TransactionID          string                 `json:"transaction_id"`
	UserID                 string                 `json:"user_id"`
	MoniestID              string                 `json:"moniest_id"`
	PayerID                string                 `json:"payer_id"`
	TotalAmount            float64                `json:"total_amount"`
	Amount                 float64                `json:"amount"`
	DateType               BinancePaymentDateType `json:"date_type"`
	DateValue              int32                  `json:"date_value"`
	DateIndex              int32                  `json:"date_index"`
	PayoutDate             time.Time              `json:"payout_date"`
	PayoutYear             int32                  `json:"payout_year"`
	PayoutMonth            int32                  `json:"payout_month"`
	PayoutDay              int32                  `json:"payout_day"`
	Status                 BinancePayoutStatus    `json:"status"`
	OperationFeePercentage sql.NullFloat64        `json:"operation_fee_percentage"`
	CreatedAt              time.Time              `json:"created_at"`
	UpdatedAt              time.Time              `json:"updated_at"`
	MoniestPayoutType      PayoutType             `json:"moniest_payout_type"`
	MoniestPayoutValue     string                 `json:"moniest_payout_value"`
}

func (q *Queries) GetAllPendingPayouts(ctx context.Context) ([]GetAllPendingPayoutsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllPendingPayouts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllPendingPayoutsRow{}
	for rows.Next() {
		var i GetAllPendingPayoutsRow
		if err := rows.Scan(
			&i.ID,
			&i.TransactionID,
			&i.UserID,
			&i.MoniestID,
			&i.PayerID,
			&i.TotalAmount,
			&i.Amount,
			&i.DateType,
			&i.DateValue,
			&i.DateIndex,
			&i.PayoutDate,
			&i.PayoutYear,
			&i.PayoutMonth,
			&i.PayoutDay,
			&i.Status,
			&i.OperationFeePercentage,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.MoniestPayoutType,
			&i.MoniestPayoutValue,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getExpiredActiveSubscriptions = `-- name: GetExpiredActiveSubscriptions :many
SELECT id, user_id, moniest_id, active, latest_transaction_id, subscription_start_date, subscription_end_date, created_at, updated_at
FROM "user_subscription"
WHERE active = TRUE
    AND subscription_end_date <= now()
`

func (q *Queries) GetExpiredActiveSubscriptions(ctx context.Context) ([]UserSubscription, error) {
	rows, err := q.db.QueryContext(ctx, getExpiredActiveSubscriptions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserSubscription{}
	for rows.Next() {
		var i UserSubscription
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.MoniestID,
			&i.Active,
			&i.LatestTransactionID,
			&i.SubscriptionStartDate,
			&i.SubscriptionEndDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getExpiredPendingBinanceTransactions = `-- name: GetExpiredPendingBinanceTransactions :many
SELECT id, qrcode_link, checkout_link, deep_link, universal_link, status, user_id, moniest_id, date_type, date_value, moniest_fee, amount, webhook_url, payer_id, created_at, updated_at
FROM binance_payment_transaction
WHERE status = 'pending'
    AND "created_at" + INTERVAL '5 minutes' <= NOW()
`

func (q *Queries) GetExpiredPendingBinanceTransactions(ctx context.Context) ([]BinancePaymentTransaction, error) {
	rows, err := q.db.QueryContext(ctx, getExpiredPendingBinanceTransactions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []BinancePaymentTransaction{}
	for rows.Next() {
		var i BinancePaymentTransaction
		if err := rows.Scan(
			&i.ID,
			&i.QrcodeLink,
			&i.CheckoutLink,
			&i.DeepLink,
			&i.UniversalLink,
			&i.Status,
			&i.UserID,
			&i.MoniestID,
			&i.DateType,
			&i.DateValue,
			&i.MoniestFee,
			&i.Amount,
			&i.WebhookUrl,
			&i.PayerID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateExpiredActiveSubscription = `-- name: UpdateExpiredActiveSubscription :exec
UPDATE "user_subscription"
SET active = FALSE,
    updated_at = now()
WHERE "id" = $1
`

func (q *Queries) UpdateExpiredActiveSubscription(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, updateExpiredActiveSubscription, id)
	return err
}

const updateExpiredPendingBinanceTransaction = `-- name: UpdateExpiredPendingBinanceTransaction :exec
UPDATE "binance_payment_transaction"
SET status = 'fail',
    updated_at = now()
WHERE "id" = $1
`

func (q *Queries) UpdateExpiredPendingBinanceTransaction(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, updateExpiredPendingBinanceTransaction, id)
	return err
}

const updateFinishedPostStatus = `-- name: UpdateFinishedPostStatus :exec
UPDATE "post_crypto"
SET "status" = $1,
    "score" = $2,
    "finished" = TRUE,
    updated_at = now()
WHERE "id" = $3
`

type UpdateFinishedPostStatusParams struct {
	Status PostCryptoStatus `json:"status"`
	Score  float64          `json:"score"`
	ID     string           `json:"id"`
}

func (q *Queries) UpdateFinishedPostStatus(ctx context.Context, arg UpdateFinishedPostStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateFinishedPostStatus, arg.Status, arg.Score, arg.ID)
	return err
}

const updateMoniestScore = `-- name: UpdateMoniestScore :exec
UPDATE "moniest"
SET "score" = GREATEST("score" + $1, 0),
    updated_at = now()
WHERE "id" = $2
`

type UpdateMoniestScoreParams struct {
	Score float64 `json:"score"`
	ID    string  `json:"id"`
}

func (q *Queries) UpdateMoniestScore(ctx context.Context, arg UpdateMoniestScoreParams) error {
	_, err := q.db.ExecContext(ctx, updateMoniestScore, arg.Score, arg.ID)
	return err
}

const updatePayoutHistory = `-- name: UpdatePayoutHistory :exec
UPDATE "binance_payout_history"
SET "status" = $2,
    operation_fee_percentage = $3,
    "payout_done_at" = $4,
    "failure_message" = $5,
    payout_request_id = $6,
    updated_at = now()
WHERE "id" = $1
`

type UpdatePayoutHistoryParams struct {
	ID                     string              `json:"id"`
	Status                 BinancePayoutStatus `json:"status"`
	OperationFeePercentage sql.NullFloat64     `json:"operation_fee_percentage"`
	PayoutDoneAt           sql.NullTime        `json:"payout_done_at"`
	FailureMessage         sql.NullString      `json:"failure_message"`
	PayoutRequestID        sql.NullString      `json:"payout_request_id"`
}

func (q *Queries) UpdatePayoutHistory(ctx context.Context, arg UpdatePayoutHistoryParams) error {
	_, err := q.db.ExecContext(ctx, updatePayoutHistory,
		arg.ID,
		arg.Status,
		arg.OperationFeePercentage,
		arg.PayoutDoneAt,
		arg.FailureMessage,
		arg.PayoutRequestID,
	)
	return err
}

const updateUnfinishedPostStatus = `-- name: UpdateUnfinishedPostStatus :exec
UPDATE "post_crypto"
SET "last_target_hit" = $1,
    "last_job_timestamp" = $2,
    updated_at = now()
WHERE "id" = $3
`

type UpdateUnfinishedPostStatusParams struct {
	LastTargetHit    float64 `json:"last_target_hit"`
	LastJobTimestamp int64   `json:"last_job_timestamp"`
	ID               string  `json:"id"`
}

func (q *Queries) UpdateUnfinishedPostStatus(ctx context.Context, arg UpdateUnfinishedPostStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateUnfinishedPostStatus, arg.LastTargetHit, arg.LastJobTimestamp, arg.ID)
	return err
}
