// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: login.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const loginUserByEmail = `-- name: LoginUserByEmail :one
SELECT "user"."id",
    "moniest"."id" as "moniest_id",
    "user"."name",
    "user"."surname",
    "user"."username",
    "user"."email",
    "user"."email_verified",
    "user"."password",
    "user"."location",
    "user"."created_at",
    "user"."updated_at",
    "moniest"."bio",
    "moniest"."description",
    "moniest"."score",
    "subscription_info"."id" as "subscription_info_id",
    "subscription_info"."fee",
    "subscription_info"."message",
    "subscription_info"."updated_at" as "subscription_info_updated_at",
    COALESCE (
        (
            SELECT "image"."link"
            FROM "image"
                INNER JOIN "user" ON "user"."id" = "image"."user_id"
            WHERE "user"."email" = $1
                AND "image"."type" = 'profile_photo'
        ),
        ''
    ) AS "profile_photo_link",
    COALESCE (
        (
            SELECT "image"."thumbnail_link"
            FROM "image"
                INNER JOIN "user" ON "user"."id" = "image"."user_id"
            WHERE "user"."email" = $1
                AND "image"."type" = 'profile_photo'
        ),
        ''
    ) AS "profile_photo_thumbnail_link",
    COALESCE (
        (
            SELECT "image"."link"
            FROM "image"
                INNER JOIN "user" ON "user"."id" = "image"."user_id"
            WHERE "user"."email" = $1
                AND "image"."type" = 'background_photo'
        ),
        ''
    ) AS "background_photo_link",
    COALESCE (
        (
            SELECT "image"."thumbnail_link"
            FROM "image"
                INNER JOIN "user" ON "user"."id" = "image"."user_id"
            WHERE "user"."email" = $1
                AND "image"."type" = 'background_photo'
        ),
        ''
    ) AS "background_photo_thumbnail_link"
FROM "user"
    LEFT JOIN "moniest" ON "moniest"."user_id" = "user"."id"
    LEFT JOIN "subscription_info" ON "subscription_info"."moniest_id" = "moniest"."id"
WHERE "user"."email" = $1
    AND "user"."deleted" = false
`

type LoginUserByEmailRow struct {
	ID                           string          `json:"id"`
	MoniestID                    sql.NullString  `json:"moniest_id"`
	Name                         string          `json:"name"`
	Surname                      string          `json:"surname"`
	Username                     string          `json:"username"`
	Email                        string          `json:"email"`
	EmailVerified                bool            `json:"email_verified"`
	Password                     string          `json:"password"`
	Location                     sql.NullString  `json:"location"`
	CreatedAt                    time.Time       `json:"created_at"`
	UpdatedAt                    time.Time       `json:"updated_at"`
	Bio                          sql.NullString  `json:"bio"`
	Description                  sql.NullString  `json:"description"`
	Score                        sql.NullFloat64 `json:"score"`
	SubscriptionInfoID           sql.NullString  `json:"subscription_info_id"`
	Fee                          sql.NullFloat64 `json:"fee"`
	Message                      sql.NullString  `json:"message"`
	SubscriptionInfoUpdatedAt    sql.NullTime    `json:"subscription_info_updated_at"`
	ProfilePhotoLink             interface{}     `json:"profile_photo_link"`
	ProfilePhotoThumbnailLink    interface{}     `json:"profile_photo_thumbnail_link"`
	BackgroundPhotoLink          interface{}     `json:"background_photo_link"`
	BackgroundPhotoThumbnailLink interface{}     `json:"background_photo_thumbnail_link"`
}

func (q *Queries) LoginUserByEmail(ctx context.Context, email string) (LoginUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, loginUserByEmail, email)
	var i LoginUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.MoniestID,
		&i.Name,
		&i.Surname,
		&i.Username,
		&i.Email,
		&i.EmailVerified,
		&i.Password,
		&i.Location,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Bio,
		&i.Description,
		&i.Score,
		&i.SubscriptionInfoID,
		&i.Fee,
		&i.Message,
		&i.SubscriptionInfoUpdatedAt,
		&i.ProfilePhotoLink,
		&i.ProfilePhotoThumbnailLink,
		&i.BackgroundPhotoLink,
		&i.BackgroundPhotoThumbnailLink,
	)
	return i, err
}

const loginUserByUsername = `-- name: LoginUserByUsername :one
SELECT "user"."id",
    "moniest"."id" as "moniest_id",
    "user"."name",
    "user"."surname",
    "user"."username",
    "user"."email",
    "user"."email_verified",
    "user"."password",
    "user"."location",
    "user"."created_at",
    "user"."updated_at",
    "moniest"."bio",
    "moniest"."description",
    "moniest"."score",
    "subscription_info"."id" as "subscription_info_id",
    "subscription_info"."fee",
    "subscription_info"."message",
    "subscription_info"."updated_at" as "subscription_info_updated_at",
    COALESCE (
        (
            SELECT "image"."link"
            FROM "image"
                INNER JOIN "user" ON "user"."id" = "image"."user_id"
            WHERE "user"."username" = $1
                AND "image"."type" = 'profile_photo'
        ),
        ''
    ) AS "profile_photo_link",
    COALESCE (
        (
            SELECT "image"."thumbnail_link"
            FROM "image"
                INNER JOIN "user" ON "user"."id" = "image"."user_id"
            WHERE "user"."username" = $1
                AND "image"."type" = 'profile_photo'
        ),
        ''
    ) AS "profile_photo_thumbnail_link",
    COALESCE (
        (
            SELECT "image"."link"
            FROM "image"
                INNER JOIN "user" ON "user"."id" = "image"."user_id"
            WHERE "user"."username" = $1
                AND "image"."type" = 'background_photo'
        ),
        ''
    ) AS "background_photo_link",
    COALESCE (
        (
            SELECT "image"."thumbnail_link"
            FROM "image"
                INNER JOIN "user" ON "user"."id" = "image"."user_id"
            WHERE "user"."username" = $1
                AND "image"."type" = 'background_photo'
        ),
        ''
    ) AS "background_photo_thumbnail_link"
FROM "user"
    LEFT JOIN "moniest" ON "moniest"."user_id" = "user"."id"
    LEFT JOIN "subscription_info" ON "subscription_info"."moniest_id" = "moniest"."id"
WHERE "user"."username" = $1
    AND "user"."deleted" = false
`

type LoginUserByUsernameRow struct {
	ID                           string          `json:"id"`
	MoniestID                    sql.NullString  `json:"moniest_id"`
	Name                         string          `json:"name"`
	Surname                      string          `json:"surname"`
	Username                     string          `json:"username"`
	Email                        string          `json:"email"`
	EmailVerified                bool            `json:"email_verified"`
	Password                     string          `json:"password"`
	Location                     sql.NullString  `json:"location"`
	CreatedAt                    time.Time       `json:"created_at"`
	UpdatedAt                    time.Time       `json:"updated_at"`
	Bio                          sql.NullString  `json:"bio"`
	Description                  sql.NullString  `json:"description"`
	Score                        sql.NullFloat64 `json:"score"`
	SubscriptionInfoID           sql.NullString  `json:"subscription_info_id"`
	Fee                          sql.NullFloat64 `json:"fee"`
	Message                      sql.NullString  `json:"message"`
	SubscriptionInfoUpdatedAt    sql.NullTime    `json:"subscription_info_updated_at"`
	ProfilePhotoLink             interface{}     `json:"profile_photo_link"`
	ProfilePhotoThumbnailLink    interface{}     `json:"profile_photo_thumbnail_link"`
	BackgroundPhotoLink          interface{}     `json:"background_photo_link"`
	BackgroundPhotoThumbnailLink interface{}     `json:"background_photo_thumbnail_link"`
}

func (q *Queries) LoginUserByUsername(ctx context.Context, username string) (LoginUserByUsernameRow, error) {
	row := q.db.QueryRowContext(ctx, loginUserByUsername, username)
	var i LoginUserByUsernameRow
	err := row.Scan(
		&i.ID,
		&i.MoniestID,
		&i.Name,
		&i.Surname,
		&i.Username,
		&i.Email,
		&i.EmailVerified,
		&i.Password,
		&i.Location,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Bio,
		&i.Description,
		&i.Score,
		&i.SubscriptionInfoID,
		&i.Fee,
		&i.Message,
		&i.SubscriptionInfoUpdatedAt,
		&i.ProfilePhotoLink,
		&i.ProfilePhotoThumbnailLink,
		&i.BackgroundPhotoLink,
		&i.BackgroundPhotoThumbnailLink,
	)
	return i, err
}

const updateLoginStats = `-- name: UpdateLoginStats :one
UPDATE "user"
SET login_count = login_count + 1,
    last_login = now(),
    updated_at = now()
WHERE id = $1
RETURNING id, name, surname, username, email, email_verified, password, location, login_count, deleted, created_at, updated_at, last_login
`

func (q *Queries) UpdateLoginStats(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, updateLoginStats, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Surname,
		&i.Username,
		&i.Email,
		&i.EmailVerified,
		&i.Password,
		&i.Location,
		&i.LoginCount,
		&i.Deleted,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLogin,
	)
	return i, err
}
