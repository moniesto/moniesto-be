// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type EntryPosition string

const (
	EntryPositionLong  EntryPosition = "long"
	EntryPositionShort EntryPosition = "short"
)

func (e *EntryPosition) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = EntryPosition(s)
	case string:
		*e = EntryPosition(s)
	default:
		return fmt.Errorf("unsupported scan type for EntryPosition: %T", src)
	}
	return nil
}

type NullEntryPosition struct {
	EntryPosition EntryPosition
	Valid         bool // Valid is true if String is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullEntryPosition) Scan(value interface{}) error {
	if value == nil {
		ns.EntryPosition, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.EntryPosition.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullEntryPosition) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.EntryPosition, nil
}

type ImageType string

const (
	ImageTypeProfilePhoto    ImageType = "profile_photo"
	ImageTypeBackgroundPhoto ImageType = "background_photo"
)

func (e *ImageType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ImageType(s)
	case string:
		*e = ImageType(s)
	default:
		return fmt.Errorf("unsupported scan type for ImageType: %T", src)
	}
	return nil
}

type NullImageType struct {
	ImageType ImageType
	Valid     bool // Valid is true if String is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullImageType) Scan(value interface{}) error {
	if value == nil {
		ns.ImageType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ImageType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullImageType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.ImageType, nil
}

// Stores single card data
type Card struct {
	ID        string         `json:"id"`
	Token     sql.NullString `json:"token"`
	Deleted   bool           `json:"deleted"`
	CreatedAt time.Time      `json:"created_at"`
	UpdatedAt time.Time      `json:"updated_at"`
}

// Stores email verification token for verifying account
type EmailVerification struct {
	ID          string    `json:"id"`
	UserID      string    `json:"user_id"`
	Token       string    `json:"token"`
	TokenExpiry time.Time `json:"token_expiry"`
	Deleted     bool      `json:"deleted"`
	CreatedAt   time.Time `json:"created_at"`
}

// Stores image data
type Image struct {
	ID            string    `json:"id"`
	UserID        string    `json:"user_id"`
	Link          string    `json:"link"`
	ThumbnailLink string    `json:"thumbnail_link"`
	Type          ImageType `json:"type"`
	CreatedAt     time.Time `json:"created_at"`
	UpdatedAt     time.Time `json:"updated_at"`
}

// Stores moniest data
type Moniest struct {
	ID          string         `json:"id"`
	UserID      string         `json:"user_id"`
	Bio         sql.NullString `json:"bio"`
	Description sql.NullString `json:"description"`
	Score       float64        `json:"score"`
	Deleted     bool           `json:"deleted"`
	CreatedAt   time.Time      `json:"created_at"`
	UpdatedAt   time.Time      `json:"updated_at"`
}

// Stores relation between moniest and card
type MoniestCard struct {
	MoniestID string `json:"moniest_id"`
	CardID    string `json:"card_id"`
}

// Stores reset token for forget password operations
type PasswordResetToken struct {
	ID          string    `json:"id"`
	UserID      string    `json:"user_id"`
	Token       string    `json:"token"`
	TokenExpiry time.Time `json:"token_expiry"`
	Deleted     bool      `json:"deleted"`
	CreatedAt   time.Time `json:"created_at"`
}

// Stores crypto posts data
type PostCrypto struct {
	ID            string          `json:"id"`
	MoniestID     string          `json:"moniest_id"`
	BaseCurrency  string          `json:"base_currency"`
	QuoteCurrency string          `json:"quote_currency"`
	StartPrice    float64         `json:"start_price"`
	Duration      time.Time       `json:"duration"`
	Target1       float64         `json:"target1"`
	Target2       sql.NullFloat64 `json:"target2"`
	Target3       sql.NullFloat64 `json:"target3"`
	Stop          sql.NullFloat64 `json:"stop"`
	Direction     EntryPosition   `json:"direction"`
	Score         float64         `json:"score"`
	Finished      bool            `json:"finished"`
	Deleted       bool            `json:"deleted"`
	CreatedAt     time.Time       `json:"created_at"`
	UpdatedAt     time.Time       `json:"updated_at"`
}

// Stores crypto post description data
type PostCryptoDescription struct {
	ID          string    `json:"id"`
	PostID      string    `json:"post_id"`
	Description string    `json:"description"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
}

// Stores subscription data of a moniest
type SubscriptionInfo struct {
	ID        string         `json:"id"`
	MoniestID string         `json:"moniest_id"`
	Fee       float64        `json:"fee"`
	Message   sql.NullString `json:"message"`
	Deleted   bool           `json:"deleted"`
	CreatedAt time.Time      `json:"created_at"`
	UpdatedAt time.Time      `json:"updated_at"`
}

// Stores user data
type User struct {
	ID            string         `json:"id"`
	Name          string         `json:"name"`
	Surname       string         `json:"surname"`
	Username      string         `json:"username"`
	Email         string         `json:"email"`
	EmailVerified bool           `json:"email_verified"`
	Password      string         `json:"password"`
	Location      sql.NullString `json:"location"`
	LoginCount    int32          `json:"login_count"`
	Deleted       bool           `json:"deleted"`
	CreatedAt     time.Time      `json:"created_at"`
	UpdatedAt     time.Time      `json:"updated_at"`
	LastLogin     time.Time      `json:"last_login"`
}

// Stores relation between user and card
type UserCard struct {
	UserID string `json:"user_id"`
	CardID string `json:"card_id"`
}

// Stores user subscription info
type UserSubscription struct {
	ID        string    `json:"id"`
	UserID    string    `json:"user_id"`
	MoniestID string    `json:"moniest_id"`
	Active    bool      `json:"active"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}
