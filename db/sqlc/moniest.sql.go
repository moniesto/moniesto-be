// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: moniest.sql

package db

import (
	"context"
	"database/sql"
)

const createMoniest = `-- name: CreateMoniest :one
INSERT INTO moniest (
        id,
        user_id,
        bio,
        description,
        created_at
    )
VALUES ($1, $2, $3, $4, now())
RETURNING id, user_id, bio, description, score, deleted, created_at, updated_at
`

type CreateMoniestParams struct {
	ID          string         `json:"id"`
	UserID      string         `json:"user_id"`
	Bio         sql.NullString `json:"bio"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) CreateMoniest(ctx context.Context, arg CreateMoniestParams) (Moniest, error) {
	row := q.db.QueryRowContext(ctx, createMoniest,
		arg.ID,
		arg.UserID,
		arg.Bio,
		arg.Description,
	)
	var i Moniest
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Bio,
		&i.Description,
		&i.Score,
		&i.Deleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteMoniest = `-- name: DeleteMoniest :one
UPDATE moniest 
SET deleted = true,
    updated_at = now()
WHERE moniest.id = $1
RETURNING id, user_id, bio, description, score, deleted, created_at, updated_at
`

func (q *Queries) DeleteMoniest(ctx context.Context, id string) (Moniest, error) {
	row := q.db.QueryRowContext(ctx, deleteMoniest, id)
	var i Moniest
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Bio,
		&i.Description,
		&i.Score,
		&i.Deleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateMoniestBio = `-- name: UpdateMoniestBio :one
UPDATE moniest
SET bio = $2,
    updated_at = now()
WHERE moniest.id = $1
RETURNING id, user_id, bio, description, score, deleted, created_at, updated_at
`

type UpdateMoniestBioParams struct {
	ID  string         `json:"id"`
	Bio sql.NullString `json:"bio"`
}

func (q *Queries) UpdateMoniestBio(ctx context.Context, arg UpdateMoniestBioParams) (Moniest, error) {
	row := q.db.QueryRowContext(ctx, updateMoniestBio, arg.ID, arg.Bio)
	var i Moniest
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Bio,
		&i.Description,
		&i.Score,
		&i.Deleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateMoniestDescription = `-- name: UpdateMoniestDescription :one
UPDATE moniest
SET description = $2,
    updated_at = now()
WHERE moniest.id = $1
RETURNING id, user_id, bio, description, score, deleted, created_at, updated_at
`

type UpdateMoniestDescriptionParams struct {
	ID          string         `json:"id"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) UpdateMoniestDescription(ctx context.Context, arg UpdateMoniestDescriptionParams) (Moniest, error) {
	row := q.db.QueryRowContext(ctx, updateMoniestDescription, arg.ID, arg.Description)
	var i Moniest
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Bio,
		&i.Description,
		&i.Score,
		&i.Deleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
