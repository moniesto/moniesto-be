// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: moniest_post_statistics.sql

package db

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const createMoniestPostCryptoStatistics = `-- name: CreateMoniestPostCryptoStatistics :one
INSERT INTO moniest_post_crypto_statistics (
        "id",
        "moniest_id",
        "pnl_7days",
        "roi_7days",
        "win_rate_7days",
        "posts_7days",
        "pnl_30days",
        "roi_30days",
        "win_rate_30days",
        "posts_30days",
        "pnl_total",
        "roi_total",
        "win_rate_total",
        "created_at"
    )
VALUES (
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8,
        $9,
        $10,
        $11,
        $12,
        $13,
        now()
    )
RETURNING id, moniest_id, pnl_7days, roi_7days, win_rate_7days, posts_7days, pnl_30days, roi_30days, win_rate_30days, posts_30days, pnl_total, roi_total, win_rate_total, created_at, updated_at
`

type CreateMoniestPostCryptoStatisticsParams struct {
	ID            string          `json:"id"`
	MoniestID     string          `json:"moniest_id"`
	Pnl7days      sql.NullFloat64 `json:"pnl_7days"`
	Roi7days      sql.NullFloat64 `json:"roi_7days"`
	WinRate7days  sql.NullFloat64 `json:"win_rate_7days"`
	Posts7days    []string        `json:"posts_7days"`
	Pnl30days     sql.NullFloat64 `json:"pnl_30days"`
	Roi30days     sql.NullFloat64 `json:"roi_30days"`
	WinRate30days sql.NullFloat64 `json:"win_rate_30days"`
	Posts30days   []string        `json:"posts_30days"`
	PnlTotal      sql.NullFloat64 `json:"pnl_total"`
	RoiTotal      sql.NullFloat64 `json:"roi_total"`
	WinRateTotal  sql.NullFloat64 `json:"win_rate_total"`
}

func (q *Queries) CreateMoniestPostCryptoStatistics(ctx context.Context, arg CreateMoniestPostCryptoStatisticsParams) (MoniestPostCryptoStatistic, error) {
	row := q.db.QueryRowContext(ctx, createMoniestPostCryptoStatistics,
		arg.ID,
		arg.MoniestID,
		arg.Pnl7days,
		arg.Roi7days,
		arg.WinRate7days,
		pq.Array(arg.Posts7days),
		arg.Pnl30days,
		arg.Roi30days,
		arg.WinRate30days,
		pq.Array(arg.Posts30days),
		arg.PnlTotal,
		arg.RoiTotal,
		arg.WinRateTotal,
	)
	var i MoniestPostCryptoStatistic
	err := row.Scan(
		&i.ID,
		&i.MoniestID,
		&i.Pnl7days,
		&i.Roi7days,
		&i.WinRate7days,
		pq.Array(&i.Posts7days),
		&i.Pnl30days,
		&i.Roi30days,
		&i.WinRate30days,
		pq.Array(&i.Posts30days),
		&i.PnlTotal,
		&i.RoiTotal,
		&i.WinRateTotal,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateAllMoniestsPostCryptoStatistics_30days = `-- name: UpdateAllMoniestsPostCryptoStatistics_30days :exec
UPDATE moniest_post_crypto_statistics AS mpcs
SET pnl_30days = COALESCE(
        (
            SELECT ROUND(SUM(pnl)::numeric, 2)
            FROM post_crypto AS pc
            WHERE pc.moniest_id = mpcs.moniest_id
                AND pc.finished = true
                AND pc.finished_at >= NOW() - INTERVAL '30 days'
        ),
        0
    ),
    roi_30days = COALESCE(
        (
            SELECT ROUND(AVG(roi)::numeric, 2)
            FROM post_crypto AS pc
            WHERE pc.moniest_id = mpcs.moniest_id
                AND pc.finished = true
                AND pc.finished_at >= NOW() - INTERVAL '30 days'
        ),
        0
    ),
    win_rate_30days = COALESCE(
        (
            SELECT ROUND(
                    (
                        (
                            SUM(
                                CASE
                                    WHEN pc.status = 'success' THEN 1
                                    ELSE 0
                                END
                            )::float / COUNT(*)
                        ) * 100
                    )::numeric,
                    2
                )
            FROM post_crypto AS pc
            WHERE pc.moniest_id = mpcs.moniest_id
                AND pc.finished = true
                AND pc.finished_at >= NOW() - INTERVAL '30 days'
        ),
        0
    ),
    posts_30days = COALESCE(
        (
            SELECT ARRAY_AGG(id)
            FROM post_crypto AS pc
            WHERE pc.moniest_id = mpcs.moniest_id
                AND pc.finished = true
                AND pc.finished_at >= NOW() - INTERVAL '30 days'
        ),
        '{}'
    ),
    updated_at = now()
`

func (q *Queries) UpdateAllMoniestsPostCryptoStatistics_30days(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, updateAllMoniestsPostCryptoStatistics_30days)
	return err
}

const updateAllMoniestsPostCryptoStatistics_7days = `-- name: UpdateAllMoniestsPostCryptoStatistics_7days :exec
UPDATE moniest_post_crypto_statistics AS mpcs
SET pnl_7days = COALESCE(
        (
            SELECT ROUND(SUM(pnl)::numeric, 2)
            FROM post_crypto AS pc
            WHERE pc.moniest_id = mpcs.moniest_id
                AND pc.finished = TRUE
                AND pc.finished_at >= NOW() - INTERVAL '7 days'
        ),
        0
    ),
    roi_7days = COALESCE(
        (
            SELECT ROUND(AVG(roi)::numeric, 2)
            FROM post_crypto AS pc
            WHERE pc.moniest_id = mpcs.moniest_id
                AND pc.finished = TRUE
                AND pc.finished_at >= NOW() - INTERVAL '7 days'
        ),
        0
    ),
    win_rate_7days = COALESCE(
        (
            SELECT ROUND(
                    (
                        (
                            SUM(
                                CASE
                                    WHEN pc.status = 'success' THEN 1
                                    ELSE 0
                                END
                            )::float / COUNT(*)
                        ) * 100
                    )::numeric,
                    2
                )
            FROM post_crypto AS pc
            WHERE pc.moniest_id = mpcs.moniest_id
                AND pc.finished = TRUE
                AND pc.finished_at >= NOW() - INTERVAL '7 days'
        ),
        0
    ),
    posts_7days = COALESCE(
        (
            SELECT ARRAY_AGG(id)
            FROM post_crypto AS pc
            WHERE pc.moniest_id = mpcs.moniest_id
                AND pc.finished = TRUE
                AND pc.finished_at >= NOW() - INTERVAL '7 days'
        ),
        '{}'
    ),
    updated_at = now()
`

func (q *Queries) UpdateAllMoniestsPostCryptoStatistics_7days(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, updateAllMoniestsPostCryptoStatistics_7days)
	return err
}

const updateAllMoniestsPostCryptoStatistics_total = `-- name: UpdateAllMoniestsPostCryptoStatistics_total :exec
UPDATE moniest_post_crypto_statistics AS mpcs
SET pnl_total = COALESCE(
        (
            SELECT ROUND(SUM(pnl)::numeric, 2)
            FROM post_crypto AS pc
            WHERE pc.moniest_id = mpcs.moniest_id
                AND pc.finished = true
        ),
        0
    ),
    roi_total = COALESCE(
        (
            SELECT ROUND(AVG(roi)::numeric, 2)
            FROM post_crypto AS pc
            WHERE pc.moniest_id = mpcs.moniest_id
                AND pc.finished = true
        ),
        0
    ),
    win_rate_total = COALESCE(
        (
            SELECT ROUND(
                    (
                        (
                            SUM(
                                CASE
                                    WHEN pc.status = 'success' THEN 1
                                    ELSE 0
                                END
                            )::float / COUNT(*)
                        ) * 100
                    )::numeric,
                    2
                )
            FROM post_crypto AS pc
            WHERE pc.moniest_id = mpcs.moniest_id
                AND pc.finished = true
        ),
        0
    ),
    updated_at = now()
`

func (q *Queries) UpdateAllMoniestsPostCryptoStatistics_total(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, updateAllMoniestsPostCryptoStatistics_total)
	return err
}

const updateMoniestsPostCryptoStatistics_30days = `-- name: UpdateMoniestsPostCryptoStatistics_30days :exec
UPDATE moniest_post_crypto_statistics AS mpcs
SET pnl_30days = COALESCE(
        (
            SELECT ROUND(SUM(pnl)::numeric, 2)
            FROM post_crypto AS pc
            WHERE pc.moniest_id = mpcs.moniest_id
                AND pc.finished = true
                AND pc.finished_at >= NOW() - INTERVAL '30 days'
        ),
        0
    ),
    roi_30days = COALESCE(
        (
            SELECT ROUND(AVG(roi)::numeric, 2)
            FROM post_crypto AS pc
            WHERE pc.moniest_id = mpcs.moniest_id
                AND pc.finished = true
                AND pc.finished_at >= NOW() - INTERVAL '30 days'
        ),
        0
    ),
    win_rate_30days = COALESCE(
        (
            SELECT ROUND(
                    (
                        (
                            SUM(
                                CASE
                                    WHEN pc.status = 'success' THEN 1
                                    ELSE 0
                                END
                            )::float / COUNT(*)
                        ) * 100
                    )::numeric,
                    2
                )
            FROM post_crypto AS pc
            WHERE pc.moniest_id = mpcs.moniest_id
                AND pc.finished = true
                AND pc.finished_at >= NOW() - INTERVAL '30 days'
        ),
        0
    ),
    posts_30days = COALESCE(
        (
            SELECT ARRAY_AGG(id)
            FROM post_crypto AS pc
            WHERE pc.moniest_id = mpcs.moniest_id
                AND pc.finished = true
                AND pc.finished_at >= NOW() - INTERVAL '30 days'
        ),
        '{}'
    ),
    updated_at = now()
WHERE "mpcs"."moniest_id" = ANY($1::varchar [])
`

func (q *Queries) UpdateMoniestsPostCryptoStatistics_30days(ctx context.Context, dollar_1 []string) error {
	_, err := q.db.ExecContext(ctx, updateMoniestsPostCryptoStatistics_30days, pq.Array(dollar_1))
	return err
}

const updateMoniestsPostCryptoStatistics_7days = `-- name: UpdateMoniestsPostCryptoStatistics_7days :exec
UPDATE moniest_post_crypto_statistics AS mpcs
SET pnl_7days = COALESCE(
        (
            SELECT ROUND(SUM(pnl)::numeric, 2)
            FROM post_crypto AS pc
            WHERE pc.moniest_id = mpcs.moniest_id
                AND pc.finished = TRUE
                AND pc.finished_at >= NOW() - INTERVAL '7 days'
        ),
        0
    ),
    roi_7days = COALESCE(
        (
            SELECT ROUND(AVG(roi)::numeric, 2)
            FROM post_crypto AS pc
            WHERE pc.moniest_id = mpcs.moniest_id
                AND pc.finished = TRUE
                AND pc.finished_at >= NOW() - INTERVAL '7 days'
        ),
        0
    ),
    win_rate_7days = COALESCE(
        (
            SELECT ROUND(
                    (
                        (
                            SUM(
                                CASE
                                    WHEN pc.status = 'success' THEN 1
                                    ELSE 0
                                END
                            )::float / COUNT(*)
                        ) * 100
                    )::numeric,
                    2
                )
            FROM post_crypto AS pc
            WHERE pc.moniest_id = mpcs.moniest_id
                AND pc.finished = TRUE
                AND pc.finished_at >= NOW() - INTERVAL '7 days'
        ),
        0
    ),
    posts_7days = COALESCE(
        (
            SELECT ARRAY_AGG(id)
            FROM post_crypto AS pc
            WHERE pc.moniest_id = mpcs.moniest_id
                AND pc.finished = TRUE
                AND pc.finished_at >= NOW() - INTERVAL '7 days'
        ),
        '{}'
    ),
    updated_at = now()
WHERE "mpcs"."moniest_id" = ANY($1::varchar [])
`

func (q *Queries) UpdateMoniestsPostCryptoStatistics_7days(ctx context.Context, dollar_1 []string) error {
	_, err := q.db.ExecContext(ctx, updateMoniestsPostCryptoStatistics_7days, pq.Array(dollar_1))
	return err
}

const updateMoniestsPostCryptoStatistics_total = `-- name: UpdateMoniestsPostCryptoStatistics_total :exec
UPDATE moniest_post_crypto_statistics AS mpcs
SET pnl_total = COALESCE(
        (
            SELECT ROUND(SUM(pnl)::numeric, 2)
            FROM post_crypto AS pc
            WHERE pc.moniest_id = mpcs.moniest_id
                AND pc.finished = true
        ),
        0
    ),
    roi_total = COALESCE(
        (
            SELECT ROUND(AVG(roi)::numeric, 2)
            FROM post_crypto AS pc
            WHERE pc.moniest_id = mpcs.moniest_id
                AND pc.finished = true
        ),
        0
    ),
    win_rate_total = COALESCE(
        (
            SELECT ROUND(
                    (
                        (
                            SUM(
                                CASE
                                    WHEN pc.status = 'success' THEN 1
                                    ELSE 0
                                END
                            )::float / COUNT(*)
                        ) * 100
                    )::numeric,
                    2
                )
            FROM post_crypto AS pc
            WHERE pc.moniest_id = mpcs.moniest_id
                AND pc.finished = true
        ),
        0
    ),
    updated_at = now()
WHERE "mpcs"."moniest_id" = ANY($1::varchar [])
`

func (q *Queries) UpdateMoniestsPostCryptoStatistics_total(ctx context.Context, dollar_1 []string) error {
	_, err := q.db.ExecContext(ctx, updateMoniestsPostCryptoStatistics_total, pq.Array(dollar_1))
	return err
}
