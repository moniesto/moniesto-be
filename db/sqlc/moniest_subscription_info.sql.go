// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: moniest_subscription_info.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createMoniestSubscriptionInfo = `-- name: CreateMoniestSubscriptionInfo :one
INSERT INTO moniest_subscription_info (
        id,
        moniest_id,
        fee,
        message,
        created_at
    )
VALUES ($1, $2, $3, $4, now())
RETURNING id, moniest_id, fee, message, deleted, created_at, updated_at
`

type CreateMoniestSubscriptionInfoParams struct {
	ID        string         `json:"id"`
	MoniestID string         `json:"moniest_id"`
	Fee       float64        `json:"fee"`
	Message   sql.NullString `json:"message"`
}

func (q *Queries) CreateMoniestSubscriptionInfo(ctx context.Context, arg CreateMoniestSubscriptionInfoParams) (MoniestSubscriptionInfo, error) {
	row := q.db.QueryRowContext(ctx, createMoniestSubscriptionInfo,
		arg.ID,
		arg.MoniestID,
		arg.Fee,
		arg.Message,
	)
	var i MoniestSubscriptionInfo
	err := row.Scan(
		&i.ID,
		&i.MoniestID,
		&i.Fee,
		&i.Message,
		&i.Deleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getMoniestSubscriptionInfoByMoniestId = `-- name: GetMoniestSubscriptionInfoByMoniestId :one
SELECT fee,
    message,
    updated_at
FROM "moniest_subscription_info"
WHERE moniest_id = $1
`

type GetMoniestSubscriptionInfoByMoniestIdRow struct {
	Fee       float64        `json:"fee"`
	Message   sql.NullString `json:"message"`
	UpdatedAt time.Time      `json:"updated_at"`
}

func (q *Queries) GetMoniestSubscriptionInfoByMoniestId(ctx context.Context, moniestID string) (GetMoniestSubscriptionInfoByMoniestIdRow, error) {
	row := q.db.QueryRowContext(ctx, getMoniestSubscriptionInfoByMoniestId, moniestID)
	var i GetMoniestSubscriptionInfoByMoniestIdRow
	err := row.Scan(&i.Fee, &i.Message, &i.UpdatedAt)
	return i, err
}

const updateMoniestSubscriptionInfo = `-- name: UpdateMoniestSubscriptionInfo :one
UPDATE "moniest_subscription_info"
SET fee = $2,
    message = $3,
    updated_at = now()
WHERE moniest_id = $1
RETURNING id, moniest_id, fee, message, deleted, created_at, updated_at
`

type UpdateMoniestSubscriptionInfoParams struct {
	MoniestID string         `json:"moniest_id"`
	Fee       float64        `json:"fee"`
	Message   sql.NullString `json:"message"`
}

func (q *Queries) UpdateMoniestSubscriptionInfo(ctx context.Context, arg UpdateMoniestSubscriptionInfoParams) (MoniestSubscriptionInfo, error) {
	row := q.db.QueryRowContext(ctx, updateMoniestSubscriptionInfo, arg.MoniestID, arg.Fee, arg.Message)
	var i MoniestSubscriptionInfo
	err := row.Scan(
		&i.ID,
		&i.MoniestID,
		&i.Fee,
		&i.Message,
		&i.Deleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
