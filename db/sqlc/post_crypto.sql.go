// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: post_crypto.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createPost = `-- name: CreatePost :one
INSERT INTO "post_crypto" (
        id,
        moniest_id,
        base_currency,
        quote_currency,
        duration,
        target1,
        target2,
        target3,
        stop,
        direction,
        score,
        created_at,
        updated_at
    )
VALUES (
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8,
        $9,
        $10,
        $11,
        now(),
        now()
    )
RETURNING id, moniest_id, base_currency, quote_currency, start_price, duration, target1, target2, target3, stop, direction, score, finished, deleted, created_at, updated_at
`

type CreatePostParams struct {
	ID            string          `json:"id"`
	MoniestID     string          `json:"moniest_id"`
	BaseCurrency  string          `json:"base_currency"`
	QuoteCurrency string          `json:"quote_currency"`
	Duration      time.Time       `json:"duration"`
	Target1       float64         `json:"target1"`
	Target2       sql.NullFloat64 `json:"target2"`
	Target3       sql.NullFloat64 `json:"target3"`
	Stop          sql.NullFloat64 `json:"stop"`
	Direction     EntryPosition   `json:"direction"`
	Score         float64         `json:"score"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (PostCrypto, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.ID,
		arg.MoniestID,
		arg.BaseCurrency,
		arg.QuoteCurrency,
		arg.Duration,
		arg.Target1,
		arg.Target2,
		arg.Target3,
		arg.Stop,
		arg.Direction,
		arg.Score,
	)
	var i PostCrypto
	err := row.Scan(
		&i.ID,
		&i.MoniestID,
		&i.BaseCurrency,
		&i.QuoteCurrency,
		&i.StartPrice,
		&i.Duration,
		&i.Target1,
		&i.Target2,
		&i.Target3,
		&i.Stop,
		&i.Direction,
		&i.Score,
		&i.Finished,
		&i.Deleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePost = `-- name: DeletePost :one
UPDATE "post_crypto"
SET "deleted" = true,
    "updated_at" = now()
WHERE "id" = $1
RETURNING id, moniest_id, base_currency, quote_currency, start_price, duration, target1, target2, target3, stop, direction, score, finished, deleted, created_at, updated_at
`

func (q *Queries) DeletePost(ctx context.Context, id string) (PostCrypto, error) {
	row := q.db.QueryRowContext(ctx, deletePost, id)
	var i PostCrypto
	err := row.Scan(
		&i.ID,
		&i.MoniestID,
		&i.BaseCurrency,
		&i.QuoteCurrency,
		&i.StartPrice,
		&i.Duration,
		&i.Target1,
		&i.Target2,
		&i.Target3,
		&i.Stop,
		&i.Direction,
		&i.Score,
		&i.Finished,
		&i.Deleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePost = `-- name: UpdatePost :one
UPDATE "post_crypto"
SET "duration" = $2,
    "target1" = $3,
    "target2" = $4,
    "target3" = $5,
    "stop" = $6,
    "updated_at" = now()
WHERE "id" = $1
RETURNING id, moniest_id, base_currency, quote_currency, start_price, duration, target1, target2, target3, stop, direction, score, finished, deleted, created_at, updated_at
`

type UpdatePostParams struct {
	ID       string          `json:"id"`
	Duration time.Time       `json:"duration"`
	Target1  float64         `json:"target1"`
	Target2  sql.NullFloat64 `json:"target2"`
	Target3  sql.NullFloat64 `json:"target3"`
	Stop     sql.NullFloat64 `json:"stop"`
}

// TODO:
// Post update queryleri yazılacak! her field overwrite edilecek mi?
// FIXME:
// tahmin girildikten sonra direction değiştirilebilir mi?
func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) (PostCrypto, error) {
	row := q.db.QueryRowContext(ctx, updatePost,
		arg.ID,
		arg.Duration,
		arg.Target1,
		arg.Target2,
		arg.Target3,
		arg.Stop,
	)
	var i PostCrypto
	err := row.Scan(
		&i.ID,
		&i.MoniestID,
		&i.BaseCurrency,
		&i.QuoteCurrency,
		&i.StartPrice,
		&i.Duration,
		&i.Target1,
		&i.Target2,
		&i.Target3,
		&i.Stop,
		&i.Direction,
		&i.Score,
		&i.Finished,
		&i.Deleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
