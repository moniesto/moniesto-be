// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: user.sql

package db

import (
	"context"
)

const checkUsername = `-- name: CheckUsername :one
SELECT COUNT(*)=0 AS isUsernameValid
FROM "user"
WHERE username = $1
`

func (q *Queries) CheckUsername(ctx context.Context, username string) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkUsername, username)
	var isusernamevalid bool
	err := row.Scan(&isusernamevalid)
	return isusernamevalid, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO "user" (
        id,
        name,
        surname,
        username,
        email,
        password,
        created_at
    )
VALUES ($1, $2, $3, $4, $5, $6, ` + "`" + `now()` + "`" + `)
RETURNING id, name, surname, username, email, email_verified, password, location, login_count, deleted, created_at, updated_at, last_login
`

type CreateUserParams struct {
	ID       string `json:"id"`
	Name     string `json:"name"`
	Surname  string `json:"surname"`
	Username string `json:"username"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Name,
		arg.Surname,
		arg.Username,
		arg.Email,
		arg.Password,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Surname,
		&i.Username,
		&i.Email,
		&i.EmailVerified,
		&i.Password,
		&i.Location,
		&i.LoginCount,
		&i.Deleted,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLogin,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :one
UPDATE "user"
SET deleted = true,
    updated_at = ` + "`" + `now()` + "`" + `
WHERE id = $1
RETURNING id, name, surname, username, email, email_verified, password, location, login_count, deleted, created_at, updated_at, last_login
`

func (q *Queries) DeleteUser(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, deleteUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Surname,
		&i.Username,
		&i.Email,
		&i.EmailVerified,
		&i.Password,
		&i.Location,
		&i.LoginCount,
		&i.Deleted,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLogin,
	)
	return i, err
}

const getInactiveUsersVerifiedEmails = `-- name: GetInactiveUsersVerifiedEmails :many
SELECT email
FROM "user"
WHERE email_verified = true AND deleted = true
`

func (q *Queries) GetInactiveUsersVerifiedEmails(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getInactiveUsersVerifiedEmails)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var email string
		if err := rows.Scan(&email); err != nil {
			return nil, err
		}
		items = append(items, email)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setPassword = `-- name: SetPassword :one
UPDATE "user"
SET password = $2
WHERE id = $1 
RETURNING id, name, surname, username, email, email_verified, password, location, login_count, deleted, created_at, updated_at, last_login
`

type SetPasswordParams struct {
	ID       string `json:"id"`
	Password string `json:"password"`
}

func (q *Queries) SetPassword(ctx context.Context, arg SetPasswordParams) (User, error) {
	row := q.db.QueryRowContext(ctx, setPassword, arg.ID, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Surname,
		&i.Username,
		&i.Email,
		&i.EmailVerified,
		&i.Password,
		&i.Location,
		&i.LoginCount,
		&i.Deleted,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLogin,
	)
	return i, err
}

const updateLoginStats = `-- name: UpdateLoginStats :one
UPDATE "user"
SET login_count = login_count + 1,
    last_login = ` + "`" + `now()` + "`" + `
WHERE id = $1
RETURNING id, name, surname, username, email, email_verified, password, location, login_count, deleted, created_at, updated_at, last_login
`

func (q *Queries) UpdateLoginStats(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, updateLoginStats, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Surname,
		&i.Username,
		&i.Email,
		&i.EmailVerified,
		&i.Password,
		&i.Location,
		&i.LoginCount,
		&i.Deleted,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLogin,
	)
	return i, err
}
