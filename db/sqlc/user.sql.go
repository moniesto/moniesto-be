// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const checkEmail = `-- name: CheckEmail :one
SELECT COUNT(*) = 0 AS isEmailValid
FROM "user"
WHERE email = $1
`

func (q *Queries) CheckEmail(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkEmail, email)
	var isemailvalid bool
	err := row.Scan(&isemailvalid)
	return isemailvalid, err
}

const checkUsername = `-- name: CheckUsername :one
SELECT COUNT(*) = 0 AS isUsernameValid
FROM "user"
WHERE username = $1
`

func (q *Queries) CheckUsername(ctx context.Context, username string) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkUsername, username)
	var isusernamevalid bool
	err := row.Scan(&isusernamevalid)
	return isusernamevalid, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO "user" (
        id,
        name,
        surname,
        username,
        email,
        password,
        created_at,
        last_login
    )
VALUES ($1, $2, $3, $4, $5, $6, now(), now())
RETURNING id, name, surname, username, email, email_verified, password, location, login_count, deleted, created_at, updated_at, last_login
`

type CreateUserParams struct {
	ID       string `json:"id"`
	Name     string `json:"name"`
	Surname  string `json:"surname"`
	Username string `json:"username"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Name,
		arg.Surname,
		arg.Username,
		arg.Email,
		arg.Password,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Surname,
		&i.Username,
		&i.Email,
		&i.EmailVerified,
		&i.Password,
		&i.Location,
		&i.LoginCount,
		&i.Deleted,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLogin,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :one
UPDATE "user"
SET deleted = true,
    updated_at = now()
WHERE id = $1
RETURNING id, name, surname, username, email, email_verified, password, location, login_count, deleted, created_at, updated_at, last_login
`

func (q *Queries) DeleteUser(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, deleteUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Surname,
		&i.Username,
		&i.Email,
		&i.EmailVerified,
		&i.Password,
		&i.Location,
		&i.LoginCount,
		&i.Deleted,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLogin,
	)
	return i, err
}

const getActiveUsersVerifiedEmails = `-- name: GetActiveUsersVerifiedEmails :many
SELECT email
FROM "user"
WHERE email_verified = true
    AND deleted = false
`

func (q *Queries) GetActiveUsersVerifiedEmails(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getActiveUsersVerifiedEmails)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var email string
		if err := rows.Scan(&email); err != nil {
			return nil, err
		}
		items = append(items, email)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getInactiveUsersVerifiedEmails = `-- name: GetInactiveUsersVerifiedEmails :many
SELECT email
FROM "user"
WHERE email_verified = true
    AND deleted = true
`

func (q *Queries) GetInactiveUsersVerifiedEmails(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getInactiveUsersVerifiedEmails)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var email string
		if err := rows.Scan(&email); err != nil {
			return nil, err
		}
		items = append(items, email)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOwnUserByID = `-- name: GetOwnUserByID :one
SELECT "user"."id",
    "moniest"."id" as "moniest_id",
    "user"."name",
    "user"."surname",
    "user"."username",
    "user"."email",
    "user"."email_verified",
    "user"."location",
    "user"."created_at",
    "user"."updated_at",
    "moniest"."bio",
    "moniest"."description",
    "moniest"."score",
    "subscription_info"."id" as "subscription_info_id",
    "subscription_info"."fee",
    "subscription_info"."message",
    "subscription_info"."updated_at" as "subscription_info_updated_at",
    COALESCE (
        (
            SELECT "image"."link"
            FROM "image"
            WHERE "image"."user_id" = $1
                AND "image"."type" = 'profile_photo'
        ),
        ''
    ) AS "profile_photo_link",
    COALESCE (
        (
            SELECT "image"."thumbnail_link"
            FROM "image"
            WHERE "image"."user_id" = $1
                AND "image"."type" = 'profile_photo'
        ),
        ''
    ) AS "profile_photo_thumbnail_link",
    COALESCE (
        (
            SELECT "image"."link"
            FROM "image"
            WHERE "image"."user_id" = $1
                AND "image"."type" = 'background_photo'
        ),
        ''
    ) AS "background_photo_link",
    COALESCE (
        (
            SELECT "image"."thumbnail_link"
            FROM "image"
            WHERE "image"."user_id" = $1
                AND "image"."type" = 'background_photo'
        ),
        ''
    ) AS "background_photo_thumbnail_link"
FROM "user"
    LEFT JOIN "moniest" ON "moniest"."user_id" = "user"."id"
    LEFT JOIN "subscription_info" ON "subscription_info"."moniest_id" = "moniest"."id"
WHERE "user"."id" = $1
    AND "user"."deleted" = false
`

type GetOwnUserByIDRow struct {
	ID                           string          `json:"id"`
	MoniestID                    sql.NullString  `json:"moniest_id"`
	Name                         string          `json:"name"`
	Surname                      string          `json:"surname"`
	Username                     string          `json:"username"`
	Email                        string          `json:"email"`
	EmailVerified                bool            `json:"email_verified"`
	Location                     sql.NullString  `json:"location"`
	CreatedAt                    time.Time       `json:"created_at"`
	UpdatedAt                    time.Time       `json:"updated_at"`
	Bio                          sql.NullString  `json:"bio"`
	Description                  sql.NullString  `json:"description"`
	Score                        sql.NullFloat64 `json:"score"`
	SubscriptionInfoID           sql.NullString  `json:"subscription_info_id"`
	Fee                          sql.NullFloat64 `json:"fee"`
	Message                      sql.NullString  `json:"message"`
	SubscriptionInfoUpdatedAt    sql.NullTime    `json:"subscription_info_updated_at"`
	ProfilePhotoLink             interface{}     `json:"profile_photo_link"`
	ProfilePhotoThumbnailLink    interface{}     `json:"profile_photo_thumbnail_link"`
	BackgroundPhotoLink          interface{}     `json:"background_photo_link"`
	BackgroundPhotoThumbnailLink interface{}     `json:"background_photo_thumbnail_link"`
}

func (q *Queries) GetOwnUserByID(ctx context.Context, userID string) (GetOwnUserByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getOwnUserByID, userID)
	var i GetOwnUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.MoniestID,
		&i.Name,
		&i.Surname,
		&i.Username,
		&i.Email,
		&i.EmailVerified,
		&i.Location,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Bio,
		&i.Description,
		&i.Score,
		&i.SubscriptionInfoID,
		&i.Fee,
		&i.Message,
		&i.SubscriptionInfoUpdatedAt,
		&i.ProfilePhotoLink,
		&i.ProfilePhotoThumbnailLink,
		&i.BackgroundPhotoLink,
		&i.BackgroundPhotoThumbnailLink,
	)
	return i, err
}

const getOwnUserByUsername = `-- name: GetOwnUserByUsername :one
SELECT "user"."id",
    "moniest"."id" as "moniest_id",
    "user"."name",
    "user"."surname",
    "user"."username",
    "user"."email",
    "user"."email_verified",
    "user"."location",
    "user"."created_at",
    "user"."updated_at",
    "moniest"."bio",
    "moniest"."description",
    "moniest"."score",
    "subscription_info"."id" as "subscription_info_id",
    "subscription_info"."fee",
    "subscription_info"."message",
    "subscription_info"."updated_at" as "subscription_info_updated_at",
    COALESCE (
        (
            SELECT "image"."link"
            FROM "image"
                INNER JOIN "user" ON "user"."id" = "image"."user_id"
            WHERE "user"."username" = $1
                AND "image"."type" = 'profile_photo'
        ),
        ''
    ) AS "profile_photo_link",
    COALESCE (
        (
            SELECT "image"."thumbnail_link"
            FROM "image"
                INNER JOIN "user" ON "user"."id" = "image"."user_id"
            WHERE "user"."username" = $1
                AND "image"."type" = 'profile_photo'
        ),
        ''
    ) AS "profile_photo_thumbnail_link",
    COALESCE (
        (
            SELECT "image"."link"
            FROM "image"
                INNER JOIN "user" ON "user"."id" = "image"."user_id"
            WHERE "user"."username" = $1
                AND "image"."type" = 'background_photo'
        ),
        ''
    ) AS "background_photo_link",
    COALESCE (
        (
            SELECT "image"."thumbnail_link"
            FROM "image"
                INNER JOIN "user" ON "user"."id" = "image"."user_id"
            WHERE "user"."username" = $1
                AND "image"."type" = 'background_photo'
        ),
        ''
    ) AS "background_photo_thumbnail_link"
FROM "user"
    LEFT JOIN "moniest" ON "moniest"."user_id" = "user"."id"
    LEFT JOIN "subscription_info" ON "subscription_info"."moniest_id" = "moniest"."id"
WHERE "user"."username" = $1
    AND "user"."deleted" = false
`

type GetOwnUserByUsernameRow struct {
	ID                           string          `json:"id"`
	MoniestID                    sql.NullString  `json:"moniest_id"`
	Name                         string          `json:"name"`
	Surname                      string          `json:"surname"`
	Username                     string          `json:"username"`
	Email                        string          `json:"email"`
	EmailVerified                bool            `json:"email_verified"`
	Location                     sql.NullString  `json:"location"`
	CreatedAt                    time.Time       `json:"created_at"`
	UpdatedAt                    time.Time       `json:"updated_at"`
	Bio                          sql.NullString  `json:"bio"`
	Description                  sql.NullString  `json:"description"`
	Score                        sql.NullFloat64 `json:"score"`
	SubscriptionInfoID           sql.NullString  `json:"subscription_info_id"`
	Fee                          sql.NullFloat64 `json:"fee"`
	Message                      sql.NullString  `json:"message"`
	SubscriptionInfoUpdatedAt    sql.NullTime    `json:"subscription_info_updated_at"`
	ProfilePhotoLink             interface{}     `json:"profile_photo_link"`
	ProfilePhotoThumbnailLink    interface{}     `json:"profile_photo_thumbnail_link"`
	BackgroundPhotoLink          interface{}     `json:"background_photo_link"`
	BackgroundPhotoThumbnailLink interface{}     `json:"background_photo_thumbnail_link"`
}

func (q *Queries) GetOwnUserByUsername(ctx context.Context, username string) (GetOwnUserByUsernameRow, error) {
	row := q.db.QueryRowContext(ctx, getOwnUserByUsername, username)
	var i GetOwnUserByUsernameRow
	err := row.Scan(
		&i.ID,
		&i.MoniestID,
		&i.Name,
		&i.Surname,
		&i.Username,
		&i.Email,
		&i.EmailVerified,
		&i.Location,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Bio,
		&i.Description,
		&i.Score,
		&i.SubscriptionInfoID,
		&i.Fee,
		&i.Message,
		&i.SubscriptionInfoUpdatedAt,
		&i.ProfilePhotoLink,
		&i.ProfilePhotoThumbnailLink,
		&i.BackgroundPhotoLink,
		&i.BackgroundPhotoThumbnailLink,
	)
	return i, err
}

const getPasswordByID = `-- name: GetPasswordByID :one
SELECT password
FROM "user"
WHERE id = $1
    AND "user"."deleted" = false
`

func (q *Queries) GetPasswordByID(ctx context.Context, id string) (string, error) {
	row := q.db.QueryRowContext(ctx, getPasswordByID, id)
	var password string
	err := row.Scan(&password)
	return password, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT "user"."id",
    "user"."name",
    "user"."surname",
    "user"."username",
    "user"."email",
    "user"."email_verified",
    "user"."location",
    "user"."created_at",
    "user"."updated_at",
    COALESCE (
        (
            SELECT "image"."link"
            FROM "image"
                INNER JOIN "user" ON "user"."id" = "image"."user_id"
            WHERE "user"."email" = $1
                AND "image"."type" = 'profile_photo'
        ),
        ''
    ) AS "profile_photo_link",
    COALESCE (
        (
            SELECT "image"."thumbnail_link"
            FROM "image"
                INNER JOIN "user" ON "user"."id" = "image"."user_id"
            WHERE "user"."email" = $1
                AND "image"."type" = 'profile_photo'
        ),
        ''
    ) AS "profile_photo_thumbnail_link",
    COALESCE (
        (
            SELECT "image"."link"
            FROM "image"
                INNER JOIN "user" ON "user"."id" = "image"."user_id"
            WHERE "user"."email" = $1
                AND "image"."type" = 'background_photo'
        ),
        ''
    ) AS "background_photo_link",
    COALESCE (
        (
            SELECT "image"."thumbnail_link"
            FROM "image"
                INNER JOIN "user" ON "user"."id" = "image"."user_id"
            WHERE "user"."email" = $1
                AND "image"."type" = 'background_photo'
        ),
        ''
    ) AS "background_photo_thumbnail_link"
FROM "user"
WHERE "user"."email" = $1
    AND "user"."deleted" = false
`

type GetUserByEmailRow struct {
	ID                           string         `json:"id"`
	Name                         string         `json:"name"`
	Surname                      string         `json:"surname"`
	Username                     string         `json:"username"`
	Email                        string         `json:"email"`
	EmailVerified                bool           `json:"email_verified"`
	Location                     sql.NullString `json:"location"`
	CreatedAt                    time.Time      `json:"created_at"`
	UpdatedAt                    time.Time      `json:"updated_at"`
	ProfilePhotoLink             interface{}    `json:"profile_photo_link"`
	ProfilePhotoThumbnailLink    interface{}    `json:"profile_photo_thumbnail_link"`
	BackgroundPhotoLink          interface{}    `json:"background_photo_link"`
	BackgroundPhotoThumbnailLink interface{}    `json:"background_photo_thumbnail_link"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Surname,
		&i.Username,
		&i.Email,
		&i.EmailVerified,
		&i.Location,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ProfilePhotoLink,
		&i.ProfilePhotoThumbnailLink,
		&i.BackgroundPhotoLink,
		&i.BackgroundPhotoThumbnailLink,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT "user"."id",
    "user"."name",
    "user"."surname",
    "user"."username",
    "user"."email_verified",
    "user"."location",
    "user"."created_at",
    "user"."updated_at",
    COALESCE (
        (
            SELECT "image"."link"
            FROM "image"
            WHERE "image"."user_id" = $1
                AND "image"."type" = 'profile_photo'
        ),
        ''
    ) AS "profile_photo_link",
    COALESCE (
        (
            SELECT "image"."thumbnail_link"
            FROM "image"
            WHERE "image"."user_id" = $1
                AND "image"."type" = 'profile_photo'
        ),
        ''
    ) AS "profile_photo_thumbnail_link",
    COALESCE (
        (
            SELECT "image"."link"
            FROM "image"
            WHERE "image"."user_id" = $1
                AND "image"."type" = 'background_photo'
        ),
        ''
    ) AS "background_photo_link",
    COALESCE (
        (
            SELECT "image"."thumbnail_link"
            FROM "image"
            WHERE "image"."user_id" = $1
                AND "image"."type" = 'background_photo'
        ),
        ''
    ) AS "background_photo_thumbnail_link"
FROM "user"
WHERE "user"."id" = $1
    AND "user"."deleted" = false
`

type GetUserByIDRow struct {
	ID                           string         `json:"id"`
	Name                         string         `json:"name"`
	Surname                      string         `json:"surname"`
	Username                     string         `json:"username"`
	EmailVerified                bool           `json:"email_verified"`
	Location                     sql.NullString `json:"location"`
	CreatedAt                    time.Time      `json:"created_at"`
	UpdatedAt                    time.Time      `json:"updated_at"`
	ProfilePhotoLink             interface{}    `json:"profile_photo_link"`
	ProfilePhotoThumbnailLink    interface{}    `json:"profile_photo_thumbnail_link"`
	BackgroundPhotoLink          interface{}    `json:"background_photo_link"`
	BackgroundPhotoThumbnailLink interface{}    `json:"background_photo_thumbnail_link"`
}

func (q *Queries) GetUserByID(ctx context.Context, userID string) (GetUserByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, userID)
	var i GetUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Surname,
		&i.Username,
		&i.EmailVerified,
		&i.Location,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ProfilePhotoLink,
		&i.ProfilePhotoThumbnailLink,
		&i.BackgroundPhotoLink,
		&i.BackgroundPhotoThumbnailLink,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT "user"."id",
    "moniest"."id" as "moniest_id",
    "user"."name",
    "user"."surname",
    "user"."username",
    "user"."email_verified",
    "user"."location",
    "user"."created_at",
    "user"."updated_at",
    "moniest"."bio",
    "moniest"."description",
    "moniest"."score",
    "subscription_info"."id" as "subscription_info_id",
    "subscription_info"."fee",
    "subscription_info"."message",
    "subscription_info"."updated_at" as "subscription_info_updated_at",
    COALESCE (
        (
            SELECT "image"."link"
            FROM "image"
                INNER JOIN "user" ON "user"."id" = "image"."user_id"
            WHERE "user"."username" = $1
                AND "image"."type" = 'profile_photo'
        ),
        ''
    ) AS "profile_photo_link",
    COALESCE (
        (
            SELECT "image"."thumbnail_link"
            FROM "image"
                INNER JOIN "user" ON "user"."id" = "image"."user_id"
            WHERE "user"."username" = $1
                AND "image"."type" = 'profile_photo'
        ),
        ''
    ) AS "profile_photo_thumbnail_link",
    COALESCE (
        (
            SELECT "image"."link"
            FROM "image"
                INNER JOIN "user" ON "user"."id" = "image"."user_id"
            WHERE "user"."username" = $1
                AND "image"."type" = 'background_photo'
        ),
        ''
    ) AS "background_photo_link",
    COALESCE (
        (
            SELECT "image"."thumbnail_link"
            FROM "image"
                INNER JOIN "user" ON "user"."id" = "image"."user_id"
            WHERE "user"."username" = $1
                AND "image"."type" = 'background_photo'
        ),
        ''
    ) AS "background_photo_thumbnail_link"
FROM "user"
    LEFT JOIN "moniest" ON "moniest"."user_id" = "user"."id"
    LEFT JOIN "subscription_info" ON "subscription_info"."moniest_id" = "moniest"."id"
WHERE "user"."username" = $1
    AND "user"."deleted" = false
`

type GetUserByUsernameRow struct {
	ID                           string          `json:"id"`
	MoniestID                    sql.NullString  `json:"moniest_id"`
	Name                         string          `json:"name"`
	Surname                      string          `json:"surname"`
	Username                     string          `json:"username"`
	EmailVerified                bool            `json:"email_verified"`
	Location                     sql.NullString  `json:"location"`
	CreatedAt                    time.Time       `json:"created_at"`
	UpdatedAt                    time.Time       `json:"updated_at"`
	Bio                          sql.NullString  `json:"bio"`
	Description                  sql.NullString  `json:"description"`
	Score                        sql.NullFloat64 `json:"score"`
	SubscriptionInfoID           sql.NullString  `json:"subscription_info_id"`
	Fee                          sql.NullFloat64 `json:"fee"`
	Message                      sql.NullString  `json:"message"`
	SubscriptionInfoUpdatedAt    sql.NullTime    `json:"subscription_info_updated_at"`
	ProfilePhotoLink             interface{}     `json:"profile_photo_link"`
	ProfilePhotoThumbnailLink    interface{}     `json:"profile_photo_thumbnail_link"`
	BackgroundPhotoLink          interface{}     `json:"background_photo_link"`
	BackgroundPhotoThumbnailLink interface{}     `json:"background_photo_thumbnail_link"`
}

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (GetUserByUsernameRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i GetUserByUsernameRow
	err := row.Scan(
		&i.ID,
		&i.MoniestID,
		&i.Name,
		&i.Surname,
		&i.Username,
		&i.EmailVerified,
		&i.Location,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Bio,
		&i.Description,
		&i.Score,
		&i.SubscriptionInfoID,
		&i.Fee,
		&i.Message,
		&i.SubscriptionInfoUpdatedAt,
		&i.ProfilePhotoLink,
		&i.ProfilePhotoThumbnailLink,
		&i.BackgroundPhotoLink,
		&i.BackgroundPhotoThumbnailLink,
	)
	return i, err
}

const setPassword = `-- name: SetPassword :exec
UPDATE "user"
SET password = $2
WHERE id = $1
`

type SetPasswordParams struct {
	ID       string `json:"id"`
	Password string `json:"password"`
}

func (q *Queries) SetPassword(ctx context.Context, arg SetPasswordParams) error {
	_, err := q.db.ExecContext(ctx, setPassword, arg.ID, arg.Password)
	return err
}

const setUsername = `-- name: SetUsername :exec
UPDATE "user"
SET username = $2
WHERE id = $1
`

type SetUsernameParams struct {
	ID       string `json:"id"`
	Username string `json:"username"`
}

func (q *Queries) SetUsername(ctx context.Context, arg SetUsernameParams) error {
	_, err := q.db.ExecContext(ctx, setUsername, arg.ID, arg.Username)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE "user"
SET name = $2,
    surname = $3,
    location = $4
WHERE id = $1
`

type UpdateUserParams struct {
	ID       string         `json:"id"`
	Name     string         `json:"name"`
	Surname  string         `json:"surname"`
	Location sql.NullString `json:"location"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.ID,
		arg.Name,
		arg.Surname,
		arg.Location,
	)
	return err
}

const verifyEmail = `-- name: VerifyEmail :exec
UPDATE "user"
SET email_verified = true
WHERE id = $1
`

func (q *Queries) VerifyEmail(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, verifyEmail, id)
	return err
}
