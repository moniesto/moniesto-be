// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "user" (
        id,
        name,
        surname,
        username,
        email,
        password
    )
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, name, surname, username, email, email_verified, password, location, created_at, updated_at
`

type CreateUserParams struct {
	ID       string `json:"id"`
	Name     string `json:"name"`
	Surname  string `json:"surname"`
	Username string `json:"username"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Name,
		arg.Surname,
		arg.Username,
		arg.Email,
		arg.Password,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Surname,
		&i.Username,
		&i.Email,
		&i.EmailVerified,
		&i.Password,
		&i.Location,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT (
        id,
        name,
        surname,
        username,
        email,
        email_verified,
        location,
        created_at,
        updated_at
    )
FROM "user"
    INNER JOIN "image" ON "image"."user_id" = "user"."id"
WHERE "user"."id" = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id string) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var column_1 interface{}
	err := row.Scan(&column_1)
	return column_1, err
}
