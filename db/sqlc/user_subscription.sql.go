// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: user_subscription.sql

package db

import (
	"context"
)

const createSubscription = `-- name: CreateSubscription :one
INSERT INTO "user_subscription" (
    id,
    user_id,
    moniest_id,
    created_at,
    updated_at
)
VALUES (
    $1, $2, $3, now(), now()
)
RETURNING id, user_id, moniest_id, active, created_at, updated_at
`

type CreateSubscriptionParams struct {
	ID        string `json:"id"`
	UserID    string `json:"user_id"`
	MoniestID string `json:"moniest_id"`
}

func (q *Queries) CreateSubscription(ctx context.Context, arg CreateSubscriptionParams) (UserSubscription, error) {
	row := q.db.QueryRowContext(ctx, createSubscription, arg.ID, arg.UserID, arg.MoniestID)
	var i UserSubscription
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.MoniestID,
		&i.Active,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const endsubscription = `-- name: Endsubscription :one
UPDATE "user_subscription" 
SET "deleted" = true,
    "updated_at" = now()
WHERE "user_id" = $1 AND "moniest_id" = $2
RETURNING id, user_id, moniest_id, active, created_at, updated_at
`

type EndsubscriptionParams struct {
	UserID    string `json:"user_id"`
	MoniestID string `json:"moniest_id"`
}

func (q *Queries) Endsubscription(ctx context.Context, arg EndsubscriptionParams) (UserSubscription, error) {
	row := q.db.QueryRowContext(ctx, endsubscription, arg.UserID, arg.MoniestID)
	var i UserSubscription
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.MoniestID,
		&i.Active,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
