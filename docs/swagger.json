{
    "swagger": "2.0",
    "info": {
        "contact": {}
    },
    "paths": {
        "/account/email/send_verification_email": {
            "post": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Email verification email sender",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "Send Verification Email",
                "parameters": [
                    {
                        "description": "redirect_url is required",
                        "name": "SendVerificationEmailBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.SendVerificationEmailRequest"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted"
                    },
                    "400": {
                        "description": "email already verified",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "user not found",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "406": {
                        "description": "invalid body",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/account/email/verify_email": {
            "post": {
                "description": "Verify email by token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "Verify Email",
                "parameters": [
                    {
                        "description": "token is required",
                        "name": "VerifyEmailBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.VerifyEmailRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.VerifyEmailResponse"
                        }
                    },
                    "400": {
                        "description": "already verified email",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "expired token",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "token not found | user not found",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "406": {
                        "description": "invalid body \u0026 token",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/account/login": {
            "post": {
                "description": "Login with [email \u0026 password] OR [username \u0026 password]",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "description": "identifier can be email OR username",
                        "name": "LoginBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.LoginResponse"
                        }
                    },
                    "403": {
                        "description": "wrong password",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "email OR username not found",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "406": {
                        "description": "invalid body \u0026 data",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/account/password": {
            "put": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Authenticated user password change",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Password"
                ],
                "summary": "Change Password",
                "parameters": [
                    {
                        "description": " ",
                        "name": "ChangePasswordBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ChangePasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "403": {
                        "description": "wrong password",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "406": {
                        "description": "invalid body \u0026 data",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/account/password/change_password": {
            "post": {
                "description": "Unauthenticated verify token \u0026 change password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Password"
                ],
                "summary": "Verify Token \u0026 Change Password",
                "parameters": [
                    {
                        "description": "token \u0026 new fiels are required",
                        "name": "VerifyTokenBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.VerifyPasswordResetRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "403": {
                        "description": "token is expired",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "reset token not found",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "406": {
                        "description": "invalid body \u0026 data",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/account/password/send_email": {
            "post": {
                "description": "Unauthenticated user send reset password email",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Password"
                ],
                "summary": "Send Reset Password Email",
                "parameters": [
                    {
                        "description": " ",
                        "name": "SendEmailBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.SendResetPasswordEmailRequest"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted"
                    },
                    "406": {
                        "description": "invalid body \u0026 data",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/account/password/verify_token": {
            "post": {
                "description": "Unauthenticated verify token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Password"
                ],
                "summary": "Verify Token",
                "parameters": [
                    {
                        "description": "token is required",
                        "name": "VerifyTokenBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.VerifyTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "403": {
                        "description": "token is expired",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "reset token not found",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "406": {
                        "description": "invalid body",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/account/register": {
            "post": {
                "description": "Register as user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Register",
                "parameters": [
                    {
                        "description": " ",
                        "name": "RegisterBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.RegisterResponse"
                        }
                    },
                    "403": {
                        "description": "wrong password",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "406": {
                        "description": "invalid body \u0026 data",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/account/username": {
            "patch": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Change username of the user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "Change Username",
                "parameters": [
                    {
                        "description": "new is required",
                        "name": "ChangeUsernameBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ChangeUsernameRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.ChangeUsernameResponse"
                        }
                    },
                    "403": {
                        "description": "username is already taken",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "406": {
                        "description": "invalid body or username",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/account/usernames/:username/check": {
            "get": {
                "description": "Check username is valid of not",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "Check Username",
                "parameters": [
                    {
                        "type": "string",
                        "description": "username",
                        "name": "username",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.CheckUsernameResponse"
                        }
                    },
                    "406": {
                        "description": "invalid username",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/assets/configs": {
            "get": {
                "description": "Get All Configs of system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Assets"
                ],
                "summary": "Get All Configs",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.GetConfigsResponse"
                        }
                    }
                }
            }
        },
        "/assets/error-codes": {
            "get": {
                "description": "Get All Error Codes in the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Assets"
                ],
                "summary": "Get Error Codes",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorMessagesType"
                        }
                    }
                }
            }
        },
        "/assets/validations": {
            "get": {
                "description": "Get Validation Configs of system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Assets"
                ],
                "summary": "Get Validation Configs",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.GetValidationConfigsResponse"
                        }
                    }
                }
            }
        },
        "/crypto/currencies": {
            "get": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Search crypto currencies by name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Crypto"
                ],
                "summary": "Crypto Currency Search",
                "parameters": [
                    {
                        "type": "string",
                        "description": "name",
                        "name": "name",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Currency"
                            }
                        }
                    },
                    "406": {
                        "description": "invalid name",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "server error \u0026 crypto api error",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/feedback": {
            "post": {
                "security": [
                    {
                        "\"\"": [],
                        "bearerAuth": []
                    }
                ],
                "description": "[AUTH OPTIONAL] Create Feedback as Authenticated or Anonymous",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Feedback"
                ],
                "summary": "Create Feedback",
                "parameters": [
                    {
                        "description": " ",
                        "name": "CreateFeedbackBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CreateFeedbackRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "406": {
                        "description": "invalid body \u0026 data",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/moniests": {
            "post": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Turn into moniest",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Moniest"
                ],
                "summary": "Be Moniest",
                "parameters": [
                    {
                        "description": " ",
                        "name": "CreateMoniestBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CreateMoniestRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.OwnUser"
                        }
                    },
                    "400": {
                        "description": "user is already moniest",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "forbidden operation: email is not verified",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "not found user",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "406": {
                        "description": "invalid body",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/moniests/:username/subscribe": {
            "post": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Subscribe to Moniest",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Moniest"
                ],
                "summary": "Subscribe to Moniest",
                "parameters": [
                    {
                        "type": "string",
                        "description": "moniest username",
                        "name": "username",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "already subscribed",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "subscribe own",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "moniest is not found",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/moniests/:username/unsubscribe": {
            "post": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Unsubscribe from Moniest",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Moniest"
                ],
                "summary": "Unsubscribe from Moniest",
                "parameters": [
                    {
                        "type": "string",
                        "description": "moniest username",
                        "name": "username",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "user not subscribed",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "unsubscribe own",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "moniest is not found",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/moniests/posts": {
            "post": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Create Crypto Post",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Post"
                ],
                "summary": "Create Post",
                "parameters": [
                    {
                        "description": "`description` is optional",
                        "name": "CreatePostBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CreatePostRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.CreatePostResponse"
                        }
                    },
                    "400": {
                        "description": "user is not moniest",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "406": {
                        "description": "invalid body",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/moniests/profile": {
            "patch": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Update Moniest Profile details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Moniest"
                ],
                "summary": "Update Moniest Profile",
                "parameters": [
                    {
                        "description": "all fields are optional",
                        "name": "UpdateMoniestBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UpdateMoniestProfileRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.OwnUser"
                        }
                    },
                    "403": {
                        "description": "user is not moniest",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "user is not found",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "406": {
                        "description": "invalid body | invalid bio | invalid desc | invalid fee | invalid message",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/:username": {
            "get": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "get user info with username",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get User by Username",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "username",
                        "name": "username",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'email' field will be visible if user request for own account",
                        "schema": {
                            "$ref": "#/definitions/model.User"
                        }
                    },
                    "404": {
                        "description": "not any user with this username",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "406": {
                        "description": "invalid username",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/profile": {
            "patch": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Update user profile [name, surname, location, profile photo, background photo]",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Update User Profile",
                "parameters": [
                    {
                        "description": "all fields are optional",
                        "name": "UpdateUserBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UpdateUserProfileRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.OwnUser"
                        }
                    },
                    "404": {
                        "description": "user not found",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "406": {
                        "description": "invalid body \u0026 data",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "clientError.ErrorMessagesType": {
            "type": "object",
            "additionalProperties": {
                "type": "string"
            }
        },
        "clientError.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "error_code": {
                    "type": "string"
                }
            }
        },
        "db.EntryPosition": {
            "type": "string",
            "enum": [
                "long",
                "short"
            ],
            "x-enum-varnames": [
                "EntryPositionLong",
                "EntryPositionShort"
            ]
        },
        "model.ChangePasswordRequest": {
            "type": "object",
            "required": [
                "new",
                "old"
            ],
            "properties": {
                "new": {
                    "type": "string"
                },
                "old": {
                    "type": "string"
                }
            }
        },
        "model.ChangeUsernameRequest": {
            "type": "object",
            "required": [
                "new"
            ],
            "properties": {
                "new": {
                    "type": "string"
                }
            }
        },
        "model.ChangeUsernameResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "model.CheckUsernameResponse": {
            "type": "object",
            "properties": {
                "validity": {
                    "type": "boolean"
                }
            }
        },
        "model.CreateFeedbackRequest": {
            "type": "object",
            "required": [
                "message"
            ],
            "properties": {
                "message": {
                    "type": "string"
                },
                "type": {
                    "description": "optional",
                    "type": "string"
                }
            }
        },
        "model.CreateMoniestRequest": {
            "type": "object",
            "required": [
                "card_id",
                "fee"
            ],
            "properties": {
                "bio": {
                    "description": "optional",
                    "type": "string"
                },
                "card_id": {
                    "type": "string"
                },
                "description": {
                    "description": "optional",
                    "type": "string"
                },
                "fee": {
                    "type": "number"
                },
                "message": {
                    "description": "optional",
                    "type": "string"
                }
            }
        },
        "model.CreatePostRequest": {
            "type": "object",
            "required": [
                "currency",
                "direction",
                "duration",
                "stop",
                "target1",
                "target2",
                "target3"
            ],
            "properties": {
                "currency": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "direction": {
                    "type": "string"
                },
                "duration": {
                    "type": "string"
                },
                "stop": {
                    "type": "number"
                },
                "target1": {
                    "type": "number"
                },
                "target2": {
                    "type": "number"
                },
                "target3": {
                    "type": "number"
                }
            }
        },
        "model.CreatePostResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "direction": {
                    "$ref": "#/definitions/db.EntryPosition"
                },
                "duration": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "moniest_id": {
                    "type": "string"
                },
                "score": {
                    "type": "number"
                },
                "start_price": {
                    "type": "number"
                },
                "stop": {
                    "type": "number"
                },
                "target1": {
                    "type": "number"
                },
                "target2": {
                    "type": "number"
                },
                "target3": {
                    "type": "number"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "model.Currency": {
            "type": "object",
            "properties": {
                "currency": {
                    "type": "string"
                },
                "price": {
                    "type": "string"
                }
            }
        },
        "model.GetConfigsResponse": {
            "type": "object",
            "properties": {
                "error_codes": {
                    "$ref": "#/definitions/clientError.ErrorMessagesType"
                },
                "validation": {
                    "$ref": "#/definitions/model.GetValidationConfigsResponse"
                }
            }
        },
        "model.GetValidationConfigsResponse": {
            "type": "object",
            "properties": {
                "email_regex": {
                    "type": "string"
                },
                "max_bio_lenght": {
                    "type": "integer"
                },
                "max_description_length": {
                    "type": "integer"
                },
                "max_subscription_message_length": {
                    "type": "integer"
                },
                "min_fee": {
                    "type": "number"
                },
                "password_length": {
                    "type": "integer"
                },
                "username_regex": {
                    "type": "string"
                }
            }
        },
        "model.LoginRequest": {
            "type": "object",
            "required": [
                "identifier",
                "password"
            ],
            "properties": {
                "identifier": {
                    "type": "string",
                    "minLength": 1
                },
                "password": {
                    "type": "string",
                    "minLength": 6
                }
            }
        },
        "model.LoginResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/model.OwnUser"
                }
            }
        },
        "model.Moniest": {
            "type": "object",
            "properties": {
                "bio": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "score": {
                    "type": "number"
                },
                "subscription_info": {
                    "$ref": "#/definitions/model.SubscriptionInfo"
                }
            }
        },
        "model.OwnUser": {
            "type": "object",
            "properties": {
                "background_photo_link": {
                    "type": "string"
                },
                "background_photo_thumbnail_link": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "email_verified": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "moniest": {
                    "$ref": "#/definitions/model.Moniest"
                },
                "name": {
                    "type": "string"
                },
                "profile_photo_link": {
                    "type": "string"
                },
                "profile_photo_thumbnail_link": {
                    "type": "string"
                },
                "surname": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "model.RegisterRequest": {
            "type": "object",
            "required": [
                "email",
                "name",
                "password",
                "surname",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "minLength": 1
                },
                "password": {
                    "type": "string"
                },
                "surname": {
                    "type": "string",
                    "minLength": 1
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "model.RegisterResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/model.OwnUser"
                }
            }
        },
        "model.SendResetPasswordEmailRequest": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "model.SendVerificationEmailRequest": {
            "type": "object",
            "required": [
                "redirect_url"
            ],
            "properties": {
                "redirect_url": {
                    "type": "string"
                }
            }
        },
        "model.SubscriptionInfo": {
            "type": "object",
            "properties": {
                "fee": {
                    "type": "number"
                },
                "message": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "model.UpdateMoniestProfileRequest": {
            "type": "object",
            "properties": {
                "bio": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "subscription_info": {
                    "$ref": "#/definitions/model.SubscriptionInfo"
                }
            }
        },
        "model.UpdateUserProfileRequest": {
            "type": "object",
            "properties": {
                "background_photo": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "profile_photo": {
                    "type": "string"
                },
                "surname": {
                    "type": "string"
                }
            }
        },
        "model.User": {
            "type": "object",
            "properties": {
                "background_photo_link": {
                    "type": "string"
                },
                "background_photo_thumbnail_link": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "email_verified": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "moniest": {
                    "$ref": "#/definitions/model.Moniest"
                },
                "name": {
                    "type": "string"
                },
                "profile_photo_link": {
                    "type": "string"
                },
                "profile_photo_thumbnail_link": {
                    "type": "string"
                },
                "surname": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "model.VerifyEmailRequest": {
            "type": "object",
            "required": [
                "token"
            ],
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "model.VerifyEmailResponse": {
            "type": "object",
            "properties": {
                "redirect_url": {
                    "type": "string"
                }
            }
        },
        "model.VerifyPasswordResetRequest": {
            "type": "object",
            "required": [
                "new",
                "token"
            ],
            "properties": {
                "new": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "model.VerifyTokenRequest": {
            "type": "object",
            "required": [
                "token"
            ],
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "bearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}