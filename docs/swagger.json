{
    "swagger": "2.0",
    "info": {
        "contact": {}
    },
    "paths": {
        "/account/email/send_verification_email": {
            "post": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Email verification email sender",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "Send Verification Email",
                "parameters": [
                    {
                        "description": "redirect_url is required",
                        "name": "SendVerificationEmailBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.SendVerificationEmailRequest"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted"
                    },
                    "400": {
                        "description": "email already verified",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "user not found",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "406": {
                        "description": "invalid body",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/account/email/verify_email": {
            "post": {
                "description": "Verify email by token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "Verify Email",
                "parameters": [
                    {
                        "description": "token is required",
                        "name": "VerifyEmailBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.VerifyEmailRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.VerifyEmailResponse"
                        }
                    },
                    "400": {
                        "description": "already verified email",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "expired token",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "token not found | user not found",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "406": {
                        "description": "invalid body \u0026 token",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/account/login": {
            "post": {
                "description": "Login with [email \u0026 password] OR [username \u0026 password]",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "description": "identifier can be email OR username",
                        "name": "LoginBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.LoginResponse"
                        }
                    },
                    "403": {
                        "description": "wrong password",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "email OR username not found",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "406": {
                        "description": "invalid body \u0026 data",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/account/password": {
            "put": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Authenticated user password change",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Password"
                ],
                "summary": "Change Password",
                "parameters": [
                    {
                        "description": " ",
                        "name": "ChangePasswordBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ChangePasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "403": {
                        "description": "wrong password",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "406": {
                        "description": "invalid body \u0026 data",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/account/password/change_password": {
            "post": {
                "description": "Unauthenticated verify token \u0026 change password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Password"
                ],
                "summary": "Verify Token \u0026 Change Password",
                "parameters": [
                    {
                        "description": "token \u0026 new fiels are required",
                        "name": "VerifyTokenBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.VerifyPasswordResetRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "403": {
                        "description": "token is expired",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "reset token not found",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "406": {
                        "description": "invalid body \u0026 data",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/account/password/send_email": {
            "post": {
                "description": "Unauthenticated user send reset password email",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Password"
                ],
                "summary": "Send Reset Password Email",
                "parameters": [
                    {
                        "description": " ",
                        "name": "SendEmailBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.SendResetPasswordEmailRequest"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted"
                    },
                    "406": {
                        "description": "invalid body \u0026 data",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/account/password/verify_token": {
            "post": {
                "description": "Unauthenticated verify token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Password"
                ],
                "summary": "Verify Token",
                "parameters": [
                    {
                        "description": "token is required",
                        "name": "VerifyTokenBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.VerifyTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "403": {
                        "description": "token is expired",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "reset token not found",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "406": {
                        "description": "invalid body",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/account/register": {
            "post": {
                "description": "Register as user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Register",
                "parameters": [
                    {
                        "description": " ",
                        "name": "RegisterBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.RegisterResponse"
                        }
                    },
                    "403": {
                        "description": "wrong password",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "406": {
                        "description": "invalid body \u0026 data",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/account/username": {
            "patch": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Change username of the user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "Change Username",
                "parameters": [
                    {
                        "description": "new is required",
                        "name": "ChangeUsernameBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ChangeUsernameRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.ChangeUsernameResponse"
                        }
                    },
                    "403": {
                        "description": "username is already taken",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "406": {
                        "description": "invalid body or username",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/account/usernames/:username/check": {
            "get": {
                "description": "Check username is valid of not",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "Check Username",
                "parameters": [
                    {
                        "type": "string",
                        "description": "username",
                        "name": "username",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.CheckUsernameResponse"
                        }
                    },
                    "406": {
                        "description": "invalid username",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/metrics": {
            "get": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Get Metrics of user, post, payments, payouts, feedbacks",
                "tags": [
                    "Admin"
                ],
                "summary": "Get Metrics",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.MetricsResponse"
                        }
                    },
                    "403": {
                        "description": "not admin",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/run/:runner": {
            "post": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Running key operations [`post-analyzer`, `moniest-analyzer`, `payout`, `detect-expired-pending-transaction`, `detect-expired-active-subscriptions`]",
                "tags": [
                    "Admin"
                ],
                "summary": "Runner",
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "403": {
                        "description": "not admin",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "runner type not found"
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/update_moniest_post_crypto_statistics": {
            "post": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Can update the Moniest Post Crypto Statistics manually",
                "tags": [
                    "Admin"
                ],
                "summary": "Update Moniest Post Crypto Statistics manually",
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "403": {
                        "description": "not admin",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/update_posts_status": {
            "post": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Can update the status of the posts manually",
                "tags": [
                    "Admin"
                ],
                "summary": "Update Posts status manually",
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "403": {
                        "description": "not admin",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/assets/configs": {
            "get": {
                "description": "Get All Configs of system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Assets"
                ],
                "summary": "Get All Configs",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.GetConfigsResponse"
                        }
                    }
                }
            }
        },
        "/assets/error-codes": {
            "get": {
                "description": "Get All Error Codes in the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Assets"
                ],
                "summary": "Get Error Codes",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorMessagesType"
                        }
                    }
                }
            }
        },
        "/assets/general-info": {
            "get": {
                "description": "Get General Information Configs",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Assets"
                ],
                "summary": "Get General Info Configs",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.GetGeneralInfoResponse"
                        }
                    }
                }
            }
        },
        "/assets/validations": {
            "get": {
                "description": "Get Validation Configs of system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Assets"
                ],
                "summary": "Get Validation Configs",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.GetValidationConfigsResponse"
                        }
                    }
                }
            }
        },
        "/content/moniests": {
            "get": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Get All moniests",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Content"
                ],
                "summary": "Get Content Moniests",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "default: 10 \u0026 max: 50",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "default: 0",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.UserAsContent"
                            }
                        }
                    },
                    "406": {
                        "description": "invalid body",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/content/moniests/search": {
            "get": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Search Moniest by their fullname \u0026 username",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Content"
                ],
                "summary": "Search Moniest",
                "parameters": [
                    {
                        "type": "string",
                        "description": "length min:1 max:30",
                        "name": "searchText",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "default: 10 \u0026 max: 50",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "default: 0",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.User"
                            }
                        }
                    },
                    "406": {
                        "description": "invalid body",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/content/posts": {
            "get": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Get Posts for timeline \u0026 explore",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Content"
                ],
                "summary": "Get Content Posts",
                "parameters": [
                    {
                        "type": "boolean",
                        "description": "default: true",
                        "name": "subscribed",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "default: true",
                        "name": "active",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "options: [pnl | created_at] default: pnl, only affect when subscription \u0026 active = false",
                        "name": "sortBy",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "default: 10 \u0026 max: 50",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "default: 0",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.GetContentPostResponse"
                            }
                        }
                    },
                    "406": {
                        "description": "invalid body",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/crypto/currencies": {
            "get": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Search crypto currencies by name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Crypto"
                ],
                "summary": "Crypto Currency Search",
                "parameters": [
                    {
                        "type": "string",
                        "description": "name",
                        "name": "name",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "market_type",
                        "name": "market_type",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Currency"
                            }
                        }
                    },
                    "406": {
                        "description": "invalid name",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "server error \u0026 crypto api error",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/feedback": {
            "post": {
                "security": [
                    {
                        "\"\"": [],
                        "bearerAuth": []
                    }
                ],
                "description": "[AUTH OPTIONAL] Create Feedback as Authenticated or Anonymous",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Feedback"
                ],
                "summary": "Create Feedback",
                "parameters": [
                    {
                        "description": "type is optional",
                        "name": "CreateFeedbackBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CreateFeedbackRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "406": {
                        "description": "invalid body \u0026 data",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Health Check",
                "tags": [
                    "Health"
                ],
                "summary": "HealthCheck",
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/moniests": {
            "post": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Turn into moniest",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Moniest"
                ],
                "summary": "Be Moniest",
                "parameters": [
                    {
                        "description": " ",
                        "name": "CreateMoniestBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CreateMoniestRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.OwnUser"
                        }
                    },
                    "400": {
                        "description": "user is already moniest",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "forbidden operation: email is not verified",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "not found user",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "406": {
                        "description": "invalid body",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/moniests/:username/posts": {
            "get": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Get Posts of Moniest [active or all]",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Post"
                ],
                "summary": "Get Moniest Posts",
                "parameters": [
                    {
                        "type": "string",
                        "description": "moniest username",
                        "name": "username",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "default: false, true: only live(active), false: all posts",
                        "name": "active",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "default: 10 \u0026 max: 50",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "default: 0",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.GetContentPostResponse"
                            }
                        }
                    },
                    "403": {
                        "description": "forbidden access (when not subscribed, but asks for active posts)",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "no moniest with this username",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "406": {
                        "description": "invalid params",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/moniests/:username/subscribe": {
            "post": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Subscribe to Moniest",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Moniest"
                ],
                "summary": "Subscribe to Moniest",
                "parameters": [
                    {
                        "type": "string",
                        "description": "moniest username",
                        "name": "username",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "all fields are required",
                        "name": "UpdateMoniestBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.SubscribeMoniestRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.SubscribeMoniestResponse"
                        }
                    },
                    "400": {
                        "description": "already subscribed",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "subscribe own",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "moniest is not found",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/moniests/:username/subscribers": {
            "get": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Get Subscribers of Moniest",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Moniest"
                ],
                "summary": "Get Subscribers",
                "parameters": [
                    {
                        "type": "string",
                        "description": "moniest username",
                        "name": "username",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "default: 10 \u0026 max: 50",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "default: 0",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.User"
                            }
                        }
                    },
                    "404": {
                        "description": "moniest not found with this username",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "406": {
                        "description": "invalid query params",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/moniests/:username/subscription-info": {
            "get": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Get user subscription info",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Moniest"
                ],
                "summary": "Get User Subscribe info",
                "parameters": [
                    {
                        "type": "string",
                        "description": "moniest username",
                        "name": "username",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "subscribed: true | false, pending: true | false | and other details based on these fields",
                        "schema": {
                            "$ref": "#/definitions/model.GetSubscriptionInfoResponse"
                        }
                    },
                    "404": {
                        "description": "moniest not found with this username",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/moniests/:username/unsubscribe": {
            "post": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Unsubscribe from Moniest",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Moniest"
                ],
                "summary": "Unsubscribe from Moniest",
                "parameters": [
                    {
                        "type": "string",
                        "description": "moniest username",
                        "name": "username",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "user not subscribed",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "unsubscribe own",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "moniest is not found",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/moniests/payout": {
            "get": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Get Moniest Payout Info [binance id]",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Moniest"
                ],
                "summary": "Get Moniest Payout Info",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.GetMoniestPayoutInfos"
                        }
                    },
                    "403": {
                        "description": "user is not moniest",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "user is not found",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Update Moniest Payout Info [binance id]",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Moniest"
                ],
                "summary": "Update Moniest Payout Info",
                "parameters": [
                    {
                        "description": "binance_id is required",
                        "name": "UpdateMoniestBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UpdateMoniestPayoutInfo"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.GetMoniestPayoutInfos"
                        }
                    },
                    "403": {
                        "description": "user is not moniest",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "user is not found",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "406": {
                        "description": "invalid body",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/moniests/posts": {
            "post": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Create Crypto Post",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Post"
                ],
                "summary": "Create Post",
                "parameters": [
                    {
                        "description": "`description` is optional",
                        "name": "CreatePostBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CreatePostRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.CreatePostResponse"
                        }
                    },
                    "400": {
                        "description": "user is not moniest",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "406": {
                        "description": "invalid body",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/moniests/posts/calculate-pnl-roi": {
            "post": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Calculate PNL and ROI based on the start price, target price, leverage, direction",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Post"
                ],
                "summary": "Calculate PNL and ROI",
                "parameters": [
                    {
                        "description": "all required",
                        "name": "CalculatePnlRoiBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CalculatePnlRoiRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.CalculatePnlRoiResponse"
                        }
                    },
                    "406": {
                        "description": "invalid body",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/moniests/profile": {
            "patch": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Update Moniest Profile details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Moniest"
                ],
                "summary": "Update Moniest Profile",
                "parameters": [
                    {
                        "description": "all fields are optional",
                        "name": "UpdateMoniestBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UpdateMoniestProfileRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.OwnUser"
                        }
                    },
                    "403": {
                        "description": "user is not moniest",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "user is not found",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "406": {
                        "description": "invalid body | invalid bio | invalid desc | invalid fee | invalid message",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/payment/binance/transactions/check/:transaction_id": {
            "post": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Check Transaction ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payment"
                ],
                "summary": "Check Transaction ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "transaction ID",
                        "name": "transaction_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "transactionID not found",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/:username": {
            "get": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "get user info with username",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get User by Username",
                "parameters": [
                    {
                        "type": "string",
                        "description": "username",
                        "name": "username",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'email' field will be visible if user request for own account",
                        "schema": {
                            "$ref": "#/definitions/model.User"
                        }
                    },
                    "404": {
                        "description": "not any user with this username",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "406": {
                        "description": "invalid username",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/:username/subscriptions": {
            "get": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Get subscribed Users",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get Subscriptions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "username",
                        "name": "username",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "default: 10 \u0026 max: 50",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "default: 0",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.User"
                            }
                        }
                    },
                    "404": {
                        "description": "user not found",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "406": {
                        "description": "invalid body",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/:username/summary-stats": {
            "get": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Get User \u0026 Moniest Stats",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get Stats",
                "parameters": [
                    {
                        "type": "string",
                        "description": "username",
                        "name": "username",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "when user is not moniest, it will NOT return `subscriber_count` and `post_count`",
                        "schema": {
                            "$ref": "#/definitions/model.MoniestStatResponse"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/profile": {
            "patch": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Update user profile [fullname, location, profile photo, background photo]",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Update User Profile",
                "parameters": [
                    {
                        "description": "all fields are optional",
                        "name": "UpdateUserBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UpdateUserProfileRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.OwnUser"
                        }
                    },
                    "404": {
                        "description": "user not found",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "406": {
                        "description": "invalid body \u0026 data",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "$ref": "#/definitions/clientError.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "clientError.ErrorMessagesType": {
            "type": "object",
            "additionalProperties": {
                "type": "string"
            }
        },
        "clientError.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "error_code": {
                    "type": "string"
                }
            }
        },
        "db.Direction": {
            "type": "string",
            "enum": [
                "long",
                "short"
            ],
            "x-enum-varnames": [
                "DirectionLong",
                "DirectionShort"
            ]
        },
        "db.FeedbackMetricsRow": {
            "type": "object",
            "properties": {
                "num_all_feedbacks": {},
                "num_solved_feedbacks": {},
                "num_unsolved_feedbacks": {}
            }
        },
        "db.GetFeedbacksRow": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "solved": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "db.PaymentMetricsRow": {
            "type": "object",
            "properties": {
                "fail_payment_amount": {
                    "type": "number"
                },
                "num_fail_payment": {
                    "type": "integer"
                },
                "num_pending_payment": {
                    "type": "integer"
                },
                "num_success_payment": {
                    "type": "integer"
                },
                "pending_payment_amount": {
                    "type": "number"
                },
                "success_payment_amount": {
                    "type": "number"
                }
            }
        },
        "db.PayoutMetricsRow": {
            "type": "object",
            "properties": {
                "fail_payouts_amount": {
                    "type": "number"
                },
                "num_fail_payouts": {
                    "type": "integer"
                },
                "num_payouts": {
                    "type": "integer"
                },
                "num_pending_payouts": {
                    "type": "integer"
                },
                "num_refund_fail_payouts": {
                    "type": "integer"
                },
                "num_refund_payouts": {
                    "type": "integer"
                },
                "num_success_payouts": {
                    "type": "integer"
                },
                "num_unique_moniests": {
                    "type": "integer"
                },
                "num_unique_transactions": {
                    "type": "integer"
                },
                "num_unique_users": {
                    "type": "integer"
                },
                "pending_payouts_amount": {
                    "type": "number"
                },
                "pending_payouts_amount_after_cut": {
                    "type": "number"
                },
                "refund_fail_payouts_amount": {
                    "type": "number"
                },
                "refund_payouts_amount": {
                    "type": "number"
                },
                "refund_payouts_amount_after_cut": {
                    "type": "number"
                },
                "success_payouts_amount": {
                    "type": "number"
                },
                "success_payouts_amount_after_cut": {
                    "type": "number"
                }
            }
        },
        "db.PostCryptoMarketType": {
            "type": "string",
            "enum": [
                "spot",
                "futures"
            ],
            "x-enum-varnames": [
                "PostCryptoMarketTypeSpot",
                "PostCryptoMarketTypeFutures"
            ]
        },
        "db.PostCryptoStatus": {
            "type": "string",
            "enum": [
                "pending",
                "fail",
                "success"
            ],
            "x-enum-varnames": [
                "PostCryptoStatusPending",
                "PostCryptoStatusFail",
                "PostCryptoStatusSuccess"
            ]
        },
        "db.PostMetricsRow": {
            "type": "object",
            "properties": {
                "num_fail_posts": {
                    "type": "integer"
                },
                "num_finished_posts": {
                    "type": "integer"
                },
                "num_futures_posts": {
                    "type": "integer"
                },
                "num_pending_posts": {
                    "type": "integer"
                },
                "num_spot_posts": {
                    "type": "integer"
                },
                "num_success_posts": {
                    "type": "integer"
                },
                "num_total_posts": {
                    "type": "integer"
                },
                "num_unfinished_posts": {
                    "type": "integer"
                },
                "num_unique_moniests": {
                    "type": "integer"
                }
            }
        },
        "db.UserLanguage": {
            "type": "string",
            "enum": [
                "en",
                "tr"
            ],
            "x-enum-varnames": [
                "UserLanguageEn",
                "UserLanguageTr"
            ]
        },
        "db.UserMetricsRow": {
            "type": "object",
            "properties": {
                "num_active_subscriptions": {
                    "type": "integer"
                },
                "num_moniests": {
                    "type": "integer"
                },
                "num_users": {
                    "type": "integer"
                }
            }
        },
        "model.CalculatePnlRoiRequest": {
            "type": "object",
            "properties": {
                "direction": {
                    "$ref": "#/definitions/db.Direction"
                },
                "leverage": {
                    "type": "integer"
                },
                "start_price": {
                    "type": "number"
                },
                "take_profit": {
                    "type": "number"
                }
            }
        },
        "model.CalculatePnlRoiResponse": {
            "type": "object",
            "properties": {
                "pnl": {
                    "type": "number"
                },
                "roi": {
                    "type": "number"
                }
            }
        },
        "model.ChangePasswordRequest": {
            "type": "object",
            "required": [
                "new",
                "old"
            ],
            "properties": {
                "new": {
                    "type": "string"
                },
                "old": {
                    "type": "string"
                }
            }
        },
        "model.ChangeUsernameRequest": {
            "type": "object",
            "required": [
                "new"
            ],
            "properties": {
                "new": {
                    "type": "string"
                }
            }
        },
        "model.ChangeUsernameResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "model.CheckUsernameResponse": {
            "type": "object",
            "properties": {
                "validity": {
                    "type": "boolean"
                }
            }
        },
        "model.CreateFeedbackRequest": {
            "type": "object",
            "required": [
                "message"
            ],
            "properties": {
                "message": {
                    "type": "string"
                },
                "type": {
                    "description": "optional",
                    "type": "string"
                }
            }
        },
        "model.CreateMoniestRequest": {
            "type": "object",
            "required": [
                "binance_id",
                "bio",
                "fee"
            ],
            "properties": {
                "binance_id": {
                    "type": "string"
                },
                "bio": {
                    "type": "string"
                },
                "description": {
                    "description": "optional",
                    "type": "string"
                },
                "fee": {
                    "type": "number"
                },
                "message": {
                    "description": "optional",
                    "type": "string"
                }
            }
        },
        "model.CreatePostRequest": {
            "type": "object",
            "required": [
                "currency",
                "direction",
                "duration",
                "market_type",
                "stop",
                "take_profit"
            ],
            "properties": {
                "currency": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "direction": {
                    "type": "string"
                },
                "duration": {
                    "type": "string"
                },
                "leverage": {
                    "type": "integer"
                },
                "market_type": {
                    "type": "string"
                },
                "stop": {
                    "type": "number"
                },
                "take_profit": {
                    "type": "number"
                },
                "target1": {
                    "type": "number"
                },
                "target2": {
                    "type": "number"
                },
                "target3": {
                    "type": "number"
                }
            }
        },
        "model.CreatePostResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "direction": {
                    "$ref": "#/definitions/db.Direction"
                },
                "duration": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "leverage": {
                    "type": "integer"
                },
                "market_type": {
                    "$ref": "#/definitions/db.PostCryptoMarketType"
                },
                "moniest_id": {
                    "type": "string"
                },
                "pnl": {
                    "type": "number"
                },
                "roi": {
                    "type": "number"
                },
                "start_price": {
                    "type": "number"
                },
                "stop": {
                    "type": "number"
                },
                "take_profit": {
                    "type": "number"
                },
                "target1": {
                    "type": "number"
                },
                "target2": {
                    "type": "number"
                },
                "target3": {
                    "type": "number"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "model.CryptoPostStatistics": {
            "type": "object",
            "properties": {
                "pnl_30days": {
                    "type": "number"
                },
                "pnl_7days": {
                    "type": "number"
                },
                "pnl_total": {
                    "type": "number"
                },
                "roi_30days": {
                    "type": "number"
                },
                "roi_7days": {
                    "type": "number"
                },
                "roi_total": {
                    "type": "number"
                },
                "win_rate_30days": {
                    "type": "number"
                },
                "win_rate_7days": {
                    "type": "number"
                },
                "win_rate_total": {
                    "type": "number"
                }
            }
        },
        "model.Currency": {
            "type": "object",
            "properties": {
                "currency": {
                    "type": "string"
                },
                "price": {
                    "type": "string"
                }
            }
        },
        "model.Feedback": {
            "type": "object",
            "properties": {
                "feedbacks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/db.GetFeedbacksRow"
                    }
                },
                "metrics": {
                    "$ref": "#/definitions/db.FeedbackMetricsRow"
                }
            }
        },
        "model.FinancialMetrics": {
            "type": "object",
            "properties": {
                "estimated_profit": {
                    "type": "number"
                },
                "payments": {
                    "type": "number"
                },
                "profit": {
                    "type": "number"
                }
            }
        },
        "model.GetConfigsResponse": {
            "type": "object",
            "properties": {
                "error_codes": {
                    "$ref": "#/definitions/clientError.ErrorMessagesType"
                },
                "general_info": {
                    "$ref": "#/definitions/model.GetGeneralInfoResponse"
                },
                "validation": {
                    "$ref": "#/definitions/model.GetValidationConfigsResponse"
                }
            }
        },
        "model.GetContentPostResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "direction": {
                    "$ref": "#/definitions/db.Direction"
                },
                "duration": {
                    "type": "string"
                },
                "finished": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "leverage": {
                    "type": "integer"
                },
                "market_type": {
                    "$ref": "#/definitions/db.PostCryptoMarketType"
                },
                "pnl": {
                    "type": "number"
                },
                "roi": {
                    "type": "number"
                },
                "start_price": {
                    "type": "number"
                },
                "status": {
                    "$ref": "#/definitions/db.PostCryptoStatus"
                },
                "stop": {
                    "type": "number"
                },
                "take_profit": {
                    "type": "number"
                },
                "target1": {
                    "type": "number"
                },
                "target2": {
                    "type": "number"
                },
                "target3": {
                    "type": "number"
                },
                "updated_at": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/model.User"
                }
            }
        },
        "model.GetGeneralInfoResponse": {
            "type": "object",
            "properties": {
                "operation_fee_percentage": {
                    "type": "number"
                }
            }
        },
        "model.GetMoniestPayoutInfos": {
            "type": "object",
            "properties": {
                "payout_methods": {
                    "$ref": "#/definitions/model.PayoutMethods"
                }
            }
        },
        "model.GetSubscriptionInfoResponse": {
            "type": "object",
            "properties": {
                "checkout_link": {
                    "type": "string"
                },
                "deep_link": {
                    "type": "string"
                },
                "pending": {
                    "type": "boolean"
                },
                "qrcode_link": {
                    "type": "string"
                },
                "subscribed": {
                    "type": "boolean"
                },
                "subscription_info": {
                    "description": "when subscribed = true",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.SubscriptionInfo"
                        }
                    ]
                },
                "timeout": {
                    "description": "when pending = true",
                    "type": "integer"
                },
                "universal_link": {
                    "type": "string"
                }
            }
        },
        "model.GetValidationConfigsResponse": {
            "type": "object",
            "properties": {
                "email_regex": {
                    "type": "string"
                },
                "long_max_take_profit_multiplier": {
                    "type": "integer"
                },
                "max_bio_lenght": {
                    "type": "integer"
                },
                "max_description_length": {
                    "type": "integer"
                },
                "max_duration_day": {
                    "type": "integer"
                },
                "max_fee": {
                    "type": "number"
                },
                "max_fullname_length": {
                    "type": "integer"
                },
                "max_location_length": {
                    "type": "integer"
                },
                "max_password_length": {
                    "type": "integer"
                },
                "max_subscription_message_length": {
                    "type": "integer"
                },
                "min_fee": {
                    "type": "number"
                },
                "min_password_length": {
                    "type": "integer"
                },
                "short_max_stop_multiplier": {
                    "type": "integer"
                },
                "username_regex": {
                    "type": "string"
                }
            }
        },
        "model.LoginRequest": {
            "type": "object",
            "required": [
                "identifier",
                "password"
            ],
            "properties": {
                "identifier": {
                    "type": "string",
                    "minLength": 1
                },
                "password": {
                    "type": "string",
                    "minLength": 6
                }
            }
        },
        "model.LoginResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/model.OwnUser"
                }
            }
        },
        "model.MetricsResponse": {
            "type": "object",
            "properties": {
                "feedback": {
                    "$ref": "#/definitions/model.Feedback"
                },
                "financial_metrics": {
                    "$ref": "#/definitions/model.FinancialMetrics"
                },
                "payment_metrics": {
                    "$ref": "#/definitions/db.PaymentMetricsRow"
                },
                "payout_metrics": {
                    "$ref": "#/definitions/db.PayoutMetricsRow"
                },
                "post_metrics": {
                    "$ref": "#/definitions/db.PostMetricsRow"
                },
                "user_metrics": {
                    "$ref": "#/definitions/db.UserMetricsRow"
                }
            }
        },
        "model.Moniest": {
            "type": "object",
            "properties": {
                "bio": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "post_statistics": {
                    "$ref": "#/definitions/model.CryptoPostStatistics"
                },
                "subscription_info": {
                    "$ref": "#/definitions/model.MoniestSubscriptionInfo"
                }
            }
        },
        "model.MoniestAsContent": {
            "type": "object",
            "properties": {
                "bio": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "post_statistics": {
                    "$ref": "#/definitions/model.CryptoPostStatistics"
                },
                "subscriber_count": {
                    "type": "integer"
                },
                "subscription_info": {
                    "$ref": "#/definitions/model.MoniestSubscriptionInfo"
                }
            }
        },
        "model.MoniestStatResponse": {
            "type": "object",
            "properties": {
                "post_count": {
                    "type": "integer"
                },
                "subscriber_count": {
                    "type": "integer"
                },
                "subscription_count": {
                    "type": "integer"
                }
            }
        },
        "model.MoniestSubscriptionInfo": {
            "type": "object",
            "properties": {
                "fee": {
                    "type": "number"
                },
                "message": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "model.OwnUser": {
            "type": "object",
            "properties": {
                "background_photo_link": {
                    "type": "string"
                },
                "background_photo_thumbnail_link": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "email_verified": {
                    "type": "boolean"
                },
                "fullname": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "language": {
                    "$ref": "#/definitions/db.UserLanguage"
                },
                "location": {
                    "type": "string"
                },
                "moniest": {
                    "$ref": "#/definitions/model.Moniest"
                },
                "profile_photo_link": {
                    "type": "string"
                },
                "profile_photo_thumbnail_link": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "model.PayoutMethodBinance": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "model.PayoutMethods": {
            "type": "object",
            "properties": {
                "binance": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.PayoutMethodBinance"
                    }
                }
            }
        },
        "model.RegisterRequest": {
            "type": "object",
            "required": [
                "email",
                "fullname",
                "language",
                "password",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "fullname": {
                    "type": "string",
                    "minLength": 1
                },
                "language": {
                    "$ref": "#/definitions/db.UserLanguage"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "model.RegisterResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/model.OwnUser"
                }
            }
        },
        "model.SendResetPasswordEmailRequest": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "model.SendVerificationEmailRequest": {
            "type": "object",
            "required": [
                "redirect_url"
            ],
            "properties": {
                "redirect_url": {
                    "type": "string"
                }
            }
        },
        "model.SubscribeMoniestRequest": {
            "type": "object",
            "required": [
                "cancelURL",
                "number_of_months",
                "returnURL"
            ],
            "properties": {
                "cancelURL": {
                    "type": "string"
                },
                "number_of_months": {
                    "type": "integer",
                    "minimum": 1
                },
                "returnURL": {
                    "type": "string"
                }
            }
        },
        "model.SubscribeMoniestResponse": {
            "type": "object",
            "properties": {
                "checkout_link": {
                    "type": "string"
                },
                "deep_link": {
                    "type": "string"
                },
                "qrcode_link": {
                    "type": "string"
                },
                "universal_link": {
                    "type": "string"
                }
            }
        },
        "model.SubscriptionInfo": {
            "type": "object",
            "properties": {
                "payer_id": {
                    "type": "string"
                },
                "subscribed_fee": {
                    "type": "number"
                },
                "subscription_end_date": {
                    "type": "string"
                },
                "subscription_start_date": {
                    "type": "string"
                }
            }
        },
        "model.UpdateMoniestPayoutInfo": {
            "type": "object",
            "required": [
                "binance_id"
            ],
            "properties": {
                "binance_id": {
                    "type": "string"
                }
            }
        },
        "model.UpdateMoniestProfileRequest": {
            "type": "object",
            "properties": {
                "bio": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "subscription_info": {
                    "$ref": "#/definitions/model.MoniestSubscriptionInfo"
                }
            }
        },
        "model.UpdateUserProfileRequest": {
            "type": "object",
            "properties": {
                "background_photo": {
                    "type": "string"
                },
                "fullname": {
                    "type": "string"
                },
                "language": {
                    "$ref": "#/definitions/db.UserLanguage"
                },
                "location": {
                    "type": "string"
                },
                "profile_photo": {
                    "type": "string"
                }
            }
        },
        "model.User": {
            "type": "object",
            "properties": {
                "background_photo_link": {
                    "type": "string"
                },
                "background_photo_thumbnail_link": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "email_verified": {
                    "type": "boolean"
                },
                "fullname": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "moniest": {
                    "$ref": "#/definitions/model.Moniest"
                },
                "profile_photo_link": {
                    "type": "string"
                },
                "profile_photo_thumbnail_link": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "model.UserAsContent": {
            "type": "object",
            "properties": {
                "background_photo_link": {
                    "type": "string"
                },
                "background_photo_thumbnail_link": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "email_verified": {
                    "type": "boolean"
                },
                "fullname": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "moniest": {
                    "$ref": "#/definitions/model.MoniestAsContent"
                },
                "profile_photo_link": {
                    "type": "string"
                },
                "profile_photo_thumbnail_link": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "model.VerifyEmailRequest": {
            "type": "object",
            "required": [
                "token"
            ],
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "model.VerifyEmailResponse": {
            "type": "object",
            "properties": {
                "redirect_url": {
                    "type": "string"
                }
            }
        },
        "model.VerifyPasswordResetRequest": {
            "type": "object",
            "required": [
                "new",
                "token"
            ],
            "properties": {
                "new": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "model.VerifyTokenRequest": {
            "type": "object",
            "required": [
                "token"
            ],
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "bearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}