definitions:
  clientError.ErrorMessagesType:
    additionalProperties:
      type: string
    type: object
  clientError.ErrorResponse:
    properties:
      error:
        type: string
      error_code:
        type: string
    type: object
  db.Direction:
    enum:
    - long
    - short
    type: string
    x-enum-varnames:
    - DirectionLong
    - DirectionShort
  db.PostCryptoMarketType:
    enum:
    - spot
    - futures
    type: string
    x-enum-varnames:
    - PostCryptoMarketTypeSpot
    - PostCryptoMarketTypeFutures
  db.PostCryptoStatus:
    enum:
    - pending
    - fail
    - success
    type: string
    x-enum-varnames:
    - PostCryptoStatusPending
    - PostCryptoStatusFail
    - PostCryptoStatusSuccess
  db.UserLanguage:
    enum:
    - en
    - tr
    type: string
    x-enum-varnames:
    - UserLanguageEn
    - UserLanguageTr
  model.ChangePasswordRequest:
    properties:
      new:
        type: string
      old:
        type: string
    required:
    - new
    - old
    type: object
  model.ChangeUsernameRequest:
    properties:
      new:
        type: string
    required:
    - new
    type: object
  model.ChangeUsernameResponse:
    properties:
      token:
        type: string
    type: object
  model.CheckUsernameResponse:
    properties:
      validity:
        type: boolean
    type: object
  model.CreateFeedbackRequest:
    properties:
      message:
        type: string
      type:
        description: optional
        type: string
    required:
    - message
    type: object
  model.CreateMoniestRequest:
    properties:
      binance_id:
        type: string
      bio:
        type: string
      description:
        description: optional
        type: string
      fee:
        type: number
      message:
        description: optional
        type: string
    required:
    - binance_id
    - bio
    - fee
    type: object
  model.CreatePostRequest:
    properties:
      currency:
        type: string
      description:
        type: string
      direction:
        type: string
      duration:
        type: string
      leverage:
        type: integer
      market_type:
        type: string
      stop:
        type: number
      take_profit:
        type: number
      target1:
        type: number
      target2:
        type: number
      target3:
        type: number
    required:
    - currency
    - direction
    - duration
    - market_type
    - stop
    - take_profit
    type: object
  model.CreatePostResponse:
    properties:
      created_at:
        type: string
      currency:
        type: string
      description:
        type: string
      direction:
        $ref: '#/definitions/db.Direction'
      duration:
        type: string
      id:
        type: string
      leverage:
        type: integer
      market_type:
        $ref: '#/definitions/db.PostCryptoMarketType'
      moniest_id:
        type: string
      pnl:
        type: number
      roi:
        type: number
      start_price:
        type: number
      stop:
        type: number
      take_profit:
        type: number
      target1:
        type: number
      target2:
        type: number
      target3:
        type: number
      updated_at:
        type: string
    type: object
  model.CryptoPostStatistics:
    properties:
      pnl_7days:
        type: number
      pnl_30days:
        type: number
      pnl_total:
        type: number
      roi_7days:
        type: number
      roi_30days:
        type: number
      roi_total:
        type: number
      win_rate_7days:
        type: number
      win_rate_30days:
        type: number
      win_rate_total:
        type: number
    type: object
  model.Currency:
    properties:
      currency:
        type: string
      price:
        type: string
    type: object
  model.GetConfigsResponse:
    properties:
      error_codes:
        $ref: '#/definitions/clientError.ErrorMessagesType'
      general_info:
        $ref: '#/definitions/model.GetGeneralInfoResponse'
      validation:
        $ref: '#/definitions/model.GetValidationConfigsResponse'
    type: object
  model.GetContentPostResponse:
    properties:
      created_at:
        type: string
      currency:
        type: string
      description:
        type: string
      direction:
        $ref: '#/definitions/db.Direction'
      duration:
        type: string
      finished:
        type: boolean
      id:
        type: string
      leverage:
        type: integer
      market_type:
        $ref: '#/definitions/db.PostCryptoMarketType'
      pnl:
        type: number
      roi:
        type: number
      start_price:
        type: number
      status:
        $ref: '#/definitions/db.PostCryptoStatus'
      stop:
        type: number
      take_profit:
        type: number
      target1:
        type: number
      target2:
        type: number
      target3:
        type: number
      updated_at:
        type: string
      user:
        $ref: '#/definitions/model.User'
    type: object
  model.GetGeneralInfoResponse:
    properties:
      operation_fee_percentage:
        type: number
    type: object
  model.GetMoniestPayoutInfos:
    properties:
      payout_methods:
        $ref: '#/definitions/model.PayoutMethods'
    type: object
  model.GetSubscriptionInfoResponse:
    properties:
      checkout_link:
        type: string
      deep_link:
        type: string
      pending:
        type: boolean
      qrcode_link:
        type: string
      subscribed:
        type: boolean
      subscription_info:
        allOf:
        - $ref: '#/definitions/model.SubscriptionInfo'
        description: when subscribed = true
      timeout:
        description: when pending = true
        type: integer
      universal_link:
        type: string
    type: object
  model.GetValidationConfigsResponse:
    properties:
      email_regex:
        type: string
      long_max_take_profit_multiplier:
        type: integer
      max_bio_lenght:
        type: integer
      max_description_length:
        type: integer
      max_duration_day:
        type: integer
      max_fullname_length:
        type: integer
      max_location_length:
        type: integer
      max_subscription_message_length:
        type: integer
      min_fee:
        type: number
      password_length:
        type: integer
      short_max_stop_multiplier:
        type: integer
      username_regex:
        type: string
    type: object
  model.LoginRequest:
    properties:
      identifier:
        minLength: 1
        type: string
      password:
        minLength: 6
        type: string
    required:
    - identifier
    - password
    type: object
  model.LoginResponse:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/model.OwnUser'
    type: object
  model.Moniest:
    properties:
      bio:
        type: string
      description:
        type: string
      post_statistics:
        $ref: '#/definitions/model.CryptoPostStatistics'
      subscription_info:
        $ref: '#/definitions/model.MoniestSubscriptionInfo'
    type: object
  model.MoniestAsContent:
    properties:
      bio:
        type: string
      description:
        type: string
      post_statistics:
        $ref: '#/definitions/model.CryptoPostStatistics'
      subscriber_count:
        type: integer
      subscription_info:
        $ref: '#/definitions/model.MoniestSubscriptionInfo'
    type: object
  model.MoniestStatResponse:
    properties:
      post_count:
        type: integer
      subscriber_count:
        type: integer
      subscription_count:
        type: integer
    type: object
  model.MoniestSubscriptionInfo:
    properties:
      fee:
        type: number
      message:
        type: string
      updated_at:
        type: string
    type: object
  model.OwnUser:
    properties:
      background_photo_link:
        type: string
      background_photo_thumbnail_link:
        type: string
      created_at:
        type: string
      email:
        type: string
      email_verified:
        type: boolean
      fullname:
        type: string
      id:
        type: string
      language:
        $ref: '#/definitions/db.UserLanguage'
      location:
        type: string
      moniest:
        $ref: '#/definitions/model.Moniest'
      profile_photo_link:
        type: string
      profile_photo_thumbnail_link:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  model.PayoutMethodBinance:
    properties:
      type:
        type: string
      value:
        type: string
    type: object
  model.PayoutMethods:
    properties:
      binance:
        items:
          $ref: '#/definitions/model.PayoutMethodBinance'
        type: array
    type: object
  model.RegisterRequest:
    properties:
      email:
        type: string
      fullname:
        minLength: 1
        type: string
      language:
        $ref: '#/definitions/db.UserLanguage'
      password:
        type: string
      username:
        type: string
    required:
    - email
    - fullname
    - language
    - password
    - username
    type: object
  model.RegisterResponse:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/model.OwnUser'
    type: object
  model.SendResetPasswordEmailRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  model.SendVerificationEmailRequest:
    properties:
      redirect_url:
        type: string
    required:
    - redirect_url
    type: object
  model.SubscribeMoniestRequest:
    properties:
      cancelURL:
        type: string
      number_of_months:
        minimum: 1
        type: integer
      returnURL:
        type: string
    required:
    - cancelURL
    - number_of_months
    - returnURL
    type: object
  model.SubscribeMoniestResponse:
    properties:
      checkout_link:
        type: string
      deep_link:
        type: string
      qrcode_link:
        type: string
      universal_link:
        type: string
    type: object
  model.SubscriptionInfo:
    properties:
      payer_id:
        type: string
      subscribed_fee:
        type: number
      subscription_end_date:
        type: string
      subscription_start_date:
        type: string
    type: object
  model.UpdateMoniestPayoutInfo:
    properties:
      binance_id:
        type: string
    required:
    - binance_id
    type: object
  model.UpdateMoniestProfileRequest:
    properties:
      bio:
        type: string
      description:
        type: string
      subscription_info:
        $ref: '#/definitions/model.MoniestSubscriptionInfo'
    type: object
  model.UpdateUserProfileRequest:
    properties:
      background_photo:
        type: string
      fullname:
        type: string
      language:
        $ref: '#/definitions/db.UserLanguage'
      location:
        type: string
      profile_photo:
        type: string
    type: object
  model.User:
    properties:
      background_photo_link:
        type: string
      background_photo_thumbnail_link:
        type: string
      created_at:
        type: string
      email_verified:
        type: boolean
      fullname:
        type: string
      id:
        type: string
      location:
        type: string
      moniest:
        $ref: '#/definitions/model.Moniest'
      profile_photo_link:
        type: string
      profile_photo_thumbnail_link:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  model.UserAsContent:
    properties:
      background_photo_link:
        type: string
      background_photo_thumbnail_link:
        type: string
      created_at:
        type: string
      email_verified:
        type: boolean
      fullname:
        type: string
      id:
        type: string
      location:
        type: string
      moniest:
        $ref: '#/definitions/model.MoniestAsContent'
      profile_photo_link:
        type: string
      profile_photo_thumbnail_link:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  model.VerifyEmailRequest:
    properties:
      token:
        type: string
    required:
    - token
    type: object
  model.VerifyEmailResponse:
    properties:
      redirect_url:
        type: string
    type: object
  model.VerifyPasswordResetRequest:
    properties:
      new:
        type: string
      token:
        type: string
    required:
    - new
    - token
    type: object
  model.VerifyTokenRequest:
    properties:
      token:
        type: string
    required:
    - token
    type: object
info:
  contact: {}
paths:
  /account/email/send_verification_email:
    post:
      consumes:
      - application/json
      description: Email verification email sender
      parameters:
      - description: redirect_url is required
        in: body
        name: SendVerificationEmailBody
        required: true
        schema:
          $ref: '#/definitions/model.SendVerificationEmailRequest'
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
        "400":
          description: email already verified
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "404":
          description: user not found
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "406":
          description: invalid body
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "500":
          description: server error
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
      security:
      - bearerAuth: []
      summary: Send Verification Email
      tags:
      - Account
  /account/email/verify_email:
    post:
      consumes:
      - application/json
      description: Verify email by token
      parameters:
      - description: token is required
        in: body
        name: VerifyEmailBody
        required: true
        schema:
          $ref: '#/definitions/model.VerifyEmailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.VerifyEmailResponse'
        "400":
          description: already verified email
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "403":
          description: expired token
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "404":
          description: token not found | user not found
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "406":
          description: invalid body & token
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "500":
          description: server error
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
      summary: Verify Email
      tags:
      - Account
  /account/login:
    post:
      consumes:
      - application/json
      description: Login with [email & password] OR [username & password]
      parameters:
      - description: identifier can be email OR username
        in: body
        name: LoginBody
        required: true
        schema:
          $ref: '#/definitions/model.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.LoginResponse'
        "403":
          description: wrong password
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "404":
          description: email OR username not found
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "406":
          description: invalid body & data
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "500":
          description: server error
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
      summary: Login
      tags:
      - Auth
  /account/password:
    put:
      consumes:
      - application/json
      description: Authenticated user password change
      parameters:
      - description: ' '
        in: body
        name: ChangePasswordBody
        required: true
        schema:
          $ref: '#/definitions/model.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "403":
          description: wrong password
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "406":
          description: invalid body & data
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "500":
          description: server error
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
      security:
      - bearerAuth: []
      summary: Change Password
      tags:
      - Password
  /account/password/change_password:
    post:
      consumes:
      - application/json
      description: Unauthenticated verify token & change password
      parameters:
      - description: token & new fiels are required
        in: body
        name: VerifyTokenBody
        required: true
        schema:
          $ref: '#/definitions/model.VerifyPasswordResetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "403":
          description: token is expired
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "404":
          description: reset token not found
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "406":
          description: invalid body & data
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "500":
          description: server error
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
      summary: Verify Token & Change Password
      tags:
      - Password
  /account/password/send_email:
    post:
      consumes:
      - application/json
      description: Unauthenticated user send reset password email
      parameters:
      - description: ' '
        in: body
        name: SendEmailBody
        required: true
        schema:
          $ref: '#/definitions/model.SendResetPasswordEmailRequest'
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
        "406":
          description: invalid body & data
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "500":
          description: server error
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
      summary: Send Reset Password Email
      tags:
      - Password
  /account/password/verify_token:
    post:
      consumes:
      - application/json
      description: Unauthenticated verify token
      parameters:
      - description: token is required
        in: body
        name: VerifyTokenBody
        required: true
        schema:
          $ref: '#/definitions/model.VerifyTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "403":
          description: token is expired
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "404":
          description: reset token not found
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "406":
          description: invalid body
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "500":
          description: server error
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
      summary: Verify Token
      tags:
      - Password
  /account/register:
    post:
      consumes:
      - application/json
      description: Register as user
      parameters:
      - description: ' '
        in: body
        name: RegisterBody
        required: true
        schema:
          $ref: '#/definitions/model.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.RegisterResponse'
        "403":
          description: wrong password
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "406":
          description: invalid body & data
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "500":
          description: server error
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
      summary: Register
      tags:
      - Auth
  /account/username:
    patch:
      consumes:
      - application/json
      description: Change username of the user
      parameters:
      - description: new is required
        in: body
        name: ChangeUsernameBody
        required: true
        schema:
          $ref: '#/definitions/model.ChangeUsernameRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ChangeUsernameResponse'
        "403":
          description: username is already taken
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "406":
          description: invalid body or username
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "500":
          description: server error
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
      security:
      - bearerAuth: []
      summary: Change Username
      tags:
      - Account
  /account/usernames/:username/check:
    get:
      consumes:
      - application/json
      description: Check username is valid of not
      parameters:
      - description: username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.CheckUsernameResponse'
        "406":
          description: invalid username
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "500":
          description: server error
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
      summary: Check Username
      tags:
      - Account
  /admin/update_moniest_post_crypto_statistics:
    post:
      description: Can update the Moniest Post Crypto Statistics manually
      responses:
        "200":
          description: OK
        "403":
          description: Forbidden
        "500":
          description: server error
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
      security:
      - bearerAuth: []
      summary: Update Moniest Post Crypto Statistics manually
      tags:
      - Admin
  /admin/update_posts_status:
    post:
      description: Can update the status of the posts manually
      responses:
        "200":
          description: OK
        "403":
          description: Forbidden
        "500":
          description: server error
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
      security:
      - bearerAuth: []
      summary: Update Posts status manually
      tags:
      - Admin
  /assets/configs:
    get:
      consumes:
      - application/json
      description: Get All Configs of system
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GetConfigsResponse'
      summary: Get All Configs
      tags:
      - Assets
  /assets/error-codes:
    get:
      consumes:
      - application/json
      description: Get All Error Codes in the system
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/clientError.ErrorMessagesType'
      summary: Get Error Codes
      tags:
      - Assets
  /assets/general-info:
    get:
      consumes:
      - application/json
      description: Get General Information Configs
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GetGeneralInfoResponse'
      summary: Get General Info Configs
      tags:
      - Assets
  /assets/validations:
    get:
      consumes:
      - application/json
      description: Get Validation Configs of system
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GetValidationConfigsResponse'
      summary: Get Validation Configs
      tags:
      - Assets
  /content/moniests:
    get:
      consumes:
      - application/json
      description: Get All moniests
      parameters:
      - description: 'default: 10 & max: 50'
        in: query
        name: limit
        type: integer
      - description: 'default: 0'
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.UserAsContent'
            type: array
        "406":
          description: invalid body
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "500":
          description: server error
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
      security:
      - bearerAuth: []
      summary: Get Content Moniests
      tags:
      - Content
  /content/moniests/search:
    get:
      consumes:
      - application/json
      description: Search Moniest by their fullname & username
      parameters:
      - description: length min:1 max:30
        in: query
        name: searchText
        required: true
        type: string
      - description: 'default: 10 & max: 50'
        in: query
        name: limit
        type: integer
      - description: 'default: 0'
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.User'
            type: array
        "406":
          description: invalid body
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "500":
          description: server error
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
      security:
      - bearerAuth: []
      summary: Search Moniest
      tags:
      - Content
  /content/posts:
    get:
      consumes:
      - application/json
      description: Get Posts for timeline & explore
      parameters:
      - description: 'default: true'
        in: query
        name: subscribed
        type: boolean
      - description: 'default: true'
        in: query
        name: active
        type: boolean
      - description: 'options: [pnl | created_at] default: pnl, only affect when subscription
          & active = false'
        in: query
        name: sortBy
        type: string
      - description: 'default: 10 & max: 50'
        in: query
        name: limit
        type: integer
      - description: 'default: 0'
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.GetContentPostResponse'
            type: array
        "406":
          description: invalid body
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "500":
          description: server error
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
      security:
      - bearerAuth: []
      summary: Get Content Posts
      tags:
      - Content
  /crypto/currencies:
    get:
      consumes:
      - application/json
      description: Search crypto currencies by name
      parameters:
      - description: name
        in: query
        name: name
        required: true
        type: string
      - description: market_type
        in: query
        name: market_type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Currency'
            type: array
        "406":
          description: invalid name
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "500":
          description: server error & crypto api error
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
      security:
      - bearerAuth: []
      summary: Crypto Currency Search
      tags:
      - Crypto
  /feedback:
    post:
      consumes:
      - application/json
      description: '[AUTH OPTIONAL] Create Feedback as Authenticated or Anonymous'
      parameters:
      - description: type is optional
        in: body
        name: CreateFeedbackBody
        required: true
        schema:
          $ref: '#/definitions/model.CreateFeedbackRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "406":
          description: invalid body & data
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "500":
          description: server error
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
      security:
      - '""': []
        bearerAuth: []
      summary: Create Feedback
      tags:
      - Feedback
  /health:
    get:
      description: Health Check
      responses:
        "200":
          description: OK
        "500":
          description: server error
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
      summary: HealthCheck
      tags:
      - Health
  /moniests:
    post:
      consumes:
      - application/json
      description: Turn into moniest
      parameters:
      - description: ' '
        in: body
        name: CreateMoniestBody
        required: true
        schema:
          $ref: '#/definitions/model.CreateMoniestRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.OwnUser'
        "400":
          description: user is already moniest
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "403":
          description: 'forbidden operation: email is not verified'
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "404":
          description: not found user
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "406":
          description: invalid body
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "500":
          description: server error
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
      security:
      - bearerAuth: []
      summary: Be Moniest
      tags:
      - Moniest
  /moniests/:username/posts:
    get:
      consumes:
      - application/json
      description: Get Posts of Moniest [active or all]
      parameters:
      - description: moniest username
        in: path
        name: username
        required: true
        type: string
      - description: 'default: false, true: only live(active), false: all posts'
        in: query
        name: active
        type: boolean
      - description: 'default: 10 & max: 50'
        in: query
        name: limit
        type: integer
      - description: 'default: 0'
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.GetContentPostResponse'
            type: array
        "403":
          description: forbidden access (when not subscribed, but asks for active
            posts)
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "404":
          description: no moniest with this username
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "406":
          description: invalid params
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "500":
          description: server error
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
      security:
      - bearerAuth: []
      summary: Get Moniest Posts
      tags:
      - Post
  /moniests/:username/subscribe:
    post:
      consumes:
      - application/json
      description: Subscribe to Moniest
      parameters:
      - description: moniest username
        in: path
        name: username
        required: true
        type: string
      - description: all fields are required
        in: body
        name: UpdateMoniestBody
        required: true
        schema:
          $ref: '#/definitions/model.SubscribeMoniestRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SubscribeMoniestResponse'
        "400":
          description: already subscribed
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "403":
          description: subscribe own
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "404":
          description: moniest is not found
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "500":
          description: server error
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
      security:
      - bearerAuth: []
      summary: Subscribe to Moniest
      tags:
      - Moniest
  /moniests/:username/subscribers:
    get:
      consumes:
      - application/json
      description: Get Subscribers of Moniest
      parameters:
      - description: moniest username
        in: path
        name: username
        required: true
        type: string
      - description: 'default: 10 & max: 50'
        in: query
        name: limit
        type: integer
      - description: 'default: 0'
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.User'
            type: array
        "404":
          description: moniest not found with this username
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "406":
          description: invalid query params
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "500":
          description: server error
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
      security:
      - bearerAuth: []
      summary: Get Subscribers
      tags:
      - Moniest
  /moniests/:username/subscription-info:
    get:
      consumes:
      - application/json
      description: Get user subscription info
      parameters:
      - description: moniest username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'subscribed: true | false, pending: true | false | and other
            details based on these fields'
          schema:
            $ref: '#/definitions/model.GetSubscriptionInfoResponse'
        "404":
          description: moniest not found with this username
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "500":
          description: server error
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
      security:
      - bearerAuth: []
      summary: Get User Subscribe info
      tags:
      - Moniest
  /moniests/:username/unsubscribe:
    post:
      consumes:
      - application/json
      description: Unsubscribe from Moniest
      parameters:
      - description: moniest username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: user not subscribed
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "403":
          description: unsubscribe own
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "404":
          description: moniest is not found
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "500":
          description: server error
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
      security:
      - bearerAuth: []
      summary: Unsubscribe from Moniest
      tags:
      - Moniest
  /moniests/payout:
    get:
      consumes:
      - application/json
      description: Get Moniest Payout Info [binance id]
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GetMoniestPayoutInfos'
        "403":
          description: user is not moniest
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "404":
          description: user is not found
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "500":
          description: server error
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
      security:
      - bearerAuth: []
      summary: Get Moniest Payout Info
      tags:
      - Moniest
    patch:
      consumes:
      - application/json
      description: Update Moniest Payout Info [binance id]
      parameters:
      - description: binance_id is required
        in: body
        name: UpdateMoniestBody
        required: true
        schema:
          $ref: '#/definitions/model.UpdateMoniestPayoutInfo'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GetMoniestPayoutInfos'
        "403":
          description: user is not moniest
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "404":
          description: user is not found
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "406":
          description: invalid body
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "500":
          description: server error
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
      security:
      - bearerAuth: []
      summary: Update Moniest Payout Info
      tags:
      - Moniest
  /moniests/posts:
    post:
      consumes:
      - application/json
      description: Create Crypto Post
      parameters:
      - description: '`description` is optional'
        in: body
        name: CreatePostBody
        required: true
        schema:
          $ref: '#/definitions/model.CreatePostRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.CreatePostResponse'
        "400":
          description: user is not moniest
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "406":
          description: invalid body
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "500":
          description: server error
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
      security:
      - bearerAuth: []
      summary: Create Post
      tags:
      - Post
  /moniests/profile:
    patch:
      consumes:
      - application/json
      description: Update Moniest Profile details
      parameters:
      - description: all fields are optional
        in: body
        name: UpdateMoniestBody
        required: true
        schema:
          $ref: '#/definitions/model.UpdateMoniestProfileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.OwnUser'
        "403":
          description: user is not moniest
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "404":
          description: user is not found
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "406":
          description: invalid body | invalid bio | invalid desc | invalid fee | invalid
            message
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "500":
          description: server error
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
      security:
      - bearerAuth: []
      summary: Update Moniest Profile
      tags:
      - Moniest
  /payment/binance/transactions/check/:transaction_id:
    post:
      consumes:
      - application/json
      description: Check Transaction ID
      parameters:
      - description: transaction ID
        in: path
        name: transaction_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "404":
          description: transactionID not found
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "500":
          description: server error
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
      security:
      - bearerAuth: []
      summary: Check Transaction ID
      tags:
      - Payment
  /users/:username:
    get:
      consumes:
      - application/json
      description: get user info with username
      parameters:
      - description: username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '''email'' field will be visible if user request for own account'
          schema:
            $ref: '#/definitions/model.User'
        "404":
          description: not any user with this username
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "406":
          description: invalid username
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "500":
          description: server error
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
      security:
      - bearerAuth: []
      summary: Get User by Username
      tags:
      - User
  /users/:username/subscriptions:
    get:
      consumes:
      - application/json
      description: Get subscribed Users
      parameters:
      - description: username
        in: path
        name: username
        required: true
        type: string
      - description: 'default: 10 & max: 50'
        in: query
        name: limit
        type: integer
      - description: 'default: 0'
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.User'
            type: array
        "404":
          description: user not found
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "406":
          description: invalid body
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "500":
          description: server error
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
      security:
      - bearerAuth: []
      summary: Get Subscriptions
      tags:
      - User
  /users/:username/summary-stats:
    get:
      consumes:
      - application/json
      description: Get User & Moniest Stats
      parameters:
      - description: username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: when user is not moniest, it will NOT return `subscriber_count`
            and `post_count`
          schema:
            $ref: '#/definitions/model.MoniestStatResponse'
        "500":
          description: server error
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
      security:
      - bearerAuth: []
      summary: Get Stats
      tags:
      - User
  /users/profile:
    patch:
      consumes:
      - application/json
      description: Update user profile [fullname, location, profile photo, background
        photo]
      parameters:
      - description: all fields are optional
        in: body
        name: UpdateUserBody
        required: true
        schema:
          $ref: '#/definitions/model.UpdateUserProfileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.OwnUser'
        "404":
          description: user not found
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "406":
          description: invalid body & data
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "500":
          description: server error
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
      security:
      - bearerAuth: []
      summary: Update User Profile
      tags:
      - User
securityDefinitions:
  bearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
