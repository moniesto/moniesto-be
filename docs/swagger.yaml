definitions:
  clientError.ErrorResponse:
    properties:
      error:
        type: string
      error_code:
        type: string
    type: object
  model.ChangePasswordRequest:
    properties:
      new:
        type: string
      old:
        type: string
    required:
    - new
    - old
    type: object
  model.CheckUsernameResponse:
    properties:
      validity:
        type: boolean
    type: object
  model.LoginRequest:
    properties:
      identifier:
        minLength: 1
        type: string
      password:
        minLength: 6
        type: string
    required:
    - identifier
    - password
    type: object
  model.LoginResponse:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/model.OwnUser'
    type: object
  model.Moniest:
    properties:
      bio:
        type: string
      description:
        type: string
      id:
        type: string
      score:
        type: number
      subscription_info:
        $ref: '#/definitions/model.SubscriptionInfo'
    type: object
  model.OwnUser:
    properties:
      background_photo_link:
        type: string
      background_photo_thumbnail_link:
        type: string
      created_at:
        type: string
      email:
        type: string
      email_verified:
        type: boolean
      id:
        type: string
      location:
        type: string
      moniest:
        $ref: '#/definitions/model.Moniest'
      name:
        type: string
      profile_photo_link:
        type: string
      profile_photo_thumbnail_link:
        type: string
      surname:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  model.RegisterRequest:
    properties:
      email:
        type: string
      name:
        minLength: 1
        type: string
      password:
        type: string
      surname:
        minLength: 1
        type: string
      username:
        type: string
    required:
    - email
    - name
    - password
    - surname
    - username
    type: object
  model.RegisterResponse:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/model.OwnUser'
    type: object
  model.SendResetPasswordEmailRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  model.SubscriptionInfo:
    properties:
      fee:
        type: number
      message:
        type: string
      updated_at:
        type: string
    type: object
  model.VerifyPasswordResetRequest:
    properties:
      new:
        type: string
      token:
        type: string
    required:
    - new
    - token
    type: object
info:
  contact: {}
paths:
  /account/login:
    post:
      consumes:
      - application/json
      description: Login with [email & password] OR [username & password]
      parameters:
      - description: identifier can be email OR username
        in: body
        name: LoginBody
        required: true
        schema:
          $ref: '#/definitions/model.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.LoginResponse'
        "403":
          description: wrong password
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "404":
          description: email OR username not found
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "406":
          description: invalid body & data
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "500":
          description: server error
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
      summary: Login
      tags:
      - Auth
  /account/password:
    put:
      consumes:
      - application/json
      description: Authenticated user password change
      parameters:
      - description: ' '
        in: body
        name: ChangePasswordBody
        required: true
        schema:
          $ref: '#/definitions/model.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "403":
          description: wrong password
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "406":
          description: invalid body & data
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "500":
          description: server error
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
      security:
      - bearerAuth: []
      summary: Change Password
      tags:
      - Password
  /account/password/send_email:
    post:
      consumes:
      - application/json
      description: Unauthenticated user send reset password email
      parameters:
      - description: ' '
        in: body
        name: SendEmailBody
        required: true
        schema:
          $ref: '#/definitions/model.SendResetPasswordEmailRequest'
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
        "406":
          description: invalid body & data
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "500":
          description: server error
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
      summary: Send Reset Password Email
      tags:
      - Password
  /account/password/verify_token:
    post:
      consumes:
      - application/json
      description: Unauthenticated verify token & change password
      parameters:
      - description: token & new fiels are required
        in: body
        name: VerifyTokenBody
        required: true
        schema:
          $ref: '#/definitions/model.VerifyPasswordResetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "403":
          description: token is expired
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "404":
          description: reset token not found
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "406":
          description: invalid body & data
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "500":
          description: server error
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
      summary: Verify Token & Change Password
      tags:
      - Password
  /account/register:
    post:
      consumes:
      - application/json
      description: Register as user
      parameters:
      - description: ' '
        in: body
        name: body"
        required: true
        schema:
          $ref: '#/definitions/model.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.RegisterResponse'
        "403":
          description: wrong password
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "406":
          description: invalid body & data
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "500":
          description: server error
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
      summary: Register
      tags:
      - Auth
  /usernames/:username/check:
    get:
      consumes:
      - application/json
      description: Check username is valid of not
      parameters:
      - description: username
        in: path
        name: username
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.CheckUsernameResponse'
        "406":
          description: invalid username
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
        "500":
          description: server error
          schema:
            $ref: '#/definitions/clientError.ErrorResponse'
      summary: Check username
      tags:
      - Account
securityDefinitions:
  bearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
